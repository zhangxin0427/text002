; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\bsp_led.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp_led.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\User -I..\User\bsp\inc -I..\User\bsp -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\MALLOC -I..\FatFs\src -I..\FatFs\src\option -I..\Iap -I"E:\Program Files\MDK 4.74\ARM\RV31\INC" -I"E:\Program Files\MDK 4.74\ARM\CMSIS\Include" -I"E:\Program Files\MDK 4.74\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\bsp_led.crf ..\User\bsp\src\bsp_led.c]
                          THUMB

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;18     */
;;;19     void bsp_InitLed(void)
000000  b508              PUSH     {r3,lr}
;;;20     {
;;;21     	GPIO_InitTypeDef GPIO_InitStructure;
;;;22     
;;;23     	/* 打开GPIO时钟 */
;;;24     	RCC_APB2PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;25     
;;;26     	/*
;;;27     		配置所有的LED指示灯GPIO为推挽输出模式
;;;28     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;29     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;30     	*/
;;;31     	bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;32     
;;;33     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;34     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000016  2010              MOVS     r0,#0x10
000018  f88d0003          STRB     r0,[sp,#3]
;;;35     	
;;;36     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
00001c  2002              MOVS     r0,#2
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;37     	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
000022  4669              MOV      r1,sp
000024  4801              LDR      r0,|L1.44|
000026  f7fffffe          BL       GPIO_Init
;;;38     
;;;39     
;;;40     }
00002a  bd08              POP      {r3,pc}
;;;41     
                          ENDP

                  |L1.44|
                          DCD      0x40010800

                          AREA ||i.bsp_IsLedOn||, CODE, READONLY, ALIGN=2

                  bsp_IsLedOn PROC
;;;103    */
;;;104    uint8_t bsp_IsLedOn(uint8_t _no)
000000  4601              MOV      r1,r0
;;;105    {
;;;106    	if (_no == 1)
000002  2901              CMP      r1,#1
000004  d106              BNE      |L2.20|
;;;107    	{
;;;108    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) == 0)
000006  4804              LDR      r0,|L2.24|
000008  6800              LDR      r0,[r0,#0]
00000a  f0100f02          TST      r0,#2
00000e  d101              BNE      |L2.20|
;;;109    		{
;;;110    			return 1;
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;111    		}
;;;112    	}
;;;113    	return 0;
;;;114    
;;;115    }
000012  4770              BX       lr
                  |L2.20|
000014  2000              MOVS     r0,#0                 ;113
000016  e7fc              B        |L2.18|
;;;116    
                          ENDP

                  |L2.24|
                          DCD      0x4001080c

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;68     */
;;;69     void bsp_LedOff(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;70     {
;;;71     	_no--;
000002  b2c8              UXTB     r0,r1
;;;72     
;;;73     	if (_no == 0)
000004  b910              CBNZ     r0,|L3.12|
;;;74     	{
;;;75     		GPIO_PORT_LED1->BSRR = GPIO_PIN_LED1;
000006  2102              MOVS     r1,#2
000008  4a01              LDR      r2,|L3.16|
00000a  6011              STR      r1,[r2,#0]
                  |L3.12|
;;;76     	}
;;;77     }
00000c  4770              BX       lr
;;;78     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40010810

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;49     */
;;;50     void bsp_LedOn(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;51     {
;;;52     	_no--;
000002  b2c8              UXTB     r0,r1
;;;53     
;;;54     	if (_no == 0)
000004  b910              CBNZ     r0,|L4.12|
;;;55     	{
;;;56     		GPIO_PORT_LED1->BRR = GPIO_PIN_LED1;
000006  2102              MOVS     r1,#2
000008  4a01              LDR      r2,|L4.16|
00000a  6011              STR      r1,[r2,#0]
                  |L4.12|
;;;57     	}
;;;58     
;;;59     }
00000c  4770              BX       lr
;;;60     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40010814

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;86     */
;;;87     void bsp_LedToggle(uint8_t _no)
000000  2801              CMP      r0,#1
;;;88     {
;;;89     	if (_no == 1)
000002  d105              BNE      |L5.16|
;;;90     	{
;;;91     		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;
000004  4903              LDR      r1,|L5.20|
000006  6809              LDR      r1,[r1,#0]
000008  f0810102          EOR      r1,r1,#2
00000c  4a01              LDR      r2,|L5.20|
00000e  6011              STR      r1,[r2,#0]
                  |L5.16|
;;;92     	}
;;;93     
;;;94     }
000010  4770              BX       lr
;;;95     
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x4001080c

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\src\\bsp_led.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_c_ba23b041____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REVSH|
#line 128
|__asm___9_bsp_led_c_ba23b041____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
