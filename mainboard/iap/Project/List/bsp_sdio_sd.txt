; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\bsp_sdio_sd.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp_sdio_sd.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\User -I..\User\bsp\inc -I..\User\bsp -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\MALLOC -I..\FatFs\src -I..\FatFs\src\option -I..\Iap -I"E:\Program Files\MDK 4.74\ARM\RV31\INC" -I"E:\Program Files\MDK 4.74\ARM\CMSIS\Include" -I"E:\Program Files\MDK 4.74\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\bsp_sdio_sd.crf ..\User\bsp\src\bsp_sdio_sd.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=2

                  CmdError PROC
;;;885    //返回值:sd卡错误码
;;;886    SD_Error CmdError(void)
000000  2200              MOVS     r2,#0
;;;887    {
;;;888    	SD_Error errorstatus = SD_OK;
;;;889    	u32 timeout=SDIO_CMD0TIMEOUT;	   
000002  f2427110          MOV      r1,#0x2710
;;;890    	while(timeout--)
000006  e005              B        |L1.20|
                  |L1.8|
;;;891    	{
;;;892    		if(SDIO->STA&(1<<7))break;	//命令已发送(无需响应)	 
000008  4809              LDR      r0,|L1.48|
00000a  6b40              LDR      r0,[r0,#0x34]
00000c  f0100f80          TST      r0,#0x80
000010  d000              BEQ      |L1.20|
000012  e003              B        |L1.28|
                  |L1.20|
000014  0008              MOVS     r0,r1                 ;890
000016  f1a10101          SUB      r1,r1,#1              ;890
00001a  d1f5              BNE      |L1.8|
                  |L1.28|
00001c  bf00              NOP      
;;;893    	}	    
;;;894    	if(timeout==0)return SD_CMD_RSP_TIMEOUT;  
00001e  b909              CBNZ     r1,|L1.36|
000020  2003              MOVS     r0,#3
                  |L1.34|
;;;895    	SDIO->ICR=0X5FF;				//清除标记
;;;896    	return errorstatus;
;;;897    }	 
000022  4770              BX       lr
                  |L1.36|
000024  f24050ff          MOV      r0,#0x5ff             ;895
000028  4b01              LDR      r3,|L1.48|
00002a  6398              STR      r0,[r3,#0x38]         ;895
00002c  4610              MOV      r0,r2                 ;896
00002e  e7f8              B        |L1.34|
;;;898    //检查R7响应的错误状态
                          ENDP

                  |L1.48|
                          DCD      0x40018000

                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;925    //返回值:sd卡错误码
;;;926    SD_Error CmdResp1Error(u8 cmd)
000000  4602              MOV      r2,r0
;;;927    {	  
;;;928       	u32 status;
;;;929    	while(1)
000002  e005              B        |L2.16|
                  |L2.4|
;;;930    	{
;;;931    		status=SDIO->STA;
000004  4813              LDR      r0,|L2.84|
000006  6b41              LDR      r1,[r0,#0x34]
;;;932    		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000008  f0110f45          TST      r1,#0x45
00000c  d000              BEQ      |L2.16|
00000e  e000              B        |L2.18|
                  |L2.16|
000010  e7f8              B        |L2.4|
                  |L2.18|
000012  bf00              NOP      
;;;933    	}  
;;;934     	if(status&(1<<2))					//响应超时
000014  f0110f04          TST      r1,#4
000018  d004              BEQ      |L2.36|
;;;935    	{																				    
;;;936     		SDIO->ICR=1<<2;					//清除命令响应超时标志
00001a  2004              MOVS     r0,#4
00001c  4b0d              LDR      r3,|L2.84|
00001e  6398              STR      r0,[r3,#0x38]
;;;937    		return SD_CMD_RSP_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L2.34|
;;;938    	}	
;;;939     	if(status&(1<<0))					//CRC错误
;;;940    	{																				    
;;;941     		SDIO->ICR=1<<0;					//清除标志
;;;942    		return SD_CMD_CRC_FAIL;
;;;943    	}		
;;;944    	if(SDIO->RESPCMD!=cmd)return SD_ILLEGAL_CMD;//命令不匹配 
;;;945      	SDIO->ICR=0X5FF;	 				//清除标记
;;;946    	return (SD_Error)(SDIO->RESP1&SD_OCR_ERRORBITS);//返回卡响应
;;;947    }
000022  4770              BX       lr
                  |L2.36|
000024  f0110f01          TST      r1,#1                 ;939
000028  d003              BEQ      |L2.50|
00002a  2001              MOVS     r0,#1                 ;941
00002c  4b09              LDR      r3,|L2.84|
00002e  6398              STR      r0,[r3,#0x38]         ;941
000030  e7f7              B        |L2.34|
                  |L2.50|
000032  4808              LDR      r0,|L2.84|
000034  6900              LDR      r0,[r0,#0x10]         ;944
000036  4290              CMP      r0,r2                 ;944
000038  d001              BEQ      |L2.62|
00003a  2010              MOVS     r0,#0x10              ;944
00003c  e7f1              B        |L2.34|
                  |L2.62|
00003e  f24050ff          MOV      r0,#0x5ff             ;945
000042  4b04              LDR      r3,|L2.84|
000044  6398              STR      r0,[r3,#0x38]         ;945
000046  4618              MOV      r0,r3                 ;946
000048  6940              LDR      r0,[r0,#0x14]         ;946
00004a  2308              MOVS     r3,#8                 ;946
00004c  4018              ANDS     r0,r0,r3              ;946
00004e  b2c0              UXTB     r0,r0                 ;946
000050  e7e7              B        |L2.34|
;;;948    //检查R3响应的错误状态
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x40018000

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;967    //返回值:错误状态
;;;968    SD_Error CmdResp2Error(void)
000000  b510              PUSH     {r4,lr}
;;;969    {
;;;970    	SD_Error errorstatus=SD_OK;
000002  2000              MOVS     r0,#0
;;;971    	u32 status=0;
000004  2100              MOVS     r1,#0
;;;972    	u32 timeout=SDIO_CMD0TIMEOUT;
000006  f2427210          MOV      r2,#0x2710
;;;973     	while(timeout--)
00000a  e005              B        |L3.24|
                  |L3.12|
;;;974    	{
;;;975    		status=SDIO->STA;
00000c  4b13              LDR      r3,|L3.92|
00000e  6b59              LDR      r1,[r3,#0x34]
;;;976    		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000010  f0110f45          TST      r1,#0x45
000014  d000              BEQ      |L3.24|
000016  e003              B        |L3.32|
                  |L3.24|
000018  0013              MOVS     r3,r2                 ;973
00001a  f1a20201          SUB      r2,r2,#1              ;973
00001e  d1f5              BNE      |L3.12|
                  |L3.32|
000020  bf00              NOP      
;;;977    	}
;;;978      	if((timeout==0)||(status&(1<<2)))	//响应超时
000022  b112              CBZ      r2,|L3.42|
000024  f0110f04          TST      r1,#4
000028  d007              BEQ      |L3.58|
                  |L3.42|
;;;979    	{																				    
;;;980    		errorstatus=SD_CMD_RSP_TIMEOUT; 
00002a  2003              MOVS     r0,#3
;;;981    		SDIO->ICR|=1<<2;				//清除命令响应超时标志
00002c  4b0b              LDR      r3,|L3.92|
00002e  6b9b              LDR      r3,[r3,#0x38]
000030  f0430304          ORR      r3,r3,#4
000034  4c09              LDR      r4,|L3.92|
000036  63a3              STR      r3,[r4,#0x38]
                  |L3.56|
;;;982    		return errorstatus;
;;;983    	}	 
;;;984    	if(status&1<<0)						//CRC错误
;;;985    	{								   
;;;986    		errorstatus=SD_CMD_CRC_FAIL;
;;;987    		SDIO->ICR|=1<<0;				//清除响应标志
;;;988     	}
;;;989    	SDIO->ICR=0X5FF;	 				//清除标记
;;;990     	return errorstatus;								    		 
;;;991    } 
000038  bd10              POP      {r4,pc}
                  |L3.58|
00003a  f0110f01          TST      r1,#1                 ;984
00003e  d006              BEQ      |L3.78|
000040  2001              MOVS     r0,#1                 ;986
000042  4b06              LDR      r3,|L3.92|
000044  6b9b              LDR      r3,[r3,#0x38]         ;987
000046  f0430301          ORR      r3,r3,#1              ;987
00004a  4c04              LDR      r4,|L3.92|
00004c  63a3              STR      r3,[r4,#0x38]         ;987
                  |L3.78|
00004e  f24053ff          MOV      r3,#0x5ff             ;989
000052  4c02              LDR      r4,|L3.92|
000054  63a3              STR      r3,[r4,#0x38]         ;989
000056  bf00              NOP                            ;990
000058  e7ee              B        |L3.56|
;;;992    //检查R6响应的错误状态
                          ENDP

00005a  0000              DCW      0x0000
                  |L3.92|
                          DCD      0x40018000

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;949    //返回值:错误状态
;;;950    SD_Error CmdResp3Error(void)
000000  e005              B        |L4.14|
                  |L4.2|
;;;951    {
;;;952    	u32 status;						 
;;;953     	while(1)
;;;954    	{
;;;955    		status=SDIO->STA;
000002  480c              LDR      r0,|L4.52|
000004  6b41              LDR      r1,[r0,#0x34]
;;;956    		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000006  f0110f45          TST      r1,#0x45
00000a  d000              BEQ      |L4.14|
00000c  e000              B        |L4.16|
                  |L4.14|
00000e  e7f8              B        |L4.2|
                  |L4.16|
000010  bf00              NOP      
;;;957    	}
;;;958     	if(status&(1<<2))					//响应超时
000012  f0110f04          TST      r1,#4
000016  d007              BEQ      |L4.40|
;;;959    	{											 
;;;960    		SDIO->ICR|=1<<2;				//清除命令响应超时标志
000018  4806              LDR      r0,|L4.52|
00001a  6b80              LDR      r0,[r0,#0x38]
00001c  f0400004          ORR      r0,r0,#4
000020  4a04              LDR      r2,|L4.52|
000022  6390              STR      r0,[r2,#0x38]
;;;961    		return SD_CMD_RSP_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L4.38|
;;;962    	}	 
;;;963       	SDIO->ICR=0X5FF;	 				//清除标记
;;;964     	return SD_OK;								  
;;;965    }
000026  4770              BX       lr
                  |L4.40|
000028  f24050ff          MOV      r0,#0x5ff             ;963
00002c  4a01              LDR      r2,|L4.52|
00002e  6390              STR      r0,[r2,#0x38]         ;963
000030  2000              MOVS     r0,#0                 ;964
000032  e7f8              B        |L4.38|
;;;966    //检查R2响应的错误状态
                          ENDP

                  |L4.52|
                          DCD      0x40018000

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;995    //返回值:错误状态
;;;996    SD_Error CmdResp6Error(u8 cmd,u16*prca)
000000  b570              PUSH     {r4-r6,lr}
;;;997    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;998    	SD_Error errorstatus=SD_OK;
000006  2500              MOVS     r5,#0
;;;999    	u32 status;					    
;;;1000   	u32 rspr1;
;;;1001    	while(1)
000008  e005              B        |L5.22|
                  |L5.10|
;;;1002   	{
;;;1003   		status=SDIO->STA;
00000a  4821              LDR      r0,|L5.144|
00000c  6b42              LDR      r2,[r0,#0x34]
;;;1004   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0120f45          TST      r2,#0x45
000012  d000              BEQ      |L5.22|
000014  e000              B        |L5.24|
                  |L5.22|
000016  e7f8              B        |L5.10|
                  |L5.24|
000018  bf00              NOP      
;;;1005   	}
;;;1006   	if(status&(1<<2))					//响应超时
00001a  f0120f04          TST      r2,#4
00001e  d007              BEQ      |L5.48|
;;;1007   	{																				    
;;;1008    		SDIO->ICR|=1<<2;				//清除命令响应超时标志
000020  481b              LDR      r0,|L5.144|
000022  6b80              LDR      r0,[r0,#0x38]
000024  f0400004          ORR      r0,r0,#4
000028  4e19              LDR      r6,|L5.144|
00002a  63b0              STR      r0,[r6,#0x38]
;;;1009   		return SD_CMD_RSP_TIMEOUT;
00002c  2003              MOVS     r0,#3
                  |L5.46|
;;;1010   	}	 	 
;;;1011   	if(status&1<<0)						//CRC错误
;;;1012   	{								   
;;;1013   		SDIO->ICR|=1<<0;				//清除响应标志
;;;1014    		return SD_CMD_CRC_FAIL;
;;;1015   	}
;;;1016   	if(SDIO->RESPCMD!=cmd)				//判断是否响应cmd命令
;;;1017   	{
;;;1018    		return SD_ILLEGAL_CMD; 		
;;;1019   	}	    
;;;1020   	SDIO->ICR=0X5FF;	 				//清除所有标记
;;;1021   	rspr1=SDIO->RESP1;					//得到响应 	 
;;;1022   	if(SD_ALLZERO==(rspr1&(SD_R6_GENERAL_UNKNOWN_ERROR|SD_R6_ILLEGAL_CMD|SD_R6_COM_CRC_FAILED)))
;;;1023   	{
;;;1024   		*prca=(u16)(rspr1>>16);			//右移16位得到,rca
;;;1025   		return errorstatus;
;;;1026   	}
;;;1027      	if(rspr1&SD_R6_GENERAL_UNKNOWN_ERROR)return SD_GENERAL_UNKNOWN_ERROR;
;;;1028      	if(rspr1&SD_R6_ILLEGAL_CMD)return SD_ILLEGAL_CMD;
;;;1029      	if(rspr1&SD_R6_COM_CRC_FAILED)return SD_COM_CRC_FAILED;
;;;1030   	return errorstatus;
;;;1031   }
00002e  bd70              POP      {r4-r6,pc}
                  |L5.48|
000030  f0120f01          TST      r2,#1                 ;1011
000034  d007              BEQ      |L5.70|
000036  4816              LDR      r0,|L5.144|
000038  6b80              LDR      r0,[r0,#0x38]         ;1013
00003a  f0400001          ORR      r0,r0,#1              ;1013
00003e  4e14              LDR      r6,|L5.144|
000040  63b0              STR      r0,[r6,#0x38]         ;1013
000042  2001              MOVS     r0,#1                 ;1014
000044  e7f3              B        |L5.46|
                  |L5.70|
000046  4812              LDR      r0,|L5.144|
000048  6900              LDR      r0,[r0,#0x10]         ;1016
00004a  4298              CMP      r0,r3                 ;1016
00004c  d001              BEQ      |L5.82|
00004e  2010              MOVS     r0,#0x10              ;1018
000050  e7ed              B        |L5.46|
                  |L5.82|
000052  f24050ff          MOV      r0,#0x5ff             ;1020
000056  4e0e              LDR      r6,|L5.144|
000058  63b0              STR      r0,[r6,#0x38]         ;1020
00005a  4630              MOV      r0,r6                 ;1021
00005c  6941              LDR      r1,[r0,#0x14]         ;1021
00005e  f4114f60          TST      r1,#0xe000            ;1022
000062  d103              BNE      |L5.108|
000064  0c08              LSRS     r0,r1,#16             ;1024
000066  8020              STRH     r0,[r4,#0]            ;1024
000068  4628              MOV      r0,r5                 ;1025
00006a  e7e0              B        |L5.46|
                  |L5.108|
00006c  f4115f00          TST      r1,#0x2000            ;1027
000070  d001              BEQ      |L5.118|
000072  2013              MOVS     r0,#0x13              ;1027
000074  e7db              B        |L5.46|
                  |L5.118|
000076  f4114f80          TST      r1,#0x4000            ;1028
00007a  d001              BEQ      |L5.128|
00007c  2010              MOVS     r0,#0x10              ;1028
00007e  e7d6              B        |L5.46|
                  |L5.128|
000080  f4114f00          TST      r1,#0x8000            ;1029
000084  d001              BEQ      |L5.138|
000086  200f              MOVS     r0,#0xf               ;1029
000088  e7d1              B        |L5.46|
                  |L5.138|
00008a  4628              MOV      r0,r5                 ;1030
00008c  e7cf              B        |L5.46|
;;;1032   
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      0x40018000

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;899    //返回值:sd卡错误码
;;;900    SD_Error CmdResp7Error(void)
000000  b510              PUSH     {r4,lr}
;;;901    {
;;;902    	SD_Error errorstatus=SD_OK;
000002  2000              MOVS     r0,#0
;;;903    	u32 status=0;
000004  2100              MOVS     r1,#0
;;;904    	u32 timeout=SDIO_CMD0TIMEOUT;
000006  f2427210          MOV      r2,#0x2710
;;;905     	while(timeout--)
00000a  e005              B        |L6.24|
                  |L6.12|
;;;906    	{
;;;907    		status=SDIO->STA;
00000c  4b11              LDR      r3,|L6.84|
00000e  6b59              LDR      r1,[r3,#0x34]
;;;908    		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000010  f0110f45          TST      r1,#0x45
000014  d000              BEQ      |L6.24|
000016  e003              B        |L6.32|
                  |L6.24|
000018  0013              MOVS     r3,r2                 ;905
00001a  f1a20201          SUB      r2,r2,#1              ;905
00001e  d1f5              BNE      |L6.12|
                  |L6.32|
000020  bf00              NOP      
;;;909    	}
;;;910     	if((timeout==0)||(status&(1<<2)))	//响应超时
000022  b112              CBZ      r2,|L6.42|
000024  f0110f04          TST      r1,#4
000028  d007              BEQ      |L6.58|
                  |L6.42|
;;;911    	{																				    
;;;912    		errorstatus=SD_CMD_RSP_TIMEOUT;	//当前卡不是2.0兼容卡,或者不支持设定的电压范围
00002a  2003              MOVS     r0,#3
;;;913    		SDIO->ICR|=1<<2;				//清除命令响应超时标志
00002c  4b09              LDR      r3,|L6.84|
00002e  6b9b              LDR      r3,[r3,#0x38]
000030  f0430304          ORR      r3,r3,#4
000034  4c07              LDR      r4,|L6.84|
000036  63a3              STR      r3,[r4,#0x38]
                  |L6.56|
;;;914    		return errorstatus;
;;;915    	}	 
;;;916    	if(status&1<<6)						//成功接收到响应
;;;917    	{								   
;;;918    		errorstatus=SD_OK;
;;;919    		SDIO->ICR|=1<<6;				//清除响应标志
;;;920     	}
;;;921    	return errorstatus;
;;;922    }	   
000038  bd10              POP      {r4,pc}
                  |L6.58|
00003a  f0110f40          TST      r1,#0x40              ;916
00003e  d006              BEQ      |L6.78|
000040  2000              MOVS     r0,#0                 ;918
000042  4b04              LDR      r3,|L6.84|
000044  6b9b              LDR      r3,[r3,#0x38]         ;919
000046  f0430340          ORR      r3,r3,#0x40           ;919
00004a  4c02              LDR      r4,|L6.84|
00004c  63a3              STR      r3,[r4,#0x38]         ;919
                  |L6.78|
00004e  bf00              NOP                            ;921
000050  e7f2              B        |L6.56|
;;;923    //检查R1响应的错误状态
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      0x40018000

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;1084   //返回值:错误状态		   
;;;1085   SD_Error FindSCR(u16 rca,u32 *pscr)
000000  b5fc              PUSH     {r2-r7,lr}
;;;1086   { 
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;1087   	u32 index = 0;
000006  2600              MOVS     r6,#0
;;;1088   	SD_Error errorstatus = SD_OK;
000008  2400              MOVS     r4,#0
;;;1089   	u32 tempscr[2]={0,0};  
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
;;;1090    	SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,8);			//发送CMD16,短响应,设置Block Size为8字节											  
000010  2208              MOVS     r2,#8
000012  2101              MOVS     r1,#1
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       SDIO_Send_Cmd
;;;1091    	errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       CmdResp1Error
000020  4604              MOV      r4,r0
;;;1092    	if(errorstatus!=SD_OK)return errorstatus;	    
000022  b10c              CBZ      r4,|L7.40|
000024  4620              MOV      r0,r4
                  |L7.38|
;;;1093     	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,(u32)rca<<16);	//发送CMD55,短响应 									  
;;;1094    	errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1095    	if(errorstatus!=SD_OK)return errorstatus;
;;;1096   	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,8,3,1);		//8个字节长度,block为8字节,SD卡到SDIO.
;;;1097      	SDIO_Send_Cmd(SD_CMD_SD_APP_SEND_SCR,1,0);		//发送ACMD51,短响应,参数为0											  
;;;1098    	errorstatus=CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;1099    	if(errorstatus!=SD_OK)return errorstatus;							   
;;;1100    	while(!(SDIO->STA&(SDIO_FLAG_RXOVERR|SDIO_FLAG_DCRCFAIL|SDIO_FLAG_DTIMEOUT|SDIO_FLAG_DBCKEND|SDIO_FLAG_STBITERR)))
;;;1101   	{
;;;1102   		if(SDIO->STA&(1<<21))//接收FIFO数据可用
;;;1103   		{
;;;1104   			*(tempscr+index)=SDIO->FIFO;	//读取FIFO内容
;;;1105   			index++;
;;;1106   			if(index>=2)break;
;;;1107   		}
;;;1108   	}
;;;1109    	if(SDIO->STA&(1<<3))		//接收数据超时
;;;1110   	{										 
;;;1111    		SDIO->ICR|=1<<3;		//清除标记
;;;1112   		return SD_DATA_TIMEOUT;
;;;1113   	}
;;;1114   	else if(SDIO->STA&(1<<1))	//已发送/接收的数据块CRC校验错误
;;;1115   	{
;;;1116    		SDIO->ICR|=1<<1;		//清除标记
;;;1117   		return SD_DATA_CRC_FAIL;   
;;;1118   	}
;;;1119   	else if(SDIO->STA&(1<<5))	//接收FIFO溢出
;;;1120   	{
;;;1121    		SDIO->ICR|=1<<5;		//清除标记
;;;1122   		return SD_RX_OVERRUN;   	   
;;;1123   	}
;;;1124   	else if(SDIO->STA&(1<<9))	//起始位检测错误
;;;1125   	{
;;;1126    		SDIO->ICR|=1<<9;		//清除标记
;;;1127   		return SD_START_BIT_ERR;    
;;;1128   	}
;;;1129      	SDIO->ICR=0X5FF;	 		//清除标记	 
;;;1130   	//把数据顺序按8位为单位倒过来.   	
;;;1131   	*(pscr+1)=((tempscr[0]&SD_0TO7BITS)<<24)|((tempscr[0]&SD_8TO15BITS)<<8)|((tempscr[0]&SD_16TO23BITS)>>8)|((tempscr[0]&SD_24TO31BITS)>>24);
;;;1132   	*(pscr)=((tempscr[1]&SD_0TO7BITS)<<24)|((tempscr[1]&SD_8TO15BITS)<<8)|((tempscr[1]&SD_16TO23BITS)>>8)|((tempscr[1]&SD_24TO31BITS)>>24);
;;;1133    	return errorstatus;
;;;1134   }
000026  bdfc              POP      {r2-r7,pc}
                  |L7.40|
000028  043a              LSLS     r2,r7,#16             ;1093
00002a  2101              MOVS     r1,#1                 ;1093
00002c  2037              MOVS     r0,#0x37              ;1093
00002e  f7fffffe          BL       SDIO_Send_Cmd
000032  2037              MOVS     r0,#0x37              ;1094
000034  f7fffffe          BL       CmdResp1Error
000038  4604              MOV      r4,r0                 ;1094
00003a  b10c              CBZ      r4,|L7.64|
00003c  4620              MOV      r0,r4                 ;1095
00003e  e7f2              B        |L7.38|
                  |L7.64|
000040  2301              MOVS     r3,#1                 ;1096
000042  2203              MOVS     r2,#3                 ;1096
000044  2108              MOVS     r1,#8                 ;1096
000046  483f              LDR      r0,|L7.324|
000048  f7fffffe          BL       SDIO_Send_Data_Cfg
00004c  2200              MOVS     r2,#0                 ;1097
00004e  2101              MOVS     r1,#1                 ;1097
000050  2033              MOVS     r0,#0x33              ;1097
000052  f7fffffe          BL       SDIO_Send_Cmd
000056  2033              MOVS     r0,#0x33              ;1098
000058  f7fffffe          BL       CmdResp1Error
00005c  4604              MOV      r4,r0                 ;1098
00005e  b10c              CBZ      r4,|L7.100|
000060  4620              MOV      r0,r4                 ;1099
000062  e7e0              B        |L7.38|
                  |L7.100|
000064  e00d              B        |L7.130|
                  |L7.102|
000066  4838              LDR      r0,|L7.328|
000068  6b40              LDR      r0,[r0,#0x34]         ;1102
00006a  f4101f00          TST      r0,#0x200000          ;1102
00006e  d008              BEQ      |L7.130|
000070  4836              LDR      r0,|L7.332|
000072  6800              LDR      r0,[r0,#0]            ;1104
000074  f84d0026          STR      r0,[sp,r6,LSL #2]     ;1104
000078  f1060601          ADD      r6,r6,#1              ;1105
00007c  2e02              CMP      r6,#2                 ;1106
00007e  d300              BCC      |L7.130|
000080  e005              B        |L7.142|
                  |L7.130|
000082  4831              LDR      r0,|L7.328|
000084  6b40              LDR      r0,[r0,#0x34]         ;1100
000086  f240612a          MOV      r1,#0x62a             ;1100
00008a  4208              TST      r0,r1                 ;1100
00008c  d0eb              BEQ      |L7.102|
                  |L7.142|
00008e  bf00              NOP                            ;1106
000090  482d              LDR      r0,|L7.328|
000092  6b40              LDR      r0,[r0,#0x34]         ;1109
000094  f0100f08          TST      r0,#8                 ;1109
000098  d007              BEQ      |L7.170|
00009a  482b              LDR      r0,|L7.328|
00009c  6b80              LDR      r0,[r0,#0x38]         ;1111
00009e  f0400008          ORR      r0,r0,#8              ;1111
0000a2  4929              LDR      r1,|L7.328|
0000a4  6388              STR      r0,[r1,#0x38]         ;1111
0000a6  2004              MOVS     r0,#4                 ;1112
0000a8  e7bd              B        |L7.38|
                  |L7.170|
0000aa  4827              LDR      r0,|L7.328|
0000ac  6b40              LDR      r0,[r0,#0x34]         ;1114
0000ae  f0100f02          TST      r0,#2                 ;1114
0000b2  d007              BEQ      |L7.196|
0000b4  4824              LDR      r0,|L7.328|
0000b6  6b80              LDR      r0,[r0,#0x38]         ;1116
0000b8  f0400002          ORR      r0,r0,#2              ;1116
0000bc  4922              LDR      r1,|L7.328|
0000be  6388              STR      r0,[r1,#0x38]         ;1116
0000c0  2002              MOVS     r0,#2                 ;1117
0000c2  e7b0              B        |L7.38|
                  |L7.196|
0000c4  4820              LDR      r0,|L7.328|
0000c6  6b40              LDR      r0,[r0,#0x34]         ;1119
0000c8  f0100f20          TST      r0,#0x20              ;1119
0000cc  d007              BEQ      |L7.222|
0000ce  481e              LDR      r0,|L7.328|
0000d0  6b80              LDR      r0,[r0,#0x38]         ;1121
0000d2  f0400020          ORR      r0,r0,#0x20           ;1121
0000d6  491c              LDR      r1,|L7.328|
0000d8  6388              STR      r0,[r1,#0x38]         ;1121
0000da  2006              MOVS     r0,#6                 ;1122
0000dc  e7a3              B        |L7.38|
                  |L7.222|
0000de  481a              LDR      r0,|L7.328|
0000e0  6b40              LDR      r0,[r0,#0x34]         ;1124
0000e2  f4107f00          TST      r0,#0x200             ;1124
0000e6  d007              BEQ      |L7.248|
0000e8  4817              LDR      r0,|L7.328|
0000ea  6b80              LDR      r0,[r0,#0x38]         ;1126
0000ec  f4407000          ORR      r0,r0,#0x200          ;1126
0000f0  4915              LDR      r1,|L7.328|
0000f2  6388              STR      r0,[r1,#0x38]         ;1126
0000f4  2007              MOVS     r0,#7                 ;1127
0000f6  e796              B        |L7.38|
                  |L7.248|
0000f8  f24050ff          MOV      r0,#0x5ff             ;1129
0000fc  4912              LDR      r1,|L7.328|
0000fe  6388              STR      r0,[r1,#0x38]         ;1129
000100  9800              LDR      r0,[sp,#0]            ;1131
000102  0600              LSLS     r0,r0,#24             ;1131
000104  9900              LDR      r1,[sp,#0]            ;1131
000106  f401417f          AND      r1,r1,#0xff00         ;1131
00010a  ea402001          ORR      r0,r0,r1,LSL #8       ;1131
00010e  9900              LDR      r1,[sp,#0]            ;1131
000110  f401017f          AND      r1,r1,#0xff0000       ;1131
000114  ea402011          ORR      r0,r0,r1,LSR #8       ;1131
000118  9900              LDR      r1,[sp,#0]            ;1131
00011a  ea406011          ORR      r0,r0,r1,LSR #24      ;1131
00011e  6068              STR      r0,[r5,#4]            ;1131
000120  9801              LDR      r0,[sp,#4]            ;1132
000122  0600              LSLS     r0,r0,#24             ;1132
000124  9901              LDR      r1,[sp,#4]            ;1132
000126  f401417f          AND      r1,r1,#0xff00         ;1132
00012a  ea402001          ORR      r0,r0,r1,LSL #8       ;1132
00012e  9901              LDR      r1,[sp,#4]            ;1132
000130  f401017f          AND      r1,r1,#0xff0000       ;1132
000134  ea402011          ORR      r0,r0,r1,LSR #8       ;1132
000138  9901              LDR      r1,[sp,#4]            ;1132
00013a  ea406011          ORR      r0,r0,r1,LSR #24      ;1132
00013e  6028              STR      r0,[r5,#0]            ;1132
000140  4620              MOV      r0,r4                 ;1133
000142  e770              B        |L7.38|
;;;1135   //得到NumberOfBytes以2为底的指数.
                          ENDP

                  |L7.324|
                          DCD      0x000fffff
                  |L7.328|
                          DCD      0x40018000
                  |L7.332|
                          DCD      0x40018080

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;1058   //返回值:错误代码
;;;1059   SD_Error IsCardProgramming(u8 *pstatus)
000000  b51c              PUSH     {r2-r4,lr}
;;;1060   {
000002  4604              MOV      r4,r0
;;;1061    	vu32 respR1 = 0, status = 0; 
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
000008  9000              STR      r0,[sp,#0]
;;;1062     	SDIO_Send_Cmd(SD_CMD_SEND_STATUS,1,(u32)RCA<<16);		//发送CMD13 	   
00000a  481e              LDR      r0,|L8.132|
00000c  8800              LDRH     r0,[r0,#0]  ; RCA
00000e  0402              LSLS     r2,r0,#16
000010  2101              MOVS     r1,#1
000012  200d              MOVS     r0,#0xd
000014  f7fffffe          BL       SDIO_Send_Cmd
;;;1063     	status=SDIO->STA;
000018  481b              LDR      r0,|L8.136|
00001a  6b40              LDR      r0,[r0,#0x34]
00001c  9000              STR      r0,[sp,#0]
;;;1064   	while(!(status&((1<<0)|(1<<6)|(1<<2))))status=SDIO->STA;//等待操作完成
00001e  e002              B        |L8.38|
                  |L8.32|
000020  4819              LDR      r0,|L8.136|
000022  6b40              LDR      r0,[r0,#0x34]
000024  9000              STR      r0,[sp,#0]
                  |L8.38|
000026  9800              LDR      r0,[sp,#0]
000028  f0100f45          TST      r0,#0x45
00002c  d0f8              BEQ      |L8.32|
;;;1065      	if(status&(1<<0))			//CRC检测失败
00002e  9800              LDR      r0,[sp,#0]
000030  f0100f01          TST      r0,#1
000034  d007              BEQ      |L8.70|
;;;1066   	{
;;;1067   		SDIO->ICR|=1<<0;		//清除错误标记
000036  4814              LDR      r0,|L8.136|
000038  6b80              LDR      r0,[r0,#0x38]
00003a  f0400001          ORR      r0,r0,#1
00003e  4912              LDR      r1,|L8.136|
000040  6388              STR      r0,[r1,#0x38]
;;;1068   		return SD_CMD_CRC_FAIL;
000042  2001              MOVS     r0,#1
                  |L8.68|
;;;1069   	}
;;;1070      	if(status&(1<<2))			//命令超时 
;;;1071   	{
;;;1072   		SDIO->ICR|=1<<2;		//清除错误标记
;;;1073   		return SD_CMD_RSP_TIMEOUT;
;;;1074   	}
;;;1075    	if(SDIO->RESPCMD!=SD_CMD_SEND_STATUS)return SD_ILLEGAL_CMD;
;;;1076   	SDIO->ICR=0X5FF;	 		//清除所有标记
;;;1077   	respR1=SDIO->RESP1;
;;;1078   	*pstatus=(u8)((respR1>>9)&0x0000000F);
;;;1079   	return SD_OK;
;;;1080   }
000044  bd1c              POP      {r2-r4,pc}
                  |L8.70|
000046  9800              LDR      r0,[sp,#0]            ;1070
000048  f0100f04          TST      r0,#4                 ;1070
00004c  d007              BEQ      |L8.94|
00004e  480e              LDR      r0,|L8.136|
000050  6b80              LDR      r0,[r0,#0x38]         ;1072
000052  f0400004          ORR      r0,r0,#4              ;1072
000056  490c              LDR      r1,|L8.136|
000058  6388              STR      r0,[r1,#0x38]         ;1072
00005a  2003              MOVS     r0,#3                 ;1073
00005c  e7f2              B        |L8.68|
                  |L8.94|
00005e  480a              LDR      r0,|L8.136|
000060  6900              LDR      r0,[r0,#0x10]         ;1075
000062  280d              CMP      r0,#0xd               ;1075
000064  d001              BEQ      |L8.106|
000066  2010              MOVS     r0,#0x10              ;1075
000068  e7ec              B        |L8.68|
                  |L8.106|
00006a  f24050ff          MOV      r0,#0x5ff             ;1076
00006e  4906              LDR      r1,|L8.136|
000070  6388              STR      r0,[r1,#0x38]         ;1076
000072  4608              MOV      r0,r1                 ;1077
000074  6940              LDR      r0,[r0,#0x14]         ;1077
000076  9001              STR      r0,[sp,#4]            ;1077
000078  9801              LDR      r0,[sp,#4]            ;1078
00007a  f3c02043          UBFX     r0,r0,#9,#4           ;1078
00007e  7020              STRB     r0,[r4,#0]            ;1078
000080  2000              MOVS     r0,#0                 ;1079
000082  e7df              B        |L8.68|
;;;1081   //查找SD卡的SCR寄存器值
                          ENDP

                  |L8.132|
                          DCD      ||RCA||
                  |L8.136|
                          DCD      0x40018000

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;1035   //返回值:错误状态
;;;1036   SD_Error SDEnWideBus(u8 enx)
000000  b57c              PUSH     {r2-r6,lr}
;;;1037   {
000002  4605              MOV      r5,r0
;;;1038   	SD_Error errorstatus = SD_OK;
000004  2400              MOVS     r4,#0
;;;1039    	u32 scr[2]={0,0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;1040   	u8 arg=0X00;
00000c  2600              MOVS     r6,#0
;;;1041   	if(enx)arg=0X02;
00000e  b10d              CBZ      r5,|L9.20|
000010  2602              MOVS     r6,#2
000012  e000              B        |L9.22|
                  |L9.20|
;;;1042   	else arg=0X00;
000014  2600              MOVS     r6,#0
                  |L9.22|
;;;1043    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//SD卡处于LOCKED状态		    
000016  4818              LDR      r0,|L9.120|
000018  6940              LDR      r0,[r0,#0x14]
00001a  f0107f00          TST      r0,#0x2000000
00001e  d001              BEQ      |L9.36|
000020  200e              MOVS     r0,#0xe
                  |L9.34|
;;;1044    	errorstatus=FindSCR(RCA,scr);						//得到SCR寄存器数据
;;;1045    	if(errorstatus!=SD_OK)return errorstatus;
;;;1046   	if((scr[1]&SD_WIDE_BUS_SUPPORT)!=SD_ALLZERO)		//支持宽总线
;;;1047   	{
;;;1048   	 	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,(u32)RCA<<16);	//发送CMD55+RCA,短响应											  
;;;1049   	 	errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1050   	 	if(errorstatus!=SD_OK)return errorstatus; 
;;;1051   	 	SDIO_Send_Cmd(SD_CMD_APP_SD_SET_BUSWIDTH,1,arg);//发送ACMD6,短响应,参数:10,4位;00,1位.											  
;;;1052   		errorstatus=CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;1053   		return errorstatus;
;;;1054   	}else return SD_REQUEST_NOT_APPLICABLE;				//不支持宽总线设置 	 
;;;1055   }												   
000022  bd7c              POP      {r2-r6,pc}
                  |L9.36|
000024  4915              LDR      r1,|L9.124|
000026  8809              LDRH     r1,[r1,#0]            ;1044  ; RCA
000028  b288              UXTH     r0,r1                 ;1044
00002a  4669              MOV      r1,sp                 ;1044
00002c  f7fffffe          BL       FindSCR
000030  4604              MOV      r4,r0                 ;1044
000032  b10c              CBZ      r4,|L9.56|
000034  4620              MOV      r0,r4                 ;1045
000036  e7f4              B        |L9.34|
                  |L9.56|
000038  9801              LDR      r0,[sp,#4]            ;1046
00003a  f4102f80          TST      r0,#0x40000           ;1046
00003e  d018              BEQ      |L9.114|
000040  480e              LDR      r0,|L9.124|
000042  8800              LDRH     r0,[r0,#0]            ;1048  ; RCA
000044  0402              LSLS     r2,r0,#16             ;1048
000046  2101              MOVS     r1,#1                 ;1048
000048  2037              MOVS     r0,#0x37              ;1048
00004a  f7fffffe          BL       SDIO_Send_Cmd
00004e  2037              MOVS     r0,#0x37              ;1049
000050  f7fffffe          BL       CmdResp1Error
000054  4604              MOV      r4,r0                 ;1049
000056  b10c              CBZ      r4,|L9.92|
000058  4620              MOV      r0,r4                 ;1050
00005a  e7e2              B        |L9.34|
                  |L9.92|
00005c  4632              MOV      r2,r6                 ;1051
00005e  2101              MOVS     r1,#1                 ;1051
000060  2006              MOVS     r0,#6                 ;1051
000062  f7fffffe          BL       SDIO_Send_Cmd
000066  2006              MOVS     r0,#6                 ;1052
000068  f7fffffe          BL       CmdResp1Error
00006c  4604              MOV      r4,r0                 ;1052
00006e  4620              MOV      r0,r4                 ;1053
000070  e7d7              B        |L9.34|
                  |L9.114|
000072  2025              MOVS     r0,#0x25              ;1054
000074  e7d5              B        |L9.34|
;;;1056   //检查卡是否正在执行写操作
                          ENDP

000076  0000              DCW      0x0000
                  |L9.120|
                          DCD      0x40018000
                  |L9.124|
                          DCD      ||RCA||

                          AREA ||i.SDIO_Clock_Set||, CODE, READONLY, ALIGN=2

                  SDIO_Clock_Set PROC
;;;70     //CK时钟=SDIOCLK/[clkdiv+2];(SDIOCLK时钟直接就是AHB时钟,一般为72Mhz)
;;;71     void SDIO_Clock_Set(u8 clkdiv)
000000  4905              LDR      r1,|L10.24|
;;;72     {
;;;73       	SDIO->CLKCR&=0XFFFFFF00;
000002  6849              LDR      r1,[r1,#4]
000004  f02101ff          BIC      r1,r1,#0xff
000008  4a03              LDR      r2,|L10.24|
00000a  6051              STR      r1,[r2,#4]
;;;74      	SDIO->CLKCR|=clkdiv; 
00000c  4611              MOV      r1,r2
00000e  6849              LDR      r1,[r1,#4]
000010  4301              ORRS     r1,r1,r0
000012  6051              STR      r1,[r2,#4]
;;;75     } 
000014  4770              BX       lr
;;;76     //SDIO发送命令函数
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40018000

                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;824    //SDIO中断服务函数		  
;;;825    void SDIO_IRQHandler(void) 
000000  b500              PUSH     {lr}
;;;826    {											
;;;827     	SD_ProcessIRQSrc();//处理所有SDIO相关中断
000002  f7fffffe          BL       SD_ProcessIRQSrc
;;;828    }	 																    
000006  bd00              POP      {pc}
;;;829    //SDIO中断处理函数
                          ENDP


                          AREA ||i.SDIO_Send_Cmd||, CODE, READONLY, ALIGN=2

                  SDIO_Send_Cmd PROC
;;;79     //arg:参数
;;;80     void SDIO_Send_Cmd(u8 cmdindex,u8 waitrsp,u32 arg)
000000  b510              PUSH     {r4,lr}
;;;81     {						    
;;;82     	SDIO->ARG=arg;
000002  4b0e              LDR      r3,|L12.60|
000004  609a              STR      r2,[r3,#8]
;;;83     	SDIO->CMD&=0XFFFFF800;		//清除index和waitrsp
000006  68db              LDR      r3,[r3,#0xc]
000008  f36f030a          BFC      r3,#0,#11
00000c  4c0b              LDR      r4,|L12.60|
00000e  60e3              STR      r3,[r4,#0xc]
;;;84     	SDIO->CMD|=cmdindex&0X3F;	//设置新的index			 
000010  4623              MOV      r3,r4
000012  68db              LDR      r3,[r3,#0xc]
000014  f000043f          AND      r4,r0,#0x3f
000018  4323              ORRS     r3,r3,r4
00001a  4c08              LDR      r4,|L12.60|
00001c  60e3              STR      r3,[r4,#0xc]
;;;85     	SDIO->CMD|=waitrsp<<6;		//设置新的wait rsp 
00001e  4623              MOV      r3,r4
000020  68db              LDR      r3,[r3,#0xc]
000022  ea431381          ORR      r3,r3,r1,LSL #6
000026  60e3              STR      r3,[r4,#0xc]
;;;86     	SDIO->CMD|=0<<8;		//无等待
000028  4623              MOV      r3,r4
00002a  68db              LDR      r3,[r3,#0xc]
00002c  60e3              STR      r3,[r4,#0xc]
;;;87       	SDIO->CMD|=1<<10;		//命令通道状态机使能
00002e  4623              MOV      r3,r4
000030  68db              LDR      r3,[r3,#0xc]
000032  f4436380          ORR      r3,r3,#0x400
000036  60e3              STR      r3,[r4,#0xc]
;;;88     }
000038  bd10              POP      {r4,pc}
;;;89     //SDIO发送数据配置函数
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      0x40018000

                          AREA ||i.SDIO_Send_Data_Cfg||, CODE, READONLY, ALIGN=2

                  SDIO_Send_Data_Cfg PROC
;;;93     //dir:数据传输方向:0,控制器到卡;1,卡到控制器;
;;;94     void SDIO_Send_Data_Cfg(u32 datatimeout,u32 datalen,u8 blksize,u8 dir)
000000  b530              PUSH     {r4,r5,lr}
;;;95     {
;;;96     	SDIO->DTIMER=datatimeout;
000002  4c10              LDR      r4,|L13.68|
000004  6260              STR      r0,[r4,#0x24]
;;;97       	SDIO->DLEN=datalen&0X1FFFFFF;	//低25位有效
000006  f021447e          BIC      r4,r1,#0xfe000000
00000a  4d0e              LDR      r5,|L13.68|
00000c  62ac              STR      r4,[r5,#0x28]
;;;98     	SDIO->DCTRL&=0xFFFFFF08;		//清除之前的设置.
00000e  462c              MOV      r4,r5
000010  6ae4              LDR      r4,[r4,#0x2c]
000012  f02404f7          BIC      r4,r4,#0xf7
000016  62ec              STR      r4,[r5,#0x2c]
;;;99     	SDIO->DCTRL|=blksize<<4;		//设置块大小
000018  462c              MOV      r4,r5
00001a  6ae4              LDR      r4,[r4,#0x2c]
00001c  ea441402          ORR      r4,r4,r2,LSL #4
000020  62ec              STR      r4,[r5,#0x2c]
;;;100    	SDIO->DCTRL|=0<<2;				//块数据传输
000022  462c              MOV      r4,r5
000024  6ae4              LDR      r4,[r4,#0x2c]
000026  62ec              STR      r4,[r5,#0x2c]
;;;101    	SDIO->DCTRL|=(dir&0X01)<<1;		//方向控制
000028  462c              MOV      r4,r5
00002a  6ae4              LDR      r4,[r4,#0x2c]
00002c  f0030501          AND      r5,r3,#1
000030  ea440445          ORR      r4,r4,r5,LSL #1
000034  4d03              LDR      r5,|L13.68|
000036  62ec              STR      r4,[r5,#0x2c]
;;;102    	SDIO->DCTRL|=1<<0;				//数据传输使能,DPSM状态机
000038  462c              MOV      r4,r5
00003a  6ae4              LDR      r4,[r4,#0x2c]
00003c  f0440401          ORR      r4,r4,#1
000040  62ec              STR      r4,[r5,#0x2c]
;;;103    }  
000042  bd30              POP      {r4,r5,pc}
;;;104    
                          ENDP

                  |L13.68|
                          DCD      0x40018000

                          AREA ||i.SD_DMA_Config||, CODE, READONLY, ALIGN=2

                  SD_DMA_Config PROC
;;;1151   //dir:方向;1,存储器-->SDIO(写数据);0,SDIO-->存储器(读数据);
;;;1152   void SD_DMA_Config(u32*mbuf,u32 bufsize,u8 dir)
000000  b510              PUSH     {r4,lr}
;;;1153   {				  
;;;1154    	DMA2->IFCR|=(0XF<<12);				//清除DMA2通道4的各种标记
000002  4b23              LDR      r3,|L14.144|
000004  681b              LDR      r3,[r3,#0]
000006  f4434370          ORR      r3,r3,#0xf000
00000a  4c21              LDR      r4,|L14.144|
00000c  6023              STR      r3,[r4,#0]
;;;1155    	DMA2_Channel4->CCR&=~(1<<0);		//关闭DMA 通道4
00000e  4b20              LDR      r3,|L14.144|
000010  3340              ADDS     r3,r3,#0x40
000012  681b              LDR      r3,[r3,#0]
000014  f0230301          BIC      r3,r3,#1
000018  4c1d              LDR      r4,|L14.144|
00001a  3440              ADDS     r4,r4,#0x40
00001c  6023              STR      r3,[r4,#0]
;;;1156     	DMA2_Channel4->CCR&=~(0X7FF<<4);	//清除之前的设置,DIR,CIRC,PINC,MINC,PSIZE,MSIZE,PL,MEM2MEM
00001e  4623              MOV      r3,r4
000020  681b              LDR      r3,[r3,#0]
000022  f64774f0          MOV      r4,#0x7ff0
000026  43a3              BICS     r3,r3,r4
000028  4c19              LDR      r4,|L14.144|
00002a  3440              ADDS     r4,r4,#0x40
00002c  6023              STR      r3,[r4,#0]
;;;1157    	DMA2_Channel4->CCR|=dir<<4;  		//从存储器读   
00002e  4623              MOV      r3,r4
000030  681b              LDR      r3,[r3,#0]
000032  ea431302          ORR      r3,r3,r2,LSL #4
000036  6023              STR      r3,[r4,#0]
;;;1158   	DMA2_Channel4->CCR|=0<<5;  			//普通模式
000038  4623              MOV      r3,r4
00003a  681b              LDR      r3,[r3,#0]
00003c  6023              STR      r3,[r4,#0]
;;;1159   	DMA2_Channel4->CCR|=0<<6; 			//外设地址非增量模式
00003e  4623              MOV      r3,r4
000040  681b              LDR      r3,[r3,#0]
000042  6023              STR      r3,[r4,#0]
;;;1160   	DMA2_Channel4->CCR|=1<<7;  			//存储器增量模式
000044  4623              MOV      r3,r4
000046  681b              LDR      r3,[r3,#0]
000048  f0430380          ORR      r3,r3,#0x80
00004c  6023              STR      r3,[r4,#0]
;;;1161   	DMA2_Channel4->CCR|=2<<8;  			//外设数据宽度为32位
00004e  4623              MOV      r3,r4
000050  681b              LDR      r3,[r3,#0]
000052  f4437300          ORR      r3,r3,#0x200
000056  6023              STR      r3,[r4,#0]
;;;1162   	DMA2_Channel4->CCR|=2<<10; 			//存储器数据宽度32位
000058  4623              MOV      r3,r4
00005a  681b              LDR      r3,[r3,#0]
00005c  f4436300          ORR      r3,r3,#0x800
000060  6023              STR      r3,[r4,#0]
;;;1163   	DMA2_Channel4->CCR|=2<<12; 			//高优先级	  
000062  4623              MOV      r3,r4
000064  681b              LDR      r3,[r3,#0]
000066  f4435300          ORR      r3,r3,#0x2000
00006a  6023              STR      r3,[r4,#0]
;;;1164     	DMA2_Channel4->CNDTR=bufsize/4;   	//DMA2,传输数据量	  
00006c  088b              LSRS     r3,r1,#2
00006e  1d24              ADDS     r4,r4,#4
000070  6023              STR      r3,[r4,#0]
;;;1165    	DMA2_Channel4->CPAR=(u32)&SDIO->FIFO;//DMA2 外设地址 
000072  4b08              LDR      r3,|L14.148|
000074  1d24              ADDS     r4,r4,#4
000076  6023              STR      r3,[r4,#0]
;;;1166   	DMA2_Channel4->CMAR=(u32)mbuf; 		//DMA2,存储器地址
000078  1d23              ADDS     r3,r4,#4
00007a  6018              STR      r0,[r3,#0]
;;;1167    	DMA2_Channel4->CCR|=1<<0; 			//开启DMA通道		
00007c  4b04              LDR      r3,|L14.144|
00007e  3340              ADDS     r3,r3,#0x40
000080  681b              LDR      r3,[r3,#0]
000082  f0430301          ORR      r3,r3,#1
000086  4c02              LDR      r4,|L14.144|
000088  3440              ADDS     r4,r4,#0x40
00008a  6023              STR      r3,[r4,#0]
;;;1168   }   
00008c  bd10              POP      {r4,pc}
;;;1169   //读SD卡
                          ENDP

00008e  0000              DCW      0x0000
                  |L14.144|
                          DCD      0x40020404
                  |L14.148|
                          DCD      0x40018080

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;361    //返回值:SD卡错误状态
;;;362    SD_Error SD_EnableWideBusOperation(u32 wmode)
000000  b530              PUSH     {r4,r5,lr}
;;;363    {
000002  4604              MOV      r4,r0
;;;364      	SD_Error errorstatus=SD_OK;
000004  2500              MOVS     r5,#0
;;;365     	if(SDIO_MULTIMEDIA_CARD==CardType)return SD_UNSUPPORTED_FEATURE;//MMC卡不支持
000006  4816              LDR      r0,|L15.96|
000008  7800              LDRB     r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d101              BNE      |L15.18|
00000e  2027              MOVS     r0,#0x27
                  |L15.16|
;;;366     	else if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;367    	{
;;;368    		if(wmode>=2)return SD_UNSUPPORTED_FEATURE;//不支持8位模式
;;;369     		else   
;;;370    		{
;;;371    			errorstatus=SDEnWideBus(wmode);
;;;372     			if(SD_OK==errorstatus)
;;;373    			{
;;;374    				SDIO->CLKCR&=~(3<<11);		//清除之前的位宽设置    
;;;375    				SDIO->CLKCR|=(u16)wmode<<11;//1位/4位总线宽度 
;;;376    				SDIO->CLKCR|=0<<14;			//不开启硬件流控制
;;;377    			}
;;;378    		}  
;;;379    	}
;;;380    	return errorstatus; 
;;;381    }
000010  bd30              POP      {r4,r5,pc}
                  |L15.18|
000012  4813              LDR      r0,|L15.96|
000014  7800              LDRB     r0,[r0,#0]            ;366  ; CardType
000016  b138              CBZ      r0,|L15.40|
000018  4811              LDR      r0,|L15.96|
00001a  7800              LDRB     r0,[r0,#0]            ;366  ; CardType
00001c  2801              CMP      r0,#1                 ;366
00001e  d003              BEQ      |L15.40|
000020  480f              LDR      r0,|L15.96|
000022  7800              LDRB     r0,[r0,#0]            ;366  ; CardType
000024  2802              CMP      r0,#2                 ;366
000026  d118              BNE      |L15.90|
                  |L15.40|
000028  2c02              CMP      r4,#2                 ;368
00002a  d301              BCC      |L15.48|
00002c  2027              MOVS     r0,#0x27              ;368
00002e  e7ef              B        |L15.16|
                  |L15.48|
000030  b2e0              UXTB     r0,r4                 ;371
000032  f7fffffe          BL       SDEnWideBus
000036  4605              MOV      r5,r0                 ;371
000038  b97d              CBNZ     r5,|L15.90|
00003a  480a              LDR      r0,|L15.100|
00003c  6840              LDR      r0,[r0,#4]            ;374
00003e  f42050c0          BIC      r0,r0,#0x1800         ;374
000042  4908              LDR      r1,|L15.100|
000044  6048              STR      r0,[r1,#4]            ;374
000046  4608              MOV      r0,r1                 ;375
000048  6840              LDR      r0,[r0,#4]            ;375
00004a  b2a1              UXTH     r1,r4                 ;375
00004c  ea4020c1          ORR      r0,r0,r1,LSL #11      ;375
000050  4904              LDR      r1,|L15.100|
000052  6048              STR      r0,[r1,#4]            ;375
000054  4608              MOV      r0,r1                 ;376
000056  6840              LDR      r0,[r0,#4]            ;376
000058  6048              STR      r0,[r1,#4]            ;376
                  |L15.90|
00005a  4628              MOV      r0,r5                 ;380
00005c  e7d8              B        |L15.16|
;;;382    //设置SD卡工作模式
                          ENDP

00005e  0000              DCW      0x0000
                  |L15.96|
                          DCD      CardType
                  |L15.100|
                          DCD      0x40018000

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;239    //返回值:错误状态
;;;240    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b5f0              PUSH     {r4-r7,lr}
;;;241    {
000002  4601              MOV      r1,r0
;;;242     	SD_Error errorstatus=SD_OK;
000004  2000              MOVS     r0,#0
;;;243    	u8 tmp=0;	   
000006  2200              MOVS     r2,#0
;;;244    	cardinfo->CardType=(u8)CardType; 			//卡类型
000008  4bc9              LDR      r3,|L16.816|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f8813056          STRB     r3,[r1,#0x56]
;;;245    	cardinfo->RCA=(u16)RCA;					//卡RCA值
000010  4bc8              LDR      r3,|L16.820|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a13054          STRH     r3,[r1,#0x54]
;;;246    	tmp=(u8)((CSD_Tab[0]&0xFF000000)>>24);
000018  4bc7              LDR      r3,|L16.824|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;247    	cardinfo->SD_csd.CSDStruct=(tmp&0xC0)>>6;		//CSD结构
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;248    	cardinfo->SD_csd.SysSpecVersion=(tmp&0x3C)>>2;		//2.0协议还没定义这部分(为保留),应该是后续协议定义的
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;249    	cardinfo->SD_csd.Reserved1=tmp&0x03;			//2个保留位  
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;250    	tmp=(u8)((CSD_Tab[0]&0x00FF0000)>>16);			//第1个字节
00002e  4bc2              LDR      r3,|L16.824|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;251    	cardinfo->SD_csd.TAAC=tmp;				//数据读时间1
000036  70ca              STRB     r2,[r1,#3]
;;;252    	tmp=(u8)((CSD_Tab[0]&0x0000FF00)>>8);	  		//第2个字节
000038  4bbf              LDR      r3,|L16.824|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;253    	cardinfo->SD_csd.NSAC=tmp;		  		//数据读时间2
000040  710a              STRB     r2,[r1,#4]
;;;254    	tmp=(u8)(CSD_Tab[0]&0x000000FF);			//第3个字节
000042  4bbd              LDR      r3,|L16.824|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;255    	cardinfo->SD_csd.MaxBusClkFrec=tmp;		  	//传输速度	   
000046  714a              STRB     r2,[r1,#5]
;;;256    	tmp=(u8)((CSD_Tab[1]&0xFF000000)>>24);			//第4个字节
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;257    	cardinfo->SD_csd.CardComdClasses=tmp<<4;    		//卡指令类高四位
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;258    	tmp=(u8)((CSD_Tab[1]&0x00FF0000)>>16);	 		//第5个字节
000050  4bb9              LDR      r3,|L16.824|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;259    	cardinfo->SD_csd.CardComdClasses|=(tmp&0xF0)>>4;	//卡指令类低四位
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;260    	cardinfo->SD_csd.RdBlockLen=tmp&0x0F;	    		//最大读取数据长度
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;261    	tmp=(u8)((CSD_Tab[1]&0x0000FF00)>>8);			//第6个字节
000066  4bb4              LDR      r3,|L16.824|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;262    	cardinfo->SD_csd.PartBlockRead=(tmp&0x80)>>7;		//允许分块读
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;263    	cardinfo->SD_csd.WrBlockMisalign=(tmp&0x40)>>6;		//写块错位
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;264    	cardinfo->SD_csd.RdBlockMisalign=(tmp&0x20)>>5;		//读块错位
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;265    	cardinfo->SD_csd.DSRImpl=(tmp&0x10)>>4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;266    	cardinfo->SD_csd.Reserved2=0; 				//保留
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;267     	if((CardType==SDIO_STD_CAPACITY_SD_CARD_V1_1)||(CardType==SDIO_STD_CAPACITY_SD_CARD_V2_0)||(SDIO_MULTIMEDIA_CARD==CardType))//标准1.1/2.0卡/MMC卡
000088  4ba9              LDR      r3,|L16.816|
00008a  781b              LDRB     r3,[r3,#0]  ; CardType
00008c  b13b              CBZ      r3,|L16.158|
00008e  4ba8              LDR      r3,|L16.816|
000090  781b              LDRB     r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d003              BEQ      |L16.158|
000096  4ba6              LDR      r3,|L16.816|
000098  781b              LDRB     r3,[r3,#0]  ; CardType
00009a  2b03              CMP      r3,#3
00009c  d14f              BNE      |L16.318|
                  |L16.158|
;;;268    	{
;;;269    		cardinfo->SD_csd.DeviceSize=(tmp&0x03)<<10;	//C_SIZE(12位)
00009e  0793              LSLS     r3,r2,#30
0000a0  0d1b              LSRS     r3,r3,#20
0000a2  610b              STR      r3,[r1,#0x10]
;;;270    	 	tmp=(u8)(CSD_Tab[1]&0x000000FF); 		//第7个字节	
0000a4  4ba4              LDR      r3,|L16.824|
0000a6  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;271    		cardinfo->SD_csd.DeviceSize|=(tmp)<<2;
0000a8  690b              LDR      r3,[r1,#0x10]
0000aa  ea430382          ORR      r3,r3,r2,LSL #2
0000ae  610b              STR      r3,[r1,#0x10]
;;;272     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24);		//第8个字节	
0000b0  4ba1              LDR      r3,|L16.824|
0000b2  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000b4  0e1a              LSRS     r2,r3,#24
;;;273    		cardinfo->SD_csd.DeviceSize|=(tmp&0xC0)>>6;
0000b6  690b              LDR      r3,[r1,#0x10]
0000b8  ea431392          ORR      r3,r3,r2,LSR #6
0000bc  610b              STR      r3,[r1,#0x10]
;;;274     		cardinfo->SD_csd.MaxRdCurrentVDDMin=(tmp&0x38)>>3;
0000be  f3c203c2          UBFX     r3,r2,#3,#3
0000c2  750b              STRB     r3,[r1,#0x14]
;;;275    		cardinfo->SD_csd.MaxRdCurrentVDDMax=(tmp&0x07);
0000c4  f0020307          AND      r3,r2,#7
0000c8  754b              STRB     r3,[r1,#0x15]
;;;276     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);		//第9个字节	
0000ca  4b9b              LDR      r3,|L16.824|
0000cc  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ce  f3c34207          UBFX     r2,r3,#16,#8
;;;277    		cardinfo->SD_csd.MaxWrCurrentVDDMin=(tmp&0xE0)>>5;
0000d2  0953              LSRS     r3,r2,#5
0000d4  758b              STRB     r3,[r1,#0x16]
;;;278    		cardinfo->SD_csd.MaxWrCurrentVDDMax=(tmp&0x1C)>>2;
0000d6  f3c20382          UBFX     r3,r2,#2,#3
0000da  75cb              STRB     r3,[r1,#0x17]
;;;279    		cardinfo->SD_csd.DeviceSizeMul=(tmp&0x03)<<1;//C_SIZE_MULT
0000dc  0793              LSLS     r3,r2,#30
0000de  0f5b              LSRS     r3,r3,#29
0000e0  760b              STRB     r3,[r1,#0x18]
;;;280     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8);	  	//第10个字节	
0000e2  4b95              LDR      r3,|L16.824|
0000e4  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000e6  f3c32207          UBFX     r2,r3,#8,#8
;;;281    		cardinfo->SD_csd.DeviceSizeMul|=(tmp&0x80)>>7;
0000ea  7e0b              LDRB     r3,[r1,#0x18]
0000ec  ea4313d2          ORR      r3,r3,r2,LSR #7
0000f0  760b              STRB     r3,[r1,#0x18]
;;;282     		cardinfo->CardCapacity=(cardinfo->SD_csd.DeviceSize+1);//计算卡容量
0000f2  690b              LDR      r3,[r1,#0x10]
0000f4  1c5b              ADDS     r3,r3,#1
0000f6  2400              MOVS     r4,#0
0000f8  e9c13412          STRD     r3,r4,[r1,#0x48]
;;;283    		cardinfo->CardCapacity*=(1<<(cardinfo->SD_csd.DeviceSizeMul+2));
0000fc  7e0b              LDRB     r3,[r1,#0x18]
0000fe  1c9b              ADDS     r3,r3,#2
000100  2401              MOVS     r4,#1
000102  fa04f303          LSL      r3,r4,r3
000106  17dc              ASRS     r4,r3,#31
000108  e9d15612          LDRD     r5,r6,[r1,#0x48]
00010c  fba57c03          UMULL    r7,r12,r5,r3
000110  fb06c303          MLA      r3,r6,r3,r12
000114  fb053304          MLA      r3,r5,r4,r3
000118  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;284    		cardinfo->CardBlockSize=1<<(cardinfo->SD_csd.RdBlockLen);//块大小
00011c  7a0c              LDRB     r4,[r1,#8]
00011e  2301              MOVS     r3,#1
000120  40a3              LSLS     r3,r3,r4
000122  650b              STR      r3,[r1,#0x50]
;;;285    		cardinfo->CardCapacity*=cardinfo->CardBlockSize;
000124  2400              MOVS     r4,#0
000126  e9d16512          LDRD     r6,r5,[r1,#0x48]
00012a  6d0b              LDR      r3,[r1,#0x50]
00012c  fba67c03          UMULL    r7,r12,r6,r3
000130  fb05c303          MLA      r3,r5,r3,r12
000134  fb063304          MLA      r3,r6,r4,r3
000138  e9c17312          STRD     r7,r3,[r1,#0x48]
00013c  e02e              B        |L16.412|
                  |L16.318|
;;;286    	}else if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//高容量卡
00013e  4b7c              LDR      r3,|L16.816|
000140  781b              LDRB     r3,[r3,#0]  ; CardType
000142  2b02              CMP      r3,#2
000144  d12a              BNE      |L16.412|
;;;287    	{
;;;288     		tmp=(u8)(CSD_Tab[1]&0x000000FF); 		//第7个字节	
000146  4b7c              LDR      r3,|L16.824|
000148  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;289    		cardinfo->SD_csd.DeviceSize=(tmp&0x3F)<<16;//C_SIZE
00014a  0693              LSLS     r3,r2,#26
00014c  0a9b              LSRS     r3,r3,#10
00014e  610b              STR      r3,[r1,#0x10]
;;;290     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24); 	//第8个字节	
000150  4b79              LDR      r3,|L16.824|
000152  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000154  0e1a              LSRS     r2,r3,#24
;;;291     		cardinfo->SD_csd.DeviceSize|=(tmp<<8);
000156  690b              LDR      r3,[r1,#0x10]
000158  ea432302          ORR      r3,r3,r2,LSL #8
00015c  610b              STR      r3,[r1,#0x10]
;;;292     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);	//第9个字节	
00015e  4b76              LDR      r3,|L16.824|
000160  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000162  f3c34207          UBFX     r2,r3,#16,#8
;;;293     		cardinfo->SD_csd.DeviceSize|=(tmp);
000166  690b              LDR      r3,[r1,#0x10]
000168  4313              ORRS     r3,r3,r2
00016a  610b              STR      r3,[r1,#0x10]
;;;294     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8); 	//第10个字节	
00016c  4b72              LDR      r3,|L16.824|
00016e  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000170  f3c32207          UBFX     r2,r3,#8,#8
;;;295     		cardinfo->CardCapacity=(long long)(cardinfo->SD_csd.DeviceSize+1)*512*1024;//计算卡容量
000174  690b              LDR      r3,[r1,#0x10]
000176  1c5b              ADDS     r3,r3,#1
000178  f44f7400          MOV      r4,#0x200
00017c  fba34604          UMULL    r4,r6,r3,r4
000180  f44f6380          MOV      r3,#0x400
000184  2500              MOVS     r5,#0
000186  fba47c03          UMULL    r7,r12,r4,r3
00018a  fb06c303          MLA      r3,r6,r3,r12
00018e  fb043305          MLA      r3,r4,r5,r3
000192  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;296    		cardinfo->CardBlockSize=512; 			//块大小固定为512字节
000196  f44f7300          MOV      r3,#0x200
00019a  650b              STR      r3,[r1,#0x50]
                  |L16.412|
;;;297    	}	  
;;;298    	cardinfo->SD_csd.EraseGrSize=(tmp&0x40)>>6;
00019c  f3c21380          UBFX     r3,r2,#6,#1
0001a0  f8013f19          STRB     r3,[r1,#0x19]!
;;;299    	cardinfo->SD_csd.EraseGrMul=(tmp&0x3F)<<1;	   
0001a4  0693              LSLS     r3,r2,#26
0001a6  0e5b              LSRS     r3,r3,#25
0001a8  704b              STRB     r3,[r1,#1]
;;;300    	tmp=(u8)(CSD_Tab[2]&0x000000FF);			//第11个字节	
0001aa  4b63              LDR      r3,|L16.824|
0001ac  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;301    	cardinfo->SD_csd.EraseGrMul|=(tmp&0x80)>>7;
0001ae  784b              LDRB     r3,[r1,#1]
0001b0  ea4313d2          ORR      r3,r3,r2,LSR #7
0001b4  704b              STRB     r3,[r1,#1]
;;;302    	cardinfo->SD_csd.WrProtectGrSize=(tmp&0x7F);
0001b6  f002037f          AND      r3,r2,#0x7f
0001ba  708b              STRB     r3,[r1,#2]
;;;303     	tmp=(u8)((CSD_Tab[3]&0xFF000000)>>24);		//第12个字节	
0001bc  4b5e              LDR      r3,|L16.824|
0001be  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001c0  0e1a              LSRS     r2,r3,#24
;;;304    	cardinfo->SD_csd.WrProtectGrEnable=(tmp&0x80)>>7;
0001c2  09d3              LSRS     r3,r2,#7
0001c4  70cb              STRB     r3,[r1,#3]
;;;305    	cardinfo->SD_csd.ManDeflECC=(tmp&0x60)>>5;
0001c6  f3c21341          UBFX     r3,r2,#5,#2
0001ca  710b              STRB     r3,[r1,#4]
;;;306    	cardinfo->SD_csd.WrSpeedFact=(tmp&0x1C)>>2;
0001cc  f3c20382          UBFX     r3,r2,#2,#3
0001d0  714b              STRB     r3,[r1,#5]
;;;307    	cardinfo->SD_csd.MaxWrBlockLen=(tmp&0x03)<<2;	 
0001d2  0793              LSLS     r3,r2,#30
0001d4  0f1b              LSRS     r3,r3,#28
0001d6  718b              STRB     r3,[r1,#6]
;;;308    	tmp=(u8)((CSD_Tab[3]&0x00FF0000)>>16);		//第13个字节
0001d8  4b57              LDR      r3,|L16.824|
0001da  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001dc  f3c34207          UBFX     r2,r3,#16,#8
;;;309    	cardinfo->SD_csd.MaxWrBlockLen|=(tmp&0xC0)>>6;
0001e0  798b              LDRB     r3,[r1,#6]
0001e2  ea431392          ORR      r3,r3,r2,LSR #6
0001e6  718b              STRB     r3,[r1,#6]
;;;310    	cardinfo->SD_csd.WriteBlockPaPartial=(tmp&0x20)>>5;
0001e8  f3c21340          UBFX     r3,r2,#5,#1
0001ec  71cb              STRB     r3,[r1,#7]
;;;311    	cardinfo->SD_csd.Reserved3=0;
0001ee  2300              MOVS     r3,#0
0001f0  720b              STRB     r3,[r1,#8]
;;;312    	cardinfo->SD_csd.ContentProtectAppli=(tmp&0x01);  
0001f2  f0020301          AND      r3,r2,#1
0001f6  724b              STRB     r3,[r1,#9]
;;;313    	tmp=(u8)((CSD_Tab[3]&0x0000FF00)>>8);		//第14个字节
0001f8  4b4f              LDR      r3,|L16.824|
0001fa  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0001fc  f3c32207          UBFX     r2,r3,#8,#8
;;;314    	cardinfo->SD_csd.FileFormatGrouop=(tmp&0x80)>>7;
000200  09d3              LSRS     r3,r2,#7
000202  728b              STRB     r3,[r1,#0xa]
;;;315    	cardinfo->SD_csd.CopyFlag=(tmp&0x40)>>6;
000204  f3c21380          UBFX     r3,r2,#6,#1
000208  72cb              STRB     r3,[r1,#0xb]
;;;316    	cardinfo->SD_csd.PermWrProtect=(tmp&0x20)>>5;
00020a  f3c21340          UBFX     r3,r2,#5,#1
00020e  730b              STRB     r3,[r1,#0xc]
;;;317    	cardinfo->SD_csd.TempWrProtect=(tmp&0x10)>>4;
000210  f3c21300          UBFX     r3,r2,#4,#1
000214  734b              STRB     r3,[r1,#0xd]
;;;318    	cardinfo->SD_csd.FileFormat=(tmp&0x0C)>>2;
000216  f3c20381          UBFX     r3,r2,#2,#2
00021a  738b              STRB     r3,[r1,#0xe]
;;;319    	cardinfo->SD_csd.ECC=(tmp&0x03);  
00021c  f0020303          AND      r3,r2,#3
000220  73cb              STRB     r3,[r1,#0xf]
;;;320    	tmp=(u8)(CSD_Tab[3]&0x000000FF);			//第15个字节
000222  4b45              LDR      r3,|L16.824|
000224  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;321    	cardinfo->SD_csd.CSD_CRC=(tmp&0xFE)>>1;
000226  0853              LSRS     r3,r2,#1
000228  740b              STRB     r3,[r1,#0x10]
;;;322    	cardinfo->SD_csd.Reserved4=1;		 
00022a  2301              MOVS     r3,#1
00022c  744b              STRB     r3,[r1,#0x11]
;;;323    	tmp=(u8)((CID_Tab[0]&0xFF000000)>>24);		//第0个字节
00022e  4b43              LDR      r3,|L16.828|
000230  681b              LDR      r3,[r3,#0]  ; CID_Tab
000232  0e1a              LSRS     r2,r3,#24
;;;324    	cardinfo->SD_cid.ManufacturerID=tmp;		    
000234  74ca              STRB     r2,[r1,#0x13]
000236  f1a10119          SUB      r1,r1,#0x19
;;;325    	tmp=(u8)((CID_Tab[0]&0x00FF0000)>>16);		//第1个字节
00023a  4b40              LDR      r3,|L16.828|
00023c  681b              LDR      r3,[r3,#0]  ; CID_Tab
00023e  f3c34207          UBFX     r2,r3,#16,#8
;;;326    	cardinfo->SD_cid.OEM_AppliID=tmp<<8;	  
000242  ea4f2402          LSL      r4,r2,#8
000246  85cc              STRH     r4,[r1,#0x2e]
;;;327    	tmp=(u8)((CID_Tab[0]&0x000000FF00)>>8);		//第2个字节
000248  4b3c              LDR      r3,|L16.828|
00024a  881b              LDRH     r3,[r3,#0]  ; CID_Tab
00024c  f3c32207          UBFX     r2,r3,#8,#8
;;;328    	cardinfo->SD_cid.OEM_AppliID|=tmp;	    
000250  8dcb              LDRH     r3,[r1,#0x2e]
000252  ea430302          ORR      r3,r3,r2
000256  85cb              STRH     r3,[r1,#0x2e]
;;;329    	tmp=(u8)(CID_Tab[0]&0x000000FF);			//第3个字节	
000258  4b38              LDR      r3,|L16.828|
00025a  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;330    	cardinfo->SD_cid.ProdName1=tmp<<24;				  
00025c  ea4f6402          LSL      r4,r2,#24
000260  630c              STR      r4,[r1,#0x30]
;;;331    	tmp=(u8)((CID_Tab[1]&0xFF000000)>>24); 		//第4个字节
000262  685b              LDR      r3,[r3,#4]  ; CID_Tab
000264  ea4f6213          LSR      r2,r3,#24
;;;332    	cardinfo->SD_cid.ProdName1|=tmp<<16;	  
000268  6b0b              LDR      r3,[r1,#0x30]
00026a  ea434402          ORR      r4,r3,r2,LSL #16
00026e  630c              STR      r4,[r1,#0x30]
;;;333    	tmp=(u8)((CID_Tab[1]&0x00FF0000)>>16);	   	//第5个字节
000270  4b32              LDR      r3,|L16.828|
000272  685b              LDR      r3,[r3,#4]  ; CID_Tab
000274  f3c34207          UBFX     r2,r3,#16,#8
;;;334    	cardinfo->SD_cid.ProdName1|=tmp<<8;		 
000278  6b0b              LDR      r3,[r1,#0x30]
00027a  ea432402          ORR      r4,r3,r2,LSL #8
00027e  630c              STR      r4,[r1,#0x30]
;;;335    	tmp=(u8)((CID_Tab[1]&0x0000FF00)>>8);		//第6个字节
000280  4b2e              LDR      r3,|L16.828|
000282  889b              LDRH     r3,[r3,#4]  ; CID_Tab
000284  f3c32207          UBFX     r2,r3,#8,#8
;;;336    	cardinfo->SD_cid.ProdName1|=tmp;		   
000288  6b0b              LDR      r3,[r1,#0x30]
00028a  ea430302          ORR      r3,r3,r2
00028e  630b              STR      r3,[r1,#0x30]
;;;337    	tmp=(u8)(CID_Tab[1]&0x000000FF);	  		//第7个字节
000290  4b2a              LDR      r3,|L16.828|
000292  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;338    	cardinfo->SD_cid.ProdName2=tmp;			  
000294  f04f0334          MOV      r3,#0x34
000298  545a              STRB     r2,[r3,r1]
;;;339    	tmp=(u8)((CID_Tab[2]&0xFF000000)>>24); 		//第8个字节
00029a  4b28              LDR      r3,|L16.828|
00029c  689b              LDR      r3,[r3,#8]  ; CID_Tab
00029e  ea4f6213          LSR      r2,r3,#24
;;;340    	cardinfo->SD_cid.ProdRev=tmp;		 
0002a2  f04f0335          MOV      r3,#0x35
0002a6  545a              STRB     r2,[r3,r1]
;;;341    	tmp=(u8)((CID_Tab[2]&0x00FF0000)>>16);		//第9个字节
0002a8  4b24              LDR      r3,|L16.828|
0002aa  689b              LDR      r3,[r3,#8]  ; CID_Tab
0002ac  f3c34207          UBFX     r2,r3,#16,#8
;;;342    	cardinfo->SD_cid.ProdSN=tmp<<24;	   
0002b0  ea4f6402          LSL      r4,r2,#24
0002b4  638c              STR      r4,[r1,#0x38]
;;;343    	tmp=(u8)((CID_Tab[2]&0x0000FF00)>>8); 		//第10个字节
0002b6  4b21              LDR      r3,|L16.828|
0002b8  891b              LDRH     r3,[r3,#8]  ; CID_Tab
0002ba  f3c32207          UBFX     r2,r3,#8,#8
;;;344    	cardinfo->SD_cid.ProdSN|=tmp<<16;	   
0002be  6b8b              LDR      r3,[r1,#0x38]
0002c0  ea434402          ORR      r4,r3,r2,LSL #16
0002c4  638c              STR      r4,[r1,#0x38]
;;;345    	tmp=(u8)(CID_Tab[2]&0x000000FF);   			//第11个字节
0002c6  4b1d              LDR      r3,|L16.828|
0002c8  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;346    	cardinfo->SD_cid.ProdSN|=tmp<<8;		   
0002ca  6b8b              LDR      r3,[r1,#0x38]
0002cc  ea432402          ORR      r4,r3,r2,LSL #8
0002d0  638c              STR      r4,[r1,#0x38]
;;;347    	tmp=(u8)((CID_Tab[3]&0xFF000000)>>24); 		//第12个字节
0002d2  4b1a              LDR      r3,|L16.828|
0002d4  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002d6  ea4f6213          LSR      r2,r3,#24
;;;348    	cardinfo->SD_cid.ProdSN|=tmp;			     
0002da  6b8b              LDR      r3,[r1,#0x38]
0002dc  ea430302          ORR      r3,r3,r2
0002e0  638b              STR      r3,[r1,#0x38]
;;;349    	tmp=(u8)((CID_Tab[3]&0x00FF0000)>>16);	 	//第13个字节
0002e2  4b16              LDR      r3,|L16.828|
0002e4  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002e6  f3c34207          UBFX     r2,r3,#16,#8
;;;350    	cardinfo->SD_cid.Reserved1|=(tmp&0xF0)>>4;
0002ea  f04f033c          MOV      r3,#0x3c
0002ee  5c5b              LDRB     r3,[r3,r1]
0002f0  ea431412          ORR      r4,r3,r2,LSR #4
0002f4  f04f033c          MOV      r3,#0x3c
0002f8  545c              STRB     r4,[r3,r1]
;;;351    	cardinfo->SD_cid.ManufactDate=(tmp&0x0F)<<8;    
0002fa  ea4f7302          LSL      r3,r2,#28
0002fe  ea4f5413          LSR      r4,r3,#20
000302  87cc              STRH     r4,[r1,#0x3e]
;;;352    	tmp=(u8)((CID_Tab[3]&0x0000FF00)>>8);		//第14个字节
000304  4b0d              LDR      r3,|L16.828|
000306  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
000308  f3c32207          UBFX     r2,r3,#8,#8
;;;353    	cardinfo->SD_cid.ManufactDate|=tmp;		 	  
00030c  8fcb              LDRH     r3,[r1,#0x3e]
00030e  ea430302          ORR      r3,r3,r2
000312  87cb              STRH     r3,[r1,#0x3e]
;;;354    	tmp=(u8)(CID_Tab[3]&0x000000FF);			//第15个字节
000314  4b09              LDR      r3,|L16.828|
000316  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;355    	cardinfo->SD_cid.CID_CRC=(tmp&0xFE)>>1;
000318  ea4f0452          LSR      r4,r2,#1
00031c  f04f0340          MOV      r3,#0x40
000320  545c              STRB     r4,[r3,r1]
;;;356    	cardinfo->SD_cid.Reserved2=1;	 
000322  f04f0401          MOV      r4,#1
000326  f04f0341          MOV      r3,#0x41
00032a  545c              STRB     r4,[r3,r1]
;;;357    	return errorstatus;
;;;358    }
00032c  bdf0              POP      {r4-r7,pc}
;;;359    //设置SDIO总线宽度(MMC卡不支持4bit模式)
                          ENDP

00032e  0000              DCW      0x0000
                  |L16.816|
                          DCD      CardType
                  |L16.820|
                          DCD      ||RCA||
                  |L16.824|
                          DCD      CSD_Tab
                  |L16.828|
                          DCD      CID_Tab

                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;13     //返回值:错误代码;(0,无错误)
;;;14     SD_Error SD_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;15     {
;;;16     	GPIO_InitTypeDef GPIO_InitStructure;
;;;17     	NVIC_InitTypeDef NVIC_InitStructure;
;;;18     	SD_Error errorstatus=SD_OK;	   
000002  2400              MOVS     r4,#0
;;;19     	/*SDIO IO口初始化*/
;;;20     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOF,ENABLE);
000004  2101              MOVS     r1,#1
000006  20b0              MOVS     r0,#0xb0
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;21     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2|RCC_AHBPeriph_SDIO,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  f2404002          MOV      r0,#0x402
000012  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;22     		
;;;23     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12;
000016  f44f50f8          MOV      r0,#0x1f00
00001a  f8ad0004          STRH     r0,[sp,#4]
;;;24     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  2003              MOVS     r0,#3
000020  f88d0006          STRB     r0,[sp,#6]
;;;25     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000024  2018              MOVS     r0,#0x18
000026  f88d0007          STRB     r0,[sp,#7]
;;;26     	GPIO_Init(GPIOC,&GPIO_InitStructure);
00002a  a901              ADD      r1,sp,#4
00002c  482a              LDR      r0,|L17.216|
00002e  f7fffffe          BL       GPIO_Init
;;;27     	
;;;28     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000032  2004              MOVS     r0,#4
000034  f8ad0004          STRH     r0,[sp,#4]
;;;29     	GPIO_Init(GPIOD,&GPIO_InitStructure);
000038  a901              ADD      r1,sp,#4
00003a  4828              LDR      r0,|L17.220|
00003c  f7fffffe          BL       GPIO_Init
;;;30     	
;;;31     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;							//PA15上拉输入(SD_INSERT)	
000040  2004              MOVS     r0,#4
000042  f8ad0004          STRH     r0,[sp,#4]
;;;32     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000046  f88d0007          STRB     r0,[sp,#7]
;;;33     	GPIO_Init(GPIOF, &GPIO_InitStructure);
00004a  a901              ADD      r1,sp,#4
00004c  4824              LDR      r0,|L17.224|
00004e  f7fffffe          BL       GPIO_Init
;;;34     	
;;;35     	
;;;36     	/*SDIO NVIC配置*/
;;;37     	NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
000052  2031              MOVS     r0,#0x31
000054  f88d0000          STRB     r0,[sp,#0]
;;;38     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000058  2000              MOVS     r0,#0
00005a  f88d0001          STRB     r0,[sp,#1]
;;;39     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00005e  f88d0002          STRB     r0,[sp,#2]
;;;40     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000062  2001              MOVS     r0,#1
000064  f88d0003          STRB     r0,[sp,#3]
;;;41     	NVIC_Init(&NVIC_InitStructure);
000068  4668              MOV      r0,sp
00006a  f7fffffe          BL       NVIC_Init
;;;42     	
;;;43     	//SDIO外设寄存器设置为默认值
;;;44     	
;;;45     	SDIO->POWER=0x00000000;
00006e  2000              MOVS     r0,#0
000070  491c              LDR      r1,|L17.228|
000072  6008              STR      r0,[r1,#0]
;;;46     	SDIO->CLKCR=0x00000000;
000074  6048              STR      r0,[r1,#4]
;;;47     	SDIO->ARG=0x00000000;
000076  6088              STR      r0,[r1,#8]
;;;48     	SDIO->CMD=0x00000000;
000078  60c8              STR      r0,[r1,#0xc]
;;;49     	SDIO->DTIMER=0x00000000;
00007a  6248              STR      r0,[r1,#0x24]
;;;50     	SDIO->DLEN=0x00000000;
00007c  6288              STR      r0,[r1,#0x28]
;;;51     	SDIO->DCTRL=0x00000000;
00007e  62c8              STR      r0,[r1,#0x2c]
;;;52     	SDIO->ICR=0x00C007FF;
000080  4819              LDR      r0,|L17.232|
000082  6388              STR      r0,[r1,#0x38]
;;;53     	SDIO->MASK=0x00000000;	 
000084  2000              MOVS     r0,#0
000086  63c8              STR      r0,[r1,#0x3c]
;;;54     
;;;55        	errorstatus=SD_PowerON();						//SD卡上电
000088  f7fffffe          BL       SD_PowerON
00008c  4604              MOV      r4,r0
;;;56      	if(errorstatus==SD_OK)errorstatus=SD_InitializeCards();			//初始化SD卡														  
00008e  b914              CBNZ     r4,|L17.150|
000090  f7fffffe          BL       SD_InitializeCards
000094  4604              MOV      r4,r0
                  |L17.150|
;;;57       	if(errorstatus==SD_OK)errorstatus=SD_GetCardInfo(&SDCardInfo);		//获取卡信息
000096  b91c              CBNZ     r4,|L17.160|
000098  4814              LDR      r0,|L17.236|
00009a  f7fffffe          BL       SD_GetCardInfo
00009e  4604              MOV      r4,r0
                  |L17.160|
;;;58      	if(errorstatus==SD_OK)errorstatus=SD_SelectDeselect((u32)(SDCardInfo.RCA<<16));//选中SD卡   
0000a0  b934              CBNZ     r4,|L17.176|
0000a2  4912              LDR      r1,|L17.236|
0000a4  f8b11054          LDRH     r1,[r1,#0x54]  ; SDCardInfo
0000a8  0408              LSLS     r0,r1,#16
0000aa  f7fffffe          BL       SD_SelectDeselect
0000ae  4604              MOV      r4,r0
                  |L17.176|
;;;59        	if(errorstatus==SD_OK)errorstatus=SD_EnableWideBusOperation(1);		//4位宽度,如果是MMC卡,则不能用4位模式 
0000b0  b91c              CBNZ     r4,|L17.186|
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       SD_EnableWideBusOperation
0000b8  4604              MOV      r4,r0
                  |L17.186|
;;;60       	if((errorstatus==SD_OK)||(SDIO_MULTIMEDIA_CARD==CardType))
0000ba  b11c              CBZ      r4,|L17.196|
0000bc  480c              LDR      r0,|L17.240|
0000be  7800              LDRB     r0,[r0,#0]  ; CardType
0000c0  2803              CMP      r0,#3
0000c2  d106              BNE      |L17.210|
                  |L17.196|
;;;61     	{  		    
;;;62     		SDIO_Clock_Set(SDIO_TRANSFER_CLK_DIV);			//设置时钟频率,SDIO时钟计算公式:SDIO_CK时钟=SDIOCLK/[clkdiv+2];其中,SDIOCLK一般为72Mhz 
0000c4  2002              MOVS     r0,#2
0000c6  f7fffffe          BL       SDIO_Clock_Set
;;;63     		errorstatus=SD_SetDeviceMode(SD_DMA_MODE);		//设置为DMA模式
0000ca  2001              MOVS     r0,#1
0000cc  f7fffffe          BL       SD_SetDeviceMode
0000d0  4604              MOV      r4,r0
                  |L17.210|
;;;64     		//errorstatus=SD_SetDeviceMode(SD_POLLING_MODE);//设置为查询模式
;;;65      	}
;;;66     	return errorstatus;		 
0000d2  4620              MOV      r0,r4
;;;67     }
0000d4  bd1c              POP      {r2-r4,pc}
;;;68     //SDIO时钟初始化设置
                          ENDP

0000d6  0000              DCW      0x0000
                  |L17.216|
                          DCD      0x40011000
                  |L17.220|
                          DCD      0x40011400
                  |L17.224|
                          DCD      0x40011c00
                  |L17.228|
                          DCD      0x40018000
                  |L17.232|
                          DCD      0x00c007ff
                  |L17.236|
                          DCD      SDCardInfo
                  |L17.240|
                          DCD      CardType

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;196    //返回值:错误代码
;;;197    SD_Error SD_InitializeCards(void)
000000  b518              PUSH     {r3,r4,lr}
;;;198    {
;;;199     	SD_Error errorstatus=SD_OK;
000002  2400              MOVS     r4,#0
;;;200    	u16 rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;201     	if((SDIO->POWER&0X03)==0)return SD_REQUEST_NOT_APPLICABLE;//检查电源状态,确保为上电状态
000008  4839              LDR      r0,|L18.240|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0100f03          TST      r0,#3
000010  d101              BNE      |L18.22|
000012  2025              MOVS     r0,#0x25
                  |L18.20|
;;;202     	if(SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;203    	{
;;;204    		SDIO_Send_Cmd(SD_CMD_ALL_SEND_CID,3,0);			//发送CMD2,取得CID,长响应	 
;;;205    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;206    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;207     		CID_Tab[0]=SDIO->RESP1;
;;;208    		CID_Tab[1]=SDIO->RESP2;
;;;209    		CID_Tab[2]=SDIO->RESP3;
;;;210    		CID_Tab[3]=SDIO->RESP4;
;;;211    	}
;;;212    	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_SECURE_DIGITAL_IO_COMBO_CARD==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))//判断卡类型
;;;213    	{
;;;214    		SDIO_Send_Cmd(SD_CMD_SET_REL_ADDR,1,0);			//发送CMD3,短响应 
;;;215    		errorstatus=CmdResp6Error(SD_CMD_SET_REL_ADDR,&rca);//等待R6响应 
;;;216    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;217    	}   
;;;218        if (SDIO_MULTIMEDIA_CARD==CardType)
;;;219        {
;;;220     		SDIO_Send_Cmd(SD_CMD_SET_REL_ADDR,1,(u32)(rca<<16));//发送CMD3,短响应 	   
;;;221    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;222    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;223        }
;;;224    	if (SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;225    	{
;;;226    		RCA = rca;
;;;227    		SDIO_Send_Cmd(SD_CMD_SEND_CSD,3,(u32)(rca<<16));//发送CMD9+卡RCA,取得CSD,长响应 	   
;;;228    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;229    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;230      		CSD_Tab[0]=SDIO->RESP1;
;;;231    		CSD_Tab[1]=SDIO->RESP2;
;;;232    		CSD_Tab[2]=SDIO->RESP3;						
;;;233    		CSD_Tab[3]=SDIO->RESP4;					    
;;;234    	}
;;;235    	return SD_OK;//卡初始化成功
;;;236    } 
000014  bd18              POP      {r3,r4,pc}
                  |L18.22|
000016  4837              LDR      r0,|L18.244|
000018  7800              LDRB     r0,[r0,#0]            ;202  ; CardType
00001a  2804              CMP      r0,#4                 ;202
00001c  d017              BEQ      |L18.78|
00001e  2200              MOVS     r2,#0                 ;204
000020  2103              MOVS     r1,#3                 ;204
000022  2002              MOVS     r0,#2                 ;204
000024  f7fffffe          BL       SDIO_Send_Cmd
000028  f7fffffe          BL       CmdResp2Error
00002c  4604              MOV      r4,r0                 ;205
00002e  b10c              CBZ      r4,|L18.52|
000030  4620              MOV      r0,r4                 ;206
000032  e7ef              B        |L18.20|
                  |L18.52|
000034  482e              LDR      r0,|L18.240|
000036  6940              LDR      r0,[r0,#0x14]         ;207
000038  492f              LDR      r1,|L18.248|
00003a  6008              STR      r0,[r1,#0]            ;207  ; CID_Tab
00003c  482c              LDR      r0,|L18.240|
00003e  6980              LDR      r0,[r0,#0x18]         ;208
000040  6048              STR      r0,[r1,#4]            ;208  ; CID_Tab
000042  482b              LDR      r0,|L18.240|
000044  69c0              LDR      r0,[r0,#0x1c]         ;209
000046  6088              STR      r0,[r1,#8]            ;209  ; CID_Tab
000048  4829              LDR      r0,|L18.240|
00004a  6a00              LDR      r0,[r0,#0x20]         ;210
00004c  60c8              STR      r0,[r1,#0xc]          ;210  ; CID_Tab
                  |L18.78|
00004e  4829              LDR      r0,|L18.244|
000050  7800              LDRB     r0,[r0,#0]            ;212  ; CardType
000052  b158              CBZ      r0,|L18.108|
000054  4827              LDR      r0,|L18.244|
000056  7800              LDRB     r0,[r0,#0]            ;212  ; CardType
000058  2801              CMP      r0,#1                 ;212
00005a  d007              BEQ      |L18.108|
00005c  4825              LDR      r0,|L18.244|
00005e  7800              LDRB     r0,[r0,#0]            ;212  ; CardType
000060  2806              CMP      r0,#6                 ;212
000062  d003              BEQ      |L18.108|
000064  4823              LDR      r0,|L18.244|
000066  7800              LDRB     r0,[r0,#0]            ;212  ; CardType
000068  2802              CMP      r0,#2                 ;212
00006a  d10c              BNE      |L18.134|
                  |L18.108|
00006c  2200              MOVS     r2,#0                 ;214
00006e  2101              MOVS     r1,#1                 ;214
000070  2003              MOVS     r0,#3                 ;214
000072  f7fffffe          BL       SDIO_Send_Cmd
000076  4669              MOV      r1,sp                 ;215
000078  2003              MOVS     r0,#3                 ;215
00007a  f7fffffe          BL       CmdResp6Error
00007e  4604              MOV      r4,r0                 ;215
000080  b10c              CBZ      r4,|L18.134|
000082  4620              MOV      r0,r4                 ;216
000084  e7c6              B        |L18.20|
                  |L18.134|
000086  481b              LDR      r0,|L18.244|
000088  7800              LDRB     r0,[r0,#0]            ;218  ; CardType
00008a  2803              CMP      r0,#3                 ;218
00008c  d10c              BNE      |L18.168|
00008e  f8bd0000          LDRH     r0,[sp,#0]            ;220
000092  0402              LSLS     r2,r0,#16             ;220
000094  2101              MOVS     r1,#1                 ;220
000096  2003              MOVS     r0,#3                 ;220
000098  f7fffffe          BL       SDIO_Send_Cmd
00009c  f7fffffe          BL       CmdResp2Error
0000a0  4604              MOV      r4,r0                 ;221
0000a2  b10c              CBZ      r4,|L18.168|
0000a4  4620              MOV      r0,r4                 ;222
0000a6  e7b5              B        |L18.20|
                  |L18.168|
0000a8  4812              LDR      r0,|L18.244|
0000aa  7800              LDRB     r0,[r0,#0]            ;224  ; CardType
0000ac  2804              CMP      r0,#4                 ;224
0000ae  d01d              BEQ      |L18.236|
0000b0  f8bd0000          LDRH     r0,[sp,#0]            ;226
0000b4  4911              LDR      r1,|L18.252|
0000b6  6008              STR      r0,[r1,#0]            ;226  ; RCA
0000b8  f8bd0000          LDRH     r0,[sp,#0]            ;227
0000bc  0402              LSLS     r2,r0,#16             ;227
0000be  2103              MOVS     r1,#3                 ;227
0000c0  2009              MOVS     r0,#9                 ;227
0000c2  f7fffffe          BL       SDIO_Send_Cmd
0000c6  f7fffffe          BL       CmdResp2Error
0000ca  4604              MOV      r4,r0                 ;228
0000cc  b10c              CBZ      r4,|L18.210|
0000ce  4620              MOV      r0,r4                 ;229
0000d0  e7a0              B        |L18.20|
                  |L18.210|
0000d2  4807              LDR      r0,|L18.240|
0000d4  6940              LDR      r0,[r0,#0x14]         ;230
0000d6  490a              LDR      r1,|L18.256|
0000d8  6008              STR      r0,[r1,#0]            ;230  ; CSD_Tab
0000da  4805              LDR      r0,|L18.240|
0000dc  6980              LDR      r0,[r0,#0x18]         ;231
0000de  6048              STR      r0,[r1,#4]            ;231  ; CSD_Tab
0000e0  4803              LDR      r0,|L18.240|
0000e2  69c0              LDR      r0,[r0,#0x1c]         ;232
0000e4  6088              STR      r0,[r1,#8]            ;232  ; CSD_Tab
0000e6  4802              LDR      r0,|L18.240|
0000e8  6a00              LDR      r0,[r0,#0x20]         ;233
0000ea  60c8              STR      r0,[r1,#0xc]          ;233  ; CSD_Tab
                  |L18.236|
0000ec  2000              MOVS     r0,#0                 ;235
0000ee  e791              B        |L18.20|
;;;237    //得到卡信息
                          ENDP

                  |L18.240|
                          DCD      0x40018000
                  |L18.244|
                          DCD      CardType
                  |L18.248|
                          DCD      CID_Tab
                  |L18.252|
                          DCD      ||RCA||
                  |L18.256|
                          DCD      CSD_Tab

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=2

                  SD_PowerOFF PROC
;;;189    //返回值:错误代码;(0,无错误)
;;;190    SD_Error SD_PowerOFF(void)
000000  4803              LDR      r0,|L19.16|
;;;191    {
;;;192      	SDIO->POWER&=~(3<<0);//SDIO电源关闭,时钟停止	
000002  6800              LDR      r0,[r0,#0]
000004  f0200003          BIC      r0,r0,#3
000008  4901              LDR      r1,|L19.16|
00000a  6008              STR      r0,[r1,#0]
;;;193    	return SD_OK;		  
00000c  2000              MOVS     r0,#0
;;;194    }   
00000e  4770              BX       lr
;;;195    //初始化所有的卡,并让卡进入就绪状态
                          ENDP

                  |L19.16|
                          DCD      0x40018000

                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;107    //返回值:错误代码;(0,无错误)
;;;108    SD_Error SD_PowerON(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;109    {
;;;110     	u8 i=0;
000004  2700              MOVS     r7,#0
;;;111    	SD_Error errorstatus=SD_OK;
000006  2400              MOVS     r4,#0
;;;112    	u32 response=0,count=0,validvoltage=0;
000008  2600              MOVS     r6,#0
00000a  2500              MOVS     r5,#0
00000c  46a0              MOV      r8,r4
;;;113    	u32 SDType=SD_STD_CAPACITY;
00000e  46a1              MOV      r9,r4
;;;114    	//配置CLKCR寄存器 
;;;115    	SDIO->CLKCR=0;				//清空CLKCR之前的设置
000010  2000              MOVS     r0,#0
000012  4955              LDR      r1,|L20.360|
000014  6048              STR      r0,[r1,#4]
;;;116    	SDIO->CLKCR|=0<<9;			//非省电模式
000016  4608              MOV      r0,r1
000018  6840              LDR      r0,[r0,#4]
00001a  6048              STR      r0,[r1,#4]
;;;117    	SDIO->CLKCR|=0<<10;			//关闭旁路,CK根据分频设置输出
00001c  4608              MOV      r0,r1
00001e  6840              LDR      r0,[r0,#4]
000020  6048              STR      r0,[r1,#4]
;;;118    	SDIO->CLKCR|=0<<11;			//1位数据宽度
000022  4608              MOV      r0,r1
000024  6840              LDR      r0,[r0,#4]
000026  6048              STR      r0,[r1,#4]
;;;119    	SDIO->CLKCR|=0<<13;			//SDIOCLK上升沿产生SDIOCK
000028  4608              MOV      r0,r1
00002a  6840              LDR      r0,[r0,#4]
00002c  6048              STR      r0,[r1,#4]
;;;120    	SDIO->CLKCR|=0<<14;			//关闭硬件流控制    
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  6048              STR      r0,[r1,#4]
;;;121    	SDIO_Clock_Set(SDIO_INIT_CLK_DIV);//设置时钟频率(初始化的时候,不能超过400Khz)			 
000034  20b2              MOVS     r0,#0xb2
000036  f7fffffe          BL       SDIO_Clock_Set
;;;122     	SDIO->POWER=0X03;			//上电状态,开启卡时钟    
00003a  2003              MOVS     r0,#3
00003c  494a              LDR      r1,|L20.360|
00003e  6008              STR      r0,[r1,#0]
;;;123      	SDIO->CLKCR|=1<<8;			//SDIOCK使能   
000040  4608              MOV      r0,r1
000042  6840              LDR      r0,[r0,#4]
000044  f4407080          ORR      r0,r0,#0x100
000048  6048              STR      r0,[r1,#4]
;;;124       	for(i=0;i<74;i++)
00004a  bf00              NOP      
00004c  e00b              B        |L20.102|
                  |L20.78|
;;;125    	{
;;;126    		SDIO_Send_Cmd(SD_CMD_GO_IDLE_STATE,0,0);//发送CMD0进入IDLE STAGE模式命令.												  
00004e  2200              MOVS     r2,#0
000050  4611              MOV      r1,r2
000052  4610              MOV      r0,r2
000054  f7fffffe          BL       SDIO_Send_Cmd
;;;127    		errorstatus=CmdError();
000058  f7fffffe          BL       CmdError
00005c  4604              MOV      r4,r0
;;;128    		if(errorstatus==SD_OK)break;
00005e  b904              CBNZ     r4,|L20.98|
000060  e003              B        |L20.106|
                  |L20.98|
000062  1c78              ADDS     r0,r7,#1              ;124
000064  b2c7              UXTB     r7,r0                 ;124
                  |L20.102|
000066  2f4a              CMP      r7,#0x4a              ;124
000068  dbf1              BLT      |L20.78|
                  |L20.106|
00006a  bf00              NOP      
;;;129     	}
;;;130     	if(errorstatus)return errorstatus;//返回错误状态
00006c  b114              CBZ      r4,|L20.116|
00006e  4620              MOV      r0,r4
                  |L20.112|
;;;131    	SDIO_Send_Cmd(SDIO_SEND_IF_COND,1,SD_CHECK_PATTERN);//发送CMD8,短响应,检查SD卡接口特性.
;;;132     														//arg[11:8]:01,支持电压范围,2.7~3.6V
;;;133    														//arg[7:0]:默认0XAA
;;;134    														//返回响应7
;;;135      	errorstatus=CmdResp7Error();						//等待R7响应
;;;136     	if(errorstatus==SD_OK) 							//R7响应正常
;;;137    	{
;;;138    		CardType=SDIO_STD_CAPACITY_SD_CARD_V2_0;			//SD 2.0卡
;;;139    		SDType=SD_HIGH_CAPACITY;			   		//高容量卡
;;;140    	}
;;;141    	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,0);					//发送CMD55,短响应	 
;;;142    	errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 		 		//等待R1响应   
;;;143    	if(errorstatus==SD_OK)//SD2.0/SD 1.1,否则为MMC卡
;;;144    	{																  
;;;145    		//SD卡,发送ACMD41 SD_APP_OP_COND,参数为:0x80100000 
;;;146    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;147    		{	   										   
;;;148    			SDIO_Send_Cmd(SD_CMD_APP_CMD,1,0);			//发送CMD55,短响应	 
;;;149    			errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 	 	//等待R1响应   
;;;150     			if(errorstatus!=SD_OK)return errorstatus;   		//响应错误
;;;151    			SDIO_Send_Cmd(SD_CMD_SD_APP_OP_COND,1,SD_VOLTAGE_WINDOW_SD|SDType);//发送ACMD41,短响应	 
;;;152    			errorstatus=CmdResp3Error(); 					   //等待R3响应   
;;;153     			if(errorstatus!=SD_OK)return errorstatus;   		//响应错误  
;;;154    			response=SDIO->RESP1;			   		//得到响应
;;;155    			validvoltage=(((response>>31)==1)?1:0);			//判断SD卡上电是否完成
;;;156    			count++;
;;;157    		}
;;;158    		if(count>=SD_MAX_VOLT_TRIAL)
;;;159    		{
;;;160    			errorstatus=SD_INVALID_VOLTRANGE;
;;;161    			return errorstatus;
;;;162    		}	 
;;;163    		if(response&=SD_HIGH_CAPACITY)
;;;164    		{
;;;165    			CardType=SDIO_HIGH_CAPACITY_SD_CARD;
;;;166    		}
;;;167     	}else//MMC卡
;;;168    	{
;;;169    		//MMC卡,发送CMD1 SDIO_SEND_OP_COND,参数为:0x80FF8000 
;;;170    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;171    		{	   										   				   
;;;172    			SDIO_Send_Cmd(SD_CMD_SEND_OP_COND,1,SD_VOLTAGE_WINDOW_MMC);//发送CMD1,短响应	 
;;;173    			errorstatus=CmdResp3Error(); 					//等待R3响应   
;;;174     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误  
;;;175    			response=SDIO->RESP1;;			   				//得到响应
;;;176    			validvoltage=(((response>>31)==1)?1:0);
;;;177    			count++;
;;;178    		}
;;;179    		if(count>=SD_MAX_VOLT_TRIAL)
;;;180    		{
;;;181    			errorstatus=SD_INVALID_VOLTRANGE;
;;;182    			return errorstatus;
;;;183    		}	 			    
;;;184    		CardType=SDIO_MULTIMEDIA_CARD;	  
;;;185      	}  
;;;186      	return(errorstatus);		
;;;187    }
000070  e8bd83f0          POP      {r4-r9,pc}
                  |L20.116|
000074  f44f72d5          MOV      r2,#0x1aa             ;131
000078  2101              MOVS     r1,#1                 ;131
00007a  2008              MOVS     r0,#8                 ;131
00007c  f7fffffe          BL       SDIO_Send_Cmd
000080  f7fffffe          BL       CmdResp7Error
000084  4604              MOV      r4,r0                 ;135
000086  b924              CBNZ     r4,|L20.146|
000088  2001              MOVS     r0,#1                 ;138
00008a  4938              LDR      r1,|L20.364|
00008c  7008              STRB     r0,[r1,#0]            ;138
00008e  f04f4980          MOV      r9,#0x40000000        ;139
                  |L20.146|
000092  2200              MOVS     r2,#0                 ;141
000094  2101              MOVS     r1,#1                 ;141
000096  2037              MOVS     r0,#0x37              ;141
000098  f7fffffe          BL       SDIO_Send_Cmd
00009c  2037              MOVS     r0,#0x37              ;142
00009e  f7fffffe          BL       CmdResp1Error
0000a2  4604              MOV      r4,r0                 ;142
0000a4  bb7c              CBNZ     r4,|L20.262|
0000a6  e020              B        |L20.234|
                  |L20.168|
0000a8  2200              MOVS     r2,#0                 ;148
0000aa  2101              MOVS     r1,#1                 ;148
0000ac  2037              MOVS     r0,#0x37              ;148
0000ae  f7fffffe          BL       SDIO_Send_Cmd
0000b2  2037              MOVS     r0,#0x37              ;149
0000b4  f7fffffe          BL       CmdResp1Error
0000b8  4604              MOV      r4,r0                 ;149
0000ba  b10c              CBZ      r4,|L20.192|
0000bc  4620              MOV      r0,r4                 ;150
0000be  e7d7              B        |L20.112|
                  |L20.192|
0000c0  482b              LDR      r0,|L20.368|
0000c2  ea490200          ORR      r2,r9,r0              ;151
0000c6  2101              MOVS     r1,#1                 ;151
0000c8  2029              MOVS     r0,#0x29              ;151
0000ca  f7fffffe          BL       SDIO_Send_Cmd
0000ce  f7fffffe          BL       CmdResp3Error
0000d2  4604              MOV      r4,r0                 ;152
0000d4  b10c              CBZ      r4,|L20.218|
0000d6  4620              MOV      r0,r4                 ;153
0000d8  e7ca              B        |L20.112|
                  |L20.218|
0000da  4823              LDR      r0,|L20.360|
0000dc  6946              LDR      r6,[r0,#0x14]         ;154
0000de  2001              MOVS     r0,#1                 ;155
0000e0  ea8070d6          EOR      r0,r0,r6,LSR #31      ;155
0000e4  f0800801          EOR      r8,r0,#1              ;155
0000e8  1c6d              ADDS     r5,r5,#1              ;156
                  |L20.234|
0000ea  f1b80f00          CMP      r8,#0                 ;146
0000ee  d103              BNE      |L20.248|
0000f0  f64f70ff          MOV      r0,#0xffff            ;146
0000f4  4285              CMP      r5,r0                 ;146
0000f6  d3d7              BCC      |L20.168|
                  |L20.248|
0000f8  f64f70ff          MOV      r0,#0xffff            ;158
0000fc  4285              CMP      r5,r0                 ;158
0000fe  d303              BCC      |L20.264|
000100  241b              MOVS     r4,#0x1b              ;160
000102  4620              MOV      r0,r4                 ;161
000104  e7b4              B        |L20.112|
                  |L20.262|
000106  e007              B        |L20.280|
                  |L20.264|
000108  f0064080          AND      r0,r6,#0x40000000     ;163
00010c  0006              MOVS     r6,r0                 ;163
00010e  d028              BEQ      |L20.354|
000110  2002              MOVS     r0,#2                 ;165
000112  4916              LDR      r1,|L20.364|
000114  7008              STRB     r0,[r1,#0]            ;165
000116  e024              B        |L20.354|
                  |L20.280|
000118  e012              B        |L20.320|
                  |L20.282|
00011a  4a16              LDR      r2,|L20.372|
00011c  2101              MOVS     r1,#1                 ;172
00011e  4608              MOV      r0,r1                 ;172
000120  f7fffffe          BL       SDIO_Send_Cmd
000124  f7fffffe          BL       CmdResp3Error
000128  4604              MOV      r4,r0                 ;173
00012a  b10c              CBZ      r4,|L20.304|
00012c  4620              MOV      r0,r4                 ;174
00012e  e79f              B        |L20.112|
                  |L20.304|
000130  480d              LDR      r0,|L20.360|
000132  6946              LDR      r6,[r0,#0x14]         ;175
000134  2001              MOVS     r0,#1                 ;176
000136  ea8070d6          EOR      r0,r0,r6,LSR #31      ;176
00013a  f0800801          EOR      r8,r0,#1              ;176
00013e  1c6d              ADDS     r5,r5,#1              ;177
                  |L20.320|
000140  f1b80f00          CMP      r8,#0                 ;170
000144  d103              BNE      |L20.334|
000146  f64f70ff          MOV      r0,#0xffff            ;170
00014a  4285              CMP      r5,r0                 ;170
00014c  d3e5              BCC      |L20.282|
                  |L20.334|
00014e  f64f70ff          MOV      r0,#0xffff            ;179
000152  4285              CMP      r5,r0                 ;179
000154  d302              BCC      |L20.348|
000156  241b              MOVS     r4,#0x1b              ;181
000158  4620              MOV      r0,r4                 ;182
00015a  e789              B        |L20.112|
                  |L20.348|
00015c  2003              MOVS     r0,#3                 ;184
00015e  4903              LDR      r1,|L20.364|
000160  7008              STRB     r0,[r1,#0]            ;184
                  |L20.354|
000162  4620              MOV      r0,r4                 ;186
000164  e784              B        |L20.112|
;;;188    //SD卡 Power OFF
                          ENDP

000166  0000              DCW      0x0000
                  |L20.360|
                          DCD      0x40018000
                  |L20.364|
                          DCD      CardType
                  |L20.368|
                          DCD      0x80100000
                  |L20.372|
                          DCD      0x80ff8000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;831    //返回值:错误代码
;;;832    SD_Error SD_ProcessIRQSrc(void)
000000  b500              PUSH     {lr}
;;;833    {
;;;834    	if(SDIO->STA&(1<<8))//接收完成中断
000002  484d              LDR      r0,|L21.312|
000004  6b40              LDR      r0,[r0,#0x34]
000006  f4107f80          TST      r0,#0x100
00000a  d024              BEQ      |L21.86|
;;;835    	{	 
;;;836    		if (StopCondition==1)
00000c  484b              LDR      r0,|L21.316|
00000e  7800              LDRB     r0,[r0,#0]  ; StopCondition
000010  2801              CMP      r0,#1
000012  d10a              BNE      |L21.42|
;;;837    		{
;;;838    			SDIO_Send_Cmd(SD_CMD_STOP_TRANSMISSION,1,0);		//发送CMD12,结束传输 	   
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  200c              MOVS     r0,#0xc
00001a  f7fffffe          BL       SDIO_Send_Cmd
;;;839    			TransferError=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
00001e  200c              MOVS     r0,#0xc
000020  f7fffffe          BL       CmdResp1Error
000024  4946              LDR      r1,|L21.320|
000026  7008              STRB     r0,[r1,#0]
000028  e002              B        |L21.48|
                  |L21.42|
;;;840    		}else TransferError = SD_OK;	
00002a  2000              MOVS     r0,#0
00002c  4944              LDR      r1,|L21.320|
00002e  7008              STRB     r0,[r1,#0]
                  |L21.48|
;;;841     		SDIO->ICR|=1<<8;//清除完成中断标记
000030  4841              LDR      r0,|L21.312|
000032  6b80              LDR      r0,[r0,#0x38]
000034  f4407080          ORR      r0,r0,#0x100
000038  493f              LDR      r1,|L21.312|
00003a  6388              STR      r0,[r1,#0x38]
;;;842    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
00003c  4608              MOV      r0,r1
00003e  6bc0              LDR      r0,[r0,#0x3c]
000040  f24c313a          MOV      r1,#0xc33a
000044  4388              BICS     r0,r0,r1
000046  493c              LDR      r1,|L21.312|
000048  63c8              STR      r0,[r1,#0x3c]
;;;843     		TransferEnd = 1;
00004a  2001              MOVS     r0,#1
00004c  493d              LDR      r1,|L21.324|
00004e  7008              STRB     r0,[r1,#0]
;;;844    		return(TransferError);
000050  483b              LDR      r0,|L21.320|
000052  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L21.84|
;;;845    	}
;;;846     	if(SDIO->STA&(1<<1))//数据CRC错误
;;;847    	{
;;;848    		SDIO->ICR|=1<<1;//清除中断标记
;;;849    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;850    	    TransferError = SD_DATA_CRC_FAIL;
;;;851    	    return(SD_DATA_CRC_FAIL);
;;;852    	}
;;;853     	if(SDIO->STA&(1<<3))//数据超时错误
;;;854    	{
;;;855    		SDIO->ICR|=1<<3;//清除中断标记
;;;856    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;857    	    TransferError = SD_DATA_TIMEOUT;
;;;858    	    return(SD_DATA_TIMEOUT);
;;;859    	}
;;;860      	if(SDIO->STA&(1<<5))//FIFO上溢错误
;;;861    	{
;;;862    		SDIO->ICR|=1<<5;//清除中断标记
;;;863    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;864    	    TransferError = SD_RX_OVERRUN;
;;;865    	    return(SD_RX_OVERRUN);
;;;866    	}
;;;867       	if(SDIO->STA&(1<<4))//FIFO下溢错误
;;;868    	{
;;;869    		SDIO->ICR|=1<<4;//清除中断标记
;;;870    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;871    	    TransferError = SD_TX_UNDERRUN;
;;;872    	    return(SD_TX_UNDERRUN);
;;;873    	}
;;;874    	if(SDIO->STA&(1<<9))//起始位错误
;;;875    	{
;;;876    		SDIO->ICR|=1<<9;//清除中断标记
;;;877    		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;878    	    TransferError = SD_START_BIT_ERR;
;;;879    	    return(SD_START_BIT_ERR);
;;;880    	}
;;;881    	return(SD_OK);
;;;882    }
000054  bd00              POP      {pc}
                  |L21.86|
000056  4838              LDR      r0,|L21.312|
000058  6b40              LDR      r0,[r0,#0x34]         ;846
00005a  f0100f02          TST      r0,#2                 ;846
00005e  d010              BEQ      |L21.130|
000060  4835              LDR      r0,|L21.312|
000062  6b80              LDR      r0,[r0,#0x38]         ;848
000064  f0400002          ORR      r0,r0,#2              ;848
000068  4933              LDR      r1,|L21.312|
00006a  6388              STR      r0,[r1,#0x38]         ;848
00006c  4608              MOV      r0,r1                 ;849
00006e  6bc0              LDR      r0,[r0,#0x3c]         ;849
000070  f24c313a          MOV      r1,#0xc33a            ;849
000074  4388              BICS     r0,r0,r1              ;849
000076  4930              LDR      r1,|L21.312|
000078  63c8              STR      r0,[r1,#0x3c]         ;849
00007a  2002              MOVS     r0,#2                 ;850
00007c  4930              LDR      r1,|L21.320|
00007e  7008              STRB     r0,[r1,#0]            ;850
000080  e7e8              B        |L21.84|
                  |L21.130|
000082  482d              LDR      r0,|L21.312|
000084  6b40              LDR      r0,[r0,#0x34]         ;853
000086  f0100f08          TST      r0,#8                 ;853
00008a  d010              BEQ      |L21.174|
00008c  482a              LDR      r0,|L21.312|
00008e  6b80              LDR      r0,[r0,#0x38]         ;855
000090  f0400008          ORR      r0,r0,#8              ;855
000094  4928              LDR      r1,|L21.312|
000096  6388              STR      r0,[r1,#0x38]         ;855
000098  4608              MOV      r0,r1                 ;856
00009a  6bc0              LDR      r0,[r0,#0x3c]         ;856
00009c  f24c313a          MOV      r1,#0xc33a            ;856
0000a0  4388              BICS     r0,r0,r1              ;856
0000a2  4925              LDR      r1,|L21.312|
0000a4  63c8              STR      r0,[r1,#0x3c]         ;856
0000a6  2004              MOVS     r0,#4                 ;857
0000a8  4925              LDR      r1,|L21.320|
0000aa  7008              STRB     r0,[r1,#0]            ;857
0000ac  e7d2              B        |L21.84|
                  |L21.174|
0000ae  4822              LDR      r0,|L21.312|
0000b0  6b40              LDR      r0,[r0,#0x34]         ;860
0000b2  f0100f20          TST      r0,#0x20              ;860
0000b6  d010              BEQ      |L21.218|
0000b8  481f              LDR      r0,|L21.312|
0000ba  6b80              LDR      r0,[r0,#0x38]         ;862
0000bc  f0400020          ORR      r0,r0,#0x20           ;862
0000c0  491d              LDR      r1,|L21.312|
0000c2  6388              STR      r0,[r1,#0x38]         ;862
0000c4  4608              MOV      r0,r1                 ;863
0000c6  6bc0              LDR      r0,[r0,#0x3c]         ;863
0000c8  f24c313a          MOV      r1,#0xc33a            ;863
0000cc  4388              BICS     r0,r0,r1              ;863
0000ce  491a              LDR      r1,|L21.312|
0000d0  63c8              STR      r0,[r1,#0x3c]         ;863
0000d2  2006              MOVS     r0,#6                 ;864
0000d4  491a              LDR      r1,|L21.320|
0000d6  7008              STRB     r0,[r1,#0]            ;864
0000d8  e7bc              B        |L21.84|
                  |L21.218|
0000da  4817              LDR      r0,|L21.312|
0000dc  6b40              LDR      r0,[r0,#0x34]         ;867
0000de  f0100f10          TST      r0,#0x10              ;867
0000e2  d010              BEQ      |L21.262|
0000e4  4814              LDR      r0,|L21.312|
0000e6  6b80              LDR      r0,[r0,#0x38]         ;869
0000e8  f0400010          ORR      r0,r0,#0x10           ;869
0000ec  4912              LDR      r1,|L21.312|
0000ee  6388              STR      r0,[r1,#0x38]         ;869
0000f0  4608              MOV      r0,r1                 ;870
0000f2  6bc0              LDR      r0,[r0,#0x3c]         ;870
0000f4  f24c313a          MOV      r1,#0xc33a            ;870
0000f8  4388              BICS     r0,r0,r1              ;870
0000fa  490f              LDR      r1,|L21.312|
0000fc  63c8              STR      r0,[r1,#0x3c]         ;870
0000fe  2005              MOVS     r0,#5                 ;871
000100  490f              LDR      r1,|L21.320|
000102  7008              STRB     r0,[r1,#0]            ;871
000104  e7a6              B        |L21.84|
                  |L21.262|
000106  480c              LDR      r0,|L21.312|
000108  6b40              LDR      r0,[r0,#0x34]         ;874
00010a  f4107f00          TST      r0,#0x200             ;874
00010e  d010              BEQ      |L21.306|
000110  4809              LDR      r0,|L21.312|
000112  6b80              LDR      r0,[r0,#0x38]         ;876
000114  f4407000          ORR      r0,r0,#0x200          ;876
000118  4907              LDR      r1,|L21.312|
00011a  6388              STR      r0,[r1,#0x38]         ;876
00011c  4608              MOV      r0,r1                 ;877
00011e  6bc0              LDR      r0,[r0,#0x3c]         ;877
000120  f24c313a          MOV      r1,#0xc33a            ;877
000124  4388              BICS     r0,r0,r1              ;877
000126  4904              LDR      r1,|L21.312|
000128  63c8              STR      r0,[r1,#0x3c]         ;877
00012a  2007              MOVS     r0,#7                 ;878
00012c  4904              LDR      r1,|L21.320|
00012e  7008              STRB     r0,[r1,#0]            ;878
000130  e790              B        |L21.84|
                  |L21.306|
000132  2000              MOVS     r0,#0                 ;881
000134  e78e              B        |L21.84|
;;;883      
                          ENDP

000136  0000              DCW      0x0000
                  |L21.312|
                          DCD      0x40018000
                  |L21.316|
                          DCD      StopCondition
                  |L21.320|
                          DCD      TransferError
                  |L21.324|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;403    //blksize:块大小
;;;404    SD_Error SD_ReadBlock(u8 *buf,u32 addr,u16 blksize)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;405    {	  
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;406    	SD_Error errorstatus=SD_OK;
00000a  f04f0800          MOV      r8,#0
;;;407    	u8 power;
;;;408       	u32 count=0,*tempbuff=(u32*)buf;//转换为u32指针 
00000e  46c1              MOV      r9,r8
000010  4635              MOV      r5,r6
;;;409    	u32 timeout=0;   
000012  46c2              MOV      r10,r8
;;;410       	if(NULL==buf)return SD_INVALID_PARAMETER; 
000014  b916              CBNZ     r6,|L22.28|
000016  2026              MOVS     r0,#0x26
                  |L22.24|
;;;411       	SDIO->DCTRL=0x0;	//数据控制寄存器清零(关DMA)   
;;;412    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;413    	{
;;;414    		blksize=512;
;;;415    		addr>>=9;
;;;416    	}   
;;;417      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
;;;418    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;419    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;420    	{
;;;421    		power=convert_from_bytes_to_power_of_two(blksize);	    	   
;;;422    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;423    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;424    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;425    	}else return SD_INVALID_PARAMETER;	  	  									    
;;;426      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,blksize,power,1);	//blksize,卡到控制器	  
;;;427       	SDIO_Send_Cmd(SD_CMD_READ_SINGLE_BLOCK,1,addr);		//发送CMD17+从addr地址出读取数据,短响应 	   
;;;428    	errorstatus=CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);//等待R1响应   
;;;429    	if(errorstatus!=SD_OK)return errorstatus;   		//响应错误	 
;;;430    	if(DeviceMode==SD_POLLING_MODE)						//查询模式,轮询数据	 
;;;431    	{
;;;432    		while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<10)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;433    		{
;;;434    			if(SDIO->STA&(1<<15))						//接收区半满,表示至少存了8个字
;;;435    			{
;;;436    				for(count=0;count<8;count++)			//循环读取数据
;;;437    				{
;;;438    					*(tempbuff+count)=SDIO->FIFO;	 
;;;439    				}
;;;440    				tempbuff+=8;
;;;441    			}
;;;442    		} 
;;;443    		if(SDIO->STA&(1<<3))		//数据超时错误
;;;444    		{										   
;;;445    	 		SDIO->ICR|=1<<3; 		//清错误标志
;;;446    			return SD_DATA_TIMEOUT;
;;;447    	 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;448    		{
;;;449    	 		SDIO->ICR|=1<<1; 		//清错误标志
;;;450    			return SD_DATA_CRC_FAIL;		   
;;;451    		}else if(SDIO->STA&(1<<5)) 	//接收fifo上溢错误
;;;452    		{
;;;453    	 		SDIO->ICR|=1<<5; 		//清错误标志
;;;454    			return SD_RX_OVERRUN;		 
;;;455    		}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;456    		{
;;;457    	 		SDIO->ICR|=1<<9; 		//清错误标志
;;;458    			return SD_START_BIT_ERR;		 
;;;459    		}   
;;;460    		while(SDIO->STA&(1<<21))	//FIFO里面,还存在可用数据
;;;461    		{
;;;462    			*tempbuff=SDIO->FIFO;	//循环读取数据
;;;463    			tempbuff++;
;;;464    		}
;;;465    		SDIO->ICR=0X5FF;	 		//清除所有标记
;;;466    	}else if(DeviceMode==SD_DMA_MODE)
;;;467    	{
;;;468     		TransferError=SD_OK;
;;;469    		StopCondition=0;			//单块读,不需要发送停止传输指令
;;;470    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;471    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;472    	 	SDIO->DCTRL|=1<<3;		 	//SDIO DMA使能 
;;;473     	    SD_DMA_Config((u32*)buf,blksize,0);
;;;474    		timeout=SDIO_DATATIMEOUT;
;;;475     		while(((DMA2->ISR&0X2000)==RESET)&&(TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;//等待传输完成 
;;;476    		if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;477    		if(TransferError!=SD_OK)errorstatus=TransferError;  
;;;478        }   
;;;479     	return errorstatus; 
;;;480    }
000018  e8bd8ff0          POP      {r4-r11,pc}
                  |L22.28|
00001c  2000              MOVS     r0,#0                 ;411
00001e  4971              LDR      r1,|L22.484|
000020  62c8              STR      r0,[r1,#0x2c]         ;411
000022  4871              LDR      r0,|L22.488|
000024  7800              LDRB     r0,[r0,#0]            ;412  ; CardType
000026  2802              CMP      r0,#2                 ;412
000028  d101              BNE      |L22.46|
00002a  0204              LSLS     r4,r0,#8              ;414
00002c  0a7f              LSRS     r7,r7,#9              ;415
                  |L22.46|
00002e  2300              MOVS     r3,#0                 ;417
000030  461a              MOV      r2,r3                 ;417
000032  4619              MOV      r1,r3                 ;417
000034  486d              LDR      r0,|L22.492|
000036  f7fffffe          BL       SDIO_Send_Data_Cfg
00003a  486a              LDR      r0,|L22.484|
00003c  6940              LDR      r0,[r0,#0x14]         ;418
00003e  f0107f00          TST      r0,#0x2000000         ;418
000042  d001              BEQ      |L22.72|
000044  200e              MOVS     r0,#0xe               ;418
000046  e7e7              B        |L22.24|
                  |L22.72|
000048  2c00              CMP      r4,#0                 ;419
00004a  dd17              BLE      |L22.124|
00004c  f5b46f00          CMP      r4,#0x800             ;419
000050  dc14              BGT      |L22.124|
000052  1e60              SUBS     r0,r4,#1              ;419
000054  4220              TST      r0,r4                 ;419
000056  d111              BNE      |L22.124|
000058  4620              MOV      r0,r4                 ;421
00005a  f7fffffe          BL       convert_from_bytes_to_power_of_two
00005e  4683              MOV      r11,r0                ;421
000060  4622              MOV      r2,r4                 ;422
000062  2101              MOVS     r1,#1                 ;422
000064  2010              MOVS     r0,#0x10              ;422
000066  f7fffffe          BL       SDIO_Send_Cmd
00006a  2010              MOVS     r0,#0x10              ;423
00006c  f7fffffe          BL       CmdResp1Error
000070  4680              MOV      r8,r0                 ;423
000072  f1b80f00          CMP      r8,#0                 ;424
000076  d003              BEQ      |L22.128|
000078  4640              MOV      r0,r8                 ;424
00007a  e7cd              B        |L22.24|
                  |L22.124|
00007c  2026              MOVS     r0,#0x26              ;425
00007e  e7cb              B        |L22.24|
                  |L22.128|
000080  2301              MOVS     r3,#1                 ;426
000082  465a              MOV      r2,r11                ;426
000084  4621              MOV      r1,r4                 ;426
000086  4859              LDR      r0,|L22.492|
000088  f7fffffe          BL       SDIO_Send_Data_Cfg
00008c  463a              MOV      r2,r7                 ;427
00008e  2101              MOVS     r1,#1                 ;427
000090  2011              MOVS     r0,#0x11              ;427
000092  f7fffffe          BL       SDIO_Send_Cmd
000096  2011              MOVS     r0,#0x11              ;428
000098  f7fffffe          BL       CmdResp1Error
00009c  4680              MOV      r8,r0                 ;428
00009e  f1b80f00          CMP      r8,#0                 ;429
0000a2  d001              BEQ      |L22.168|
0000a4  4640              MOV      r0,r8                 ;429
0000a6  e7b7              B        |L22.24|
                  |L22.168|
0000a8  4851              LDR      r0,|L22.496|
0000aa  7800              LDRB     r0,[r0,#0]            ;430  ; DeviceMode
0000ac  2800              CMP      r0,#0                 ;430
0000ae  d15c              BNE      |L22.362|
0000b0  e011              B        |L22.214|
                  |L22.178|
0000b2  484c              LDR      r0,|L22.484|
0000b4  6b40              LDR      r0,[r0,#0x34]         ;434
0000b6  f4104f00          TST      r0,#0x8000            ;434
0000ba  d00c              BEQ      |L22.214|
0000bc  f04f0900          MOV      r9,#0                 ;436
0000c0  e005              B        |L22.206|
                  |L22.194|
0000c2  484c              LDR      r0,|L22.500|
0000c4  6800              LDR      r0,[r0,#0]            ;438
0000c6  f8450029          STR      r0,[r5,r9,LSL #2]     ;438
0000ca  f1090901          ADD      r9,r9,#1              ;436
                  |L22.206|
0000ce  f1b90f08          CMP      r9,#8                 ;436
0000d2  d3f6              BCC      |L22.194|
0000d4  3520              ADDS     r5,r5,#0x20           ;440
                  |L22.214|
0000d6  4843              LDR      r0,|L22.484|
0000d8  6b40              LDR      r0,[r0,#0x34]         ;432
0000da  f240612a          MOV      r1,#0x62a             ;432
0000de  4208              TST      r0,r1                 ;432
0000e0  d0e7              BEQ      |L22.178|
0000e2  4840              LDR      r0,|L22.484|
0000e4  6b40              LDR      r0,[r0,#0x34]         ;443
0000e6  f0100f08          TST      r0,#8                 ;443
0000ea  d007              BEQ      |L22.252|
0000ec  483d              LDR      r0,|L22.484|
0000ee  6b80              LDR      r0,[r0,#0x38]         ;445
0000f0  f0400008          ORR      r0,r0,#8              ;445
0000f4  493b              LDR      r1,|L22.484|
0000f6  6388              STR      r0,[r1,#0x38]         ;445
0000f8  2004              MOVS     r0,#4                 ;446
0000fa  e78d              B        |L22.24|
                  |L22.252|
0000fc  4839              LDR      r0,|L22.484|
0000fe  6b40              LDR      r0,[r0,#0x34]         ;447
000100  f0100f02          TST      r0,#2                 ;447
000104  d007              BEQ      |L22.278|
000106  4837              LDR      r0,|L22.484|
000108  6b80              LDR      r0,[r0,#0x38]         ;449
00010a  f0400002          ORR      r0,r0,#2              ;449
00010e  4935              LDR      r1,|L22.484|
000110  6388              STR      r0,[r1,#0x38]         ;449
000112  2002              MOVS     r0,#2                 ;450
000114  e780              B        |L22.24|
                  |L22.278|
000116  4833              LDR      r0,|L22.484|
000118  6b40              LDR      r0,[r0,#0x34]         ;451
00011a  f0100f20          TST      r0,#0x20              ;451
00011e  d007              BEQ      |L22.304|
000120  4830              LDR      r0,|L22.484|
000122  6b80              LDR      r0,[r0,#0x38]         ;453
000124  f0400020          ORR      r0,r0,#0x20           ;453
000128  492e              LDR      r1,|L22.484|
00012a  6388              STR      r0,[r1,#0x38]         ;453
00012c  2006              MOVS     r0,#6                 ;454
00012e  e773              B        |L22.24|
                  |L22.304|
000130  482c              LDR      r0,|L22.484|
000132  6b40              LDR      r0,[r0,#0x34]         ;455
000134  f4107f00          TST      r0,#0x200             ;455
000138  d007              BEQ      |L22.330|
00013a  482a              LDR      r0,|L22.484|
00013c  6b80              LDR      r0,[r0,#0x38]         ;457
00013e  f4407000          ORR      r0,r0,#0x200          ;457
000142  4928              LDR      r1,|L22.484|
000144  6388              STR      r0,[r1,#0x38]         ;457
000146  2007              MOVS     r0,#7                 ;458
000148  e766              B        |L22.24|
                  |L22.330|
00014a  e004              B        |L22.342|
                  |L22.332|
00014c  4825              LDR      r0,|L22.484|
00014e  f8d00080          LDR      r0,[r0,#0x80]         ;462
000152  6028              STR      r0,[r5,#0]            ;462
000154  1d2d              ADDS     r5,r5,#4              ;463
                  |L22.342|
000156  4823              LDR      r0,|L22.484|
000158  6b40              LDR      r0,[r0,#0x34]         ;460
00015a  f4101f00          TST      r0,#0x200000          ;460
00015e  d1f5              BNE      |L22.332|
000160  f24050ff          MOV      r0,#0x5ff             ;465
000164  491f              LDR      r1,|L22.484|
000166  6388              STR      r0,[r1,#0x38]         ;465
000168  e039              B        |L22.478|
                  |L22.362|
00016a  4821              LDR      r0,|L22.496|
00016c  7800              LDRB     r0,[r0,#0]            ;466  ; DeviceMode
00016e  2801              CMP      r0,#1                 ;466
000170  d135              BNE      |L22.478|
000172  2000              MOVS     r0,#0                 ;468
000174  4920              LDR      r1,|L22.504|
000176  7008              STRB     r0,[r1,#0]            ;468
000178  4920              LDR      r1,|L22.508|
00017a  7008              STRB     r0,[r1,#0]            ;469
00017c  4920              LDR      r1,|L22.512|
00017e  7008              STRB     r0,[r1,#0]            ;470
000180  4818              LDR      r0,|L22.484|
000182  6bc0              LDR      r0,[r0,#0x3c]         ;471
000184  f240312a          MOV      r1,#0x32a             ;471
000188  4308              ORRS     r0,r0,r1              ;471
00018a  4916              LDR      r1,|L22.484|
00018c  63c8              STR      r0,[r1,#0x3c]         ;471
00018e  4608              MOV      r0,r1                 ;472
000190  6ac0              LDR      r0,[r0,#0x2c]         ;472
000192  f0400008          ORR      r0,r0,#8              ;472
000196  62c8              STR      r0,[r1,#0x2c]         ;472
000198  2200              MOVS     r2,#0                 ;473
00019a  4621              MOV      r1,r4                 ;473
00019c  4630              MOV      r0,r6                 ;473
00019e  f7fffffe          BL       SD_DMA_Config
0001a2  f8dfa060          LDR      r10,|L22.516|
0001a6  e001              B        |L22.428|
                  |L22.424|
0001a8  f1aa0a01          SUB      r10,r10,#1            ;475
                  |L22.428|
0001ac  4816              LDR      r0,|L22.520|
0001ae  6800              LDR      r0,[r0,#0]            ;475
0001b0  f4105f00          TST      r0,#0x2000            ;475
0001b4  d108              BNE      |L22.456|
0001b6  4812              LDR      r0,|L22.512|
0001b8  7800              LDRB     r0,[r0,#0]            ;475  ; TransferEnd
0001ba  b928              CBNZ     r0,|L22.456|
0001bc  480e              LDR      r0,|L22.504|
0001be  7800              LDRB     r0,[r0,#0]            ;475  ; TransferError
0001c0  b910              CBNZ     r0,|L22.456|
0001c2  f1ba0f00          CMP      r10,#0                ;475
0001c6  d1ef              BNE      |L22.424|
                  |L22.456|
0001c8  f1ba0f00          CMP      r10,#0                ;476
0001cc  d101              BNE      |L22.466|
0001ce  2004              MOVS     r0,#4                 ;476
0001d0  e722              B        |L22.24|
                  |L22.466|
0001d2  4809              LDR      r0,|L22.504|
0001d4  7800              LDRB     r0,[r0,#0]            ;477  ; TransferError
0001d6  b110              CBZ      r0,|L22.478|
0001d8  4807              LDR      r0,|L22.504|
0001da  f8908000          LDRB     r8,[r0,#0]            ;477  ; TransferError
                  |L22.478|
0001de  4640              MOV      r0,r8                 ;479
0001e0  e71a              B        |L22.24|
;;;481    //SD卡读取多个块 
                          ENDP

0001e2  0000              DCW      0x0000
                  |L22.484|
                          DCD      0x40018000
                  |L22.488|
                          DCD      CardType
                  |L22.492|
                          DCD      0x000fffff
                  |L22.496|
                          DCD      DeviceMode
                  |L22.500|
                          DCD      0x40018080
                  |L22.504|
                          DCD      TransferError
                  |L22.508|
                          DCD      StopCondition
                  |L22.512|
                          DCD      TransferEnd
                  |L22.516|
                          DCD      0x0002ffff
                  |L22.520|
                          DCD      0x40020400

                          AREA ||i.SD_ReadDisk||, CODE, READONLY, ALIGN=2

                  SD_ReadDisk PROC
;;;1173   //返回值:错误状态;0,正常;其他,错误代码;				  				 
;;;1174   u8 SD_ReadDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1175   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;1176   	u8 sta=SD_OK;
00000a  f04f0800          MOV      r8,#0
;;;1177   	u8 n;
;;;1178   	if(CardType!=SDIO_STD_CAPACITY_SD_CARD_V1_1)sector<<=9;
00000e  4819              LDR      r0,|L23.116|
000010  7800              LDRB     r0,[r0,#0]  ; CardType
000012  b100              CBZ      r0,|L23.22|
000014  027f              LSLS     r7,r7,#9
                  |L23.22|
;;;1179   	if((u32)buf%4!=0)
000016  f0160f03          TST      r6,#3
00001a  d017              BEQ      |L23.76|
;;;1180   	{
;;;1181   	 	for(n=0;n<cnt;n++)
00001c  2500              MOVS     r5,#0
00001e  e012              B        |L23.70|
                  |L23.32|
;;;1182   		{
;;;1183   		 	sta=SD_ReadBlock(SDIO_DATA_BUFFER,sector+512*n,512);//单个sector的读操作
000020  f44f7000          MOV      r0,#0x200
000024  fb007105          MLA      r1,r0,r5,r7
000028  4602              MOV      r2,r0
00002a  4813              LDR      r0,|L23.120|
00002c  f7fffffe          BL       SD_ReadBlock
000030  4680              MOV      r8,r0
;;;1184   			memcpy(buf,SDIO_DATA_BUFFER,512);
000032  f44f7200          MOV      r2,#0x200
000036  4910              LDR      r1,|L23.120|
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       __aeabi_memcpy
;;;1185   			buf+=512;
00003e  f5067600          ADD      r6,r6,#0x200
000042  1c68              ADDS     r0,r5,#1              ;1181
000044  b2c5              UXTB     r5,r0                 ;1181
                  |L23.70|
000046  42a5              CMP      r5,r4                 ;1181
000048  dbea              BLT      |L23.32|
00004a  e010              B        |L23.110|
                  |L23.76|
;;;1186   		} 
;;;1187   	}else
;;;1188   	{
;;;1189   		if(cnt==1)sta=SD_ReadBlock(buf,sector,512);    	//单个sector的读操作
00004c  2c01              CMP      r4,#1
00004e  d106              BNE      |L23.94|
000050  0262              LSLS     r2,r4,#9
000052  4639              MOV      r1,r7
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       SD_ReadBlock
00005a  4680              MOV      r8,r0
00005c  e007              B        |L23.110|
                  |L23.94|
;;;1190   		else sta=SD_ReadMultiBlocks(buf,sector,512,cnt);//多个sector  
00005e  4623              MOV      r3,r4
000060  f44f7200          MOV      r2,#0x200
000064  4639              MOV      r1,r7
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       SD_ReadMultiBlocks
00006c  4680              MOV      r8,r0
                  |L23.110|
;;;1191   	}
;;;1192   	return sta;
00006e  4640              MOV      r0,r8
;;;1193   }
000070  e8bd81f0          POP      {r4-r8,pc}
;;;1194   //写SD卡
                          ENDP

                  |L23.116|
                          DCD      CardType
                  |L23.120|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;486    //返回值:错误状态
;;;487    SD_Error SD_ReadMultiBlocks(u8 *buf,u32 addr,u16 blksize,u32 nblks)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;488    {
000004  4683              MOV      r11,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;489      	SD_Error errorstatus=SD_OK;
00000c  2600              MOVS     r6,#0
;;;490    	u8 power;
;;;491       	u32 count=0,*tempbuff=(u32*)buf;//转换为u32指针
00000e  46b1              MOV      r9,r6
000010  465f              MOV      r7,r11
;;;492    	u32 timeout=0;  
000012  46b2              MOV      r10,r6
;;;493        SDIO->DCTRL=0x0;		//数据控制寄存器清零(关DMA)   
000014  2000              MOVS     r0,#0
000016  4986              LDR      r1,|L24.560|
000018  62c8              STR      r0,[r1,#0x2c]
;;;494    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
00001a  4886              LDR      r0,|L24.564|
00001c  7800              LDRB     r0,[r0,#0]  ; CardType
00001e  2802              CMP      r0,#2
000020  d102              BNE      |L24.40|
;;;495    	{
;;;496    		blksize=512;
000022  0204              LSLS     r4,r0,#8
;;;497    		addr>>=9;
000024  ea4f2858          LSR      r8,r8,#9
                  |L24.40|
;;;498    	}  
;;;499       	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
000028  2300              MOVS     r3,#0
00002a  461a              MOV      r2,r3
00002c  4619              MOV      r1,r3
00002e  4882              LDR      r0,|L24.568|
000030  f7fffffe          BL       SDIO_Send_Data_Cfg
;;;500    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
000034  487e              LDR      r0,|L24.560|
000036  6940              LDR      r0,[r0,#0x14]
000038  f0107f00          TST      r0,#0x2000000
00003c  d002              BEQ      |L24.68|
00003e  200e              MOVS     r0,#0xe
                  |L24.64|
;;;501    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;502    	{
;;;503    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;504    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;505    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;506    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;507    	}else return SD_INVALID_PARAMETER;	  
;;;508    	if(nblks>1)											//多块读  
;;;509    	{									    
;;;510     	  	if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;//判断是否超过最大接收长度
;;;511    		SDIO_Send_Data_Cfg(SD_DATATIMEOUT,nblks*blksize,power,1);//nblks*blksize,512块大小,卡到控制器	  
;;;512    	  	SDIO_Send_Cmd(SD_CMD_READ_MULT_BLOCK,1,addr);	//发送CMD18+从addr地址出读取数据,短响应 	   
;;;513    		errorstatus=CmdResp1Error(SD_CMD_READ_MULT_BLOCK);//等待R1响应   
;;;514    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	  
;;;515    		if(DeviceMode==SD_POLLING_MODE)
;;;516    		{
;;;517    			while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<8)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;518    			{
;;;519    					if(SDIO->STA&(1<<15))						//接收区半满,表示至少存了8个字
;;;520    					{
;;;521    						for(count=0;count<8;count++)			//循环读取数据
;;;522    						{
;;;523    							*(tempbuff+count)=SDIO->FIFO;	 
;;;524    						}
;;;525    						tempbuff+=8;
;;;526    					}
;;;527    			} 
;;;528    			if(SDIO->STA&(1<<3))		//数据超时错误
;;;529    			{										   
;;;530    		 		SDIO->ICR|=1<<3; 		//清错误标志
;;;531    				return SD_DATA_TIMEOUT;
;;;532    		 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;533    			{
;;;534    		 		SDIO->ICR|=1<<1; 		//清错误标志
;;;535    				return SD_DATA_CRC_FAIL;		   
;;;536    			}else if(SDIO->STA&(1<<5)) 	//接收fifo上溢错误
;;;537    			{
;;;538    		 		SDIO->ICR|=1<<5; 		//清错误标志
;;;539    				return SD_RX_OVERRUN;		 
;;;540    			}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;541    			{
;;;542    		 		SDIO->ICR|=1<<9; 		//清错误标志
;;;543    				return SD_START_BIT_ERR;		 
;;;544    			}   
;;;545    			while(SDIO->STA&(1<<21))	//FIFO里面,还存在可用数据
;;;546    			{
;;;547    				*tempbuff=SDIO->FIFO;	//循环读取数据
;;;548    				tempbuff++;
;;;549    			}
;;;550    	 		if(SDIO->STA&(1<<8))		//接收结束
;;;551    			{
;;;552    				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;553    				{
;;;554    					SDIO_Send_Cmd(SD_CMD_STOP_TRANSMISSION,1,0);		//发送CMD12+结束传输 	   
;;;555    					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;556    					if(errorstatus!=SD_OK)return errorstatus;	 
;;;557    				}
;;;558     			}
;;;559    	 		SDIO->ICR=0X5FF;	 		//清除所有标记 
;;;560     		}else if(DeviceMode==SD_DMA_MODE)
;;;561    		{
;;;562    	   		TransferError=SD_OK;
;;;563    			StopCondition=1;			//多块读,需要发送停止传输指令 
;;;564    			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;565    			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;566    		 	SDIO->DCTRL|=1<<3;		 						//SDIO DMA使能 
;;;567    	 	    SD_DMA_Config((u32*)buf,nblks*blksize,0);
;;;568    			timeout=SDIO_DATATIMEOUT;
;;;569    	 		while(((DMA2->ISR&0X2000)==RESET)&&timeout)timeout--;//等待传输完成 
;;;570    			if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;571    			while((TransferEnd==0)&&(TransferError==SD_OK)); 
;;;572    			if(TransferError!=SD_OK)errorstatus=TransferError;  	 
;;;573    		}		 
;;;574      	}
;;;575    	return errorstatus;
;;;576    }			    																  
000040  e8bd8ff8          POP      {r3-r11,pc}
                  |L24.68|
000044  2c00              CMP      r4,#0                 ;501
000046  dd15              BLE      |L24.116|
000048  f5b46f00          CMP      r4,#0x800             ;501
00004c  dc12              BGT      |L24.116|
00004e  1e60              SUBS     r0,r4,#1              ;501
000050  4220              TST      r0,r4                 ;501
000052  d10f              BNE      |L24.116|
000054  4620              MOV      r0,r4                 ;503
000056  f7fffffe          BL       convert_from_bytes_to_power_of_two
00005a  9000              STR      r0,[sp,#0]            ;503
00005c  4622              MOV      r2,r4                 ;504
00005e  2101              MOVS     r1,#1                 ;504
000060  2010              MOVS     r0,#0x10              ;504
000062  f7fffffe          BL       SDIO_Send_Cmd
000066  2010              MOVS     r0,#0x10              ;505
000068  f7fffffe          BL       CmdResp1Error
00006c  4606              MOV      r6,r0                 ;505
00006e  b11e              CBZ      r6,|L24.120|
000070  4630              MOV      r0,r6                 ;506
000072  e7e5              B        |L24.64|
                  |L24.116|
000074  2026              MOVS     r0,#0x26              ;507
000076  e7e3              B        |L24.64|
                  |L24.120|
000078  2d01              CMP      r5,#1                 ;508
00007a  d97d              BLS      |L24.376|
00007c  fb05f004          MUL      r0,r5,r4              ;510
000080  f1b07f00          CMP      r0,#0x2000000         ;510
000084  d301              BCC      |L24.138|
000086  2026              MOVS     r0,#0x26              ;510
000088  e7da              B        |L24.64|
                  |L24.138|
00008a  fb05f104          MUL      r1,r5,r4              ;511
00008e  2301              MOVS     r3,#1                 ;511
000090  4869              LDR      r0,|L24.568|
000092  9a00              LDR      r2,[sp,#0]            ;511
000094  f7fffffe          BL       SDIO_Send_Data_Cfg
000098  4642              MOV      r2,r8                 ;512
00009a  2101              MOVS     r1,#1                 ;512
00009c  2012              MOVS     r0,#0x12              ;512
00009e  f7fffffe          BL       SDIO_Send_Cmd
0000a2  2012              MOVS     r0,#0x12              ;513
0000a4  f7fffffe          BL       CmdResp1Error
0000a8  4606              MOV      r6,r0                 ;513
0000aa  b10e              CBZ      r6,|L24.176|
0000ac  4630              MOV      r0,r6                 ;514
0000ae  e7c7              B        |L24.64|
                  |L24.176|
0000b0  4862              LDR      r0,|L24.572|
0000b2  7800              LDRB     r0,[r0,#0]            ;515  ; DeviceMode
0000b4  2800              CMP      r0,#0                 ;515
0000b6  d17b              BNE      |L24.432|
0000b8  e011              B        |L24.222|
                  |L24.186|
0000ba  485d              LDR      r0,|L24.560|
0000bc  6b40              LDR      r0,[r0,#0x34]         ;519
0000be  f4104f00          TST      r0,#0x8000            ;519
0000c2  d00c              BEQ      |L24.222|
0000c4  f04f0900          MOV      r9,#0                 ;521
0000c8  e005              B        |L24.214|
                  |L24.202|
0000ca  485d              LDR      r0,|L24.576|
0000cc  6800              LDR      r0,[r0,#0]            ;523
0000ce  f8470029          STR      r0,[r7,r9,LSL #2]     ;523
0000d2  f1090901          ADD      r9,r9,#1              ;521
                  |L24.214|
0000d6  f1b90f08          CMP      r9,#8                 ;521
0000da  d3f6              BCC      |L24.202|
0000dc  3720              ADDS     r7,r7,#0x20           ;525
                  |L24.222|
0000de  4854              LDR      r0,|L24.560|
0000e0  6b40              LDR      r0,[r0,#0x34]         ;517
0000e2  f240312a          MOV      r1,#0x32a             ;517
0000e6  4208              TST      r0,r1                 ;517
0000e8  d0e7              BEQ      |L24.186|
0000ea  4851              LDR      r0,|L24.560|
0000ec  6b40              LDR      r0,[r0,#0x34]         ;528
0000ee  f0100f08          TST      r0,#8                 ;528
0000f2  d007              BEQ      |L24.260|
0000f4  484e              LDR      r0,|L24.560|
0000f6  6b80              LDR      r0,[r0,#0x38]         ;530
0000f8  f0400008          ORR      r0,r0,#8              ;530
0000fc  494c              LDR      r1,|L24.560|
0000fe  6388              STR      r0,[r1,#0x38]         ;530
000100  2004              MOVS     r0,#4                 ;531
000102  e79d              B        |L24.64|
                  |L24.260|
000104  484a              LDR      r0,|L24.560|
000106  6b40              LDR      r0,[r0,#0x34]         ;532
000108  f0100f02          TST      r0,#2                 ;532
00010c  d007              BEQ      |L24.286|
00010e  4848              LDR      r0,|L24.560|
000110  6b80              LDR      r0,[r0,#0x38]         ;534
000112  f0400002          ORR      r0,r0,#2              ;534
000116  4946              LDR      r1,|L24.560|
000118  6388              STR      r0,[r1,#0x38]         ;534
00011a  2002              MOVS     r0,#2                 ;535
00011c  e790              B        |L24.64|
                  |L24.286|
00011e  4844              LDR      r0,|L24.560|
000120  6b40              LDR      r0,[r0,#0x34]         ;536
000122  f0100f20          TST      r0,#0x20              ;536
000126  d007              BEQ      |L24.312|
000128  4841              LDR      r0,|L24.560|
00012a  6b80              LDR      r0,[r0,#0x38]         ;538
00012c  f0400020          ORR      r0,r0,#0x20           ;538
000130  493f              LDR      r1,|L24.560|
000132  6388              STR      r0,[r1,#0x38]         ;538
000134  2006              MOVS     r0,#6                 ;539
000136  e783              B        |L24.64|
                  |L24.312|
000138  483d              LDR      r0,|L24.560|
00013a  6b40              LDR      r0,[r0,#0x34]         ;540
00013c  f4107f00          TST      r0,#0x200             ;540
000140  d007              BEQ      |L24.338|
000142  483b              LDR      r0,|L24.560|
000144  6b80              LDR      r0,[r0,#0x38]         ;542
000146  f4407000          ORR      r0,r0,#0x200          ;542
00014a  4939              LDR      r1,|L24.560|
00014c  6388              STR      r0,[r1,#0x38]         ;542
00014e  2007              MOVS     r0,#7                 ;543
000150  e776              B        |L24.64|
                  |L24.338|
000152  e004              B        |L24.350|
                  |L24.340|
000154  4836              LDR      r0,|L24.560|
000156  f8d00080          LDR      r0,[r0,#0x80]         ;547
00015a  6038              STR      r0,[r7,#0]            ;547
00015c  1d3f              ADDS     r7,r7,#4              ;548
                  |L24.350|
00015e  4834              LDR      r0,|L24.560|
000160  6b40              LDR      r0,[r0,#0x34]         ;545
000162  f4101f00          TST      r0,#0x200000          ;545
000166  d1f5              BNE      |L24.340|
000168  4831              LDR      r0,|L24.560|
00016a  6b40              LDR      r0,[r0,#0x34]         ;550
00016c  f4107f80          TST      r0,#0x100             ;550
000170  d019              BEQ      |L24.422|
000172  4830              LDR      r0,|L24.564|
000174  7800              LDRB     r0,[r0,#0]            ;552  ; CardType
000176  e000              B        |L24.378|
                  |L24.376|
000178  e058              B        |L24.556|
                  |L24.378|
00017a  b138              CBZ      r0,|L24.396|
00017c  482d              LDR      r0,|L24.564|
00017e  7800              LDRB     r0,[r0,#0]            ;552  ; CardType
000180  2801              CMP      r0,#1                 ;552
000182  d003              BEQ      |L24.396|
000184  482b              LDR      r0,|L24.564|
000186  7800              LDRB     r0,[r0,#0]            ;552  ; CardType
000188  2802              CMP      r0,#2                 ;552
00018a  d10c              BNE      |L24.422|
                  |L24.396|
00018c  2200              MOVS     r2,#0                 ;554
00018e  2101              MOVS     r1,#1                 ;554
000190  200c              MOVS     r0,#0xc               ;554
000192  f7fffffe          BL       SDIO_Send_Cmd
000196  200c              MOVS     r0,#0xc               ;555
000198  f7fffffe          BL       CmdResp1Error
00019c  4606              MOV      r6,r0                 ;555
00019e  b116              CBZ      r6,|L24.422|
0001a0  4630              MOV      r0,r6                 ;556
0001a2  e74d              B        |L24.64|
0001a4  e004              B        |L24.432|
                  |L24.422|
0001a6  f24050ff          MOV      r0,#0x5ff             ;559
0001aa  4921              LDR      r1,|L24.560|
0001ac  6388              STR      r0,[r1,#0x38]         ;559
0001ae  e03d              B        |L24.556|
                  |L24.432|
0001b0  4822              LDR      r0,|L24.572|
0001b2  7800              LDRB     r0,[r0,#0]            ;560  ; DeviceMode
0001b4  2801              CMP      r0,#1                 ;560
0001b6  d139              BNE      |L24.556|
0001b8  2000              MOVS     r0,#0                 ;562
0001ba  4922              LDR      r1,|L24.580|
0001bc  7008              STRB     r0,[r1,#0]            ;562
0001be  2001              MOVS     r0,#1                 ;563
0001c0  4921              LDR      r1,|L24.584|
0001c2  7008              STRB     r0,[r1,#0]            ;563
0001c4  2000              MOVS     r0,#0                 ;564
0001c6  4921              LDR      r1,|L24.588|
0001c8  7008              STRB     r0,[r1,#0]            ;564
0001ca  4819              LDR      r0,|L24.560|
0001cc  6bc0              LDR      r0,[r0,#0x3c]         ;565
0001ce  f240312a          MOV      r1,#0x32a             ;565
0001d2  4308              ORRS     r0,r0,r1              ;565
0001d4  4916              LDR      r1,|L24.560|
0001d6  63c8              STR      r0,[r1,#0x3c]         ;565
0001d8  4608              MOV      r0,r1                 ;566
0001da  6ac0              LDR      r0,[r0,#0x2c]         ;566
0001dc  f0400008          ORR      r0,r0,#8              ;566
0001e0  62c8              STR      r0,[r1,#0x2c]         ;566
0001e2  fb05f104          MUL      r1,r5,r4              ;567
0001e6  2200              MOVS     r2,#0                 ;567
0001e8  4658              MOV      r0,r11                ;567
0001ea  f7fffffe          BL       SD_DMA_Config
0001ee  f8dfa060          LDR      r10,|L24.592|
0001f2  e001              B        |L24.504|
                  |L24.500|
0001f4  f1aa0a01          SUB      r10,r10,#1            ;569
                  |L24.504|
0001f8  4816              LDR      r0,|L24.596|
0001fa  6800              LDR      r0,[r0,#0]            ;569
0001fc  f4105f00          TST      r0,#0x2000            ;569
000200  d102              BNE      |L24.520|
000202  f1ba0f00          CMP      r10,#0                ;569
000206  d1f5              BNE      |L24.500|
                  |L24.520|
000208  f1ba0f00          CMP      r10,#0                ;570
00020c  d101              BNE      |L24.530|
00020e  2004              MOVS     r0,#4                 ;570
000210  e716              B        |L24.64|
                  |L24.530|
000212  bf00              NOP                            ;571
                  |L24.532|
000214  480d              LDR      r0,|L24.588|
000216  7800              LDRB     r0,[r0,#0]            ;571  ; TransferEnd
000218  b918              CBNZ     r0,|L24.546|
00021a  480a              LDR      r0,|L24.580|
00021c  7800              LDRB     r0,[r0,#0]            ;571  ; TransferError
00021e  2800              CMP      r0,#0                 ;571
000220  d0f8              BEQ      |L24.532|
                  |L24.546|
000222  4808              LDR      r0,|L24.580|
000224  7800              LDRB     r0,[r0,#0]            ;572  ; TransferError
000226  b108              CBZ      r0,|L24.556|
000228  4806              LDR      r0,|L24.580|
00022a  7806              LDRB     r6,[r0,#0]            ;572  ; TransferError
                  |L24.556|
00022c  4630              MOV      r0,r6                 ;575
00022e  e707              B        |L24.64|
;;;577    //SD卡写1个块 
                          ENDP

                  |L24.560|
                          DCD      0x40018000
                  |L24.564|
                          DCD      CardType
                  |L24.568|
                          DCD      0x000fffff
                  |L24.572|
                          DCD      DeviceMode
                  |L24.576|
                          DCD      0x40018080
                  |L24.580|
                          DCD      TransferError
                  |L24.584|
                          DCD      StopCondition
                  |L24.588|
                          DCD      TransferEnd
                  |L24.592|
                          DCD      0x0002ffff
                  |L24.596|
                          DCD      0x40020400

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=1

                  SD_SelectDeselect PROC
;;;394    //addr:卡的RCA地址
;;;395    SD_Error SD_SelectDeselect(u32 addr)
000000  b510              PUSH     {r4,lr}
;;;396    {
000002  4604              MOV      r4,r0
;;;397     	SDIO_Send_Cmd(SD_CMD_SEL_DESEL_CARD,1,addr);	//发送CMD7,选择卡,短响应	 	   
000004  4622              MOV      r2,r4
000006  2101              MOVS     r1,#1
000008  2007              MOVS     r0,#7
00000a  f7fffffe          BL       SDIO_Send_Cmd
;;;398       	return CmdResp1Error(SD_CMD_SEL_DESEL_CARD);	  
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       CmdResp1Error
;;;399    }
000014  bd10              POP      {r4,pc}
;;;400    //SD卡读取一个块 
                          ENDP


                          AREA ||i.SD_SetDeviceMode||, CODE, READONLY, ALIGN=2

                  SD_SetDeviceMode PROC
;;;384    //返回值:错误状态
;;;385    SD_Error SD_SetDeviceMode(u32 Mode)
000000  4601              MOV      r1,r0
;;;386    {
;;;387    	SD_Error errorstatus = SD_OK;
000002  2000              MOVS     r0,#0
;;;388     	if((Mode==SD_DMA_MODE)||(Mode==SD_POLLING_MODE))DeviceMode=Mode;
000004  2901              CMP      r1,#1
000006  d000              BEQ      |L26.10|
000008  b911              CBNZ     r1,|L26.16|
                  |L26.10|
00000a  4b02              LDR      r3,|L26.20|
00000c  7019              STRB     r1,[r3,#0]
00000e  e000              B        |L26.18|
                  |L26.16|
;;;389    	else errorstatus=SD_INVALID_PARAMETER;
000010  2026              MOVS     r0,#0x26
                  |L26.18|
;;;390    	return errorstatus;	    
;;;391    }
000012  4770              BX       lr
;;;392    //选卡
                          ENDP

                  |L26.20|
                          DCD      DeviceMode

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;581    //返回值:错误状态
;;;582    SD_Error SD_WriteBlock(u8 *buf,u32 addr,  u16 blksize)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;583    {
000004  b084              SUB      sp,sp,#0x10
000006  4683              MOV      r11,r0
000008  4615              MOV      r5,r2
;;;584    	SD_Error errorstatus = SD_OK;
00000a  2600              MOVS     r6,#0
;;;585    	u8  power=0,cardstate=0;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
000010  9002              STR      r0,[sp,#8]
;;;586    	u32 timeout=0,bytestransferred=0;
000012  2400              MOVS     r4,#0
000014  2700              MOVS     r7,#0
;;;587    	u32 cardstatus=0,count=0,restwords=0;
000016  9001              STR      r0,[sp,#4]
000018  4680              MOV      r8,r0
00001a  9000              STR      r0,[sp,#0]
;;;588    	u32	tlen=blksize;						//总长度(字节)
00001c  46aa              MOV      r10,r5
;;;589    	u32*tempbuff=(u32*)buf;								 
00001e  46d9              MOV      r9,r11
;;;590     	if(buf==NULL)return SD_INVALID_PARAMETER;//参数错误   
000020  f1bb0f00          CMP      r11,#0
000024  d103              BNE      |L27.46|
000026  2026              MOVS     r0,#0x26
                  |L27.40|
;;;591      	SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)   
;;;592      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
;;;593    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;594     	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//大容量卡
;;;595    	{
;;;596    		blksize=512;
;;;597    		addr>>=9;
;;;598    	}    
;;;599    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;600    	{
;;;601    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;602    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;603    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;604    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;605    	}else return SD_INVALID_PARAMETER;	 
;;;606       	SDIO_Send_Cmd(SD_CMD_SEND_STATUS,1,(u32)RCA<<16);	//发送CMD13,查询卡的状态,短响应 	   
;;;607    	errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);		//等待R1响应   		   
;;;608    	if(errorstatus!=SD_OK)return errorstatus;
;;;609    	cardstatus=SDIO->RESP1;													  
;;;610    	timeout=SD_DATATIMEOUT;
;;;611       	while(((cardstatus&0x00000100)==0)&&(timeout>0)) 	//检查READY_FOR_DATA位是否置位
;;;612    	{
;;;613    		timeout--;
;;;614    	   	SDIO_Send_Cmd(SD_CMD_SEND_STATUS,1,(u32)RCA<<16);//发送CMD13,查询卡的状态,短响应 	   
;;;615    		errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);	//等待R1响应   		   
;;;616    		if(errorstatus!=SD_OK)return errorstatus;				    
;;;617    		cardstatus=SDIO->RESP1;													  
;;;618    	}
;;;619    	if(timeout==0)return SD_ERROR;
;;;620       	SDIO_Send_Cmd(SD_CMD_WRITE_SINGLE_BLOCK,1,addr);	//发送CMD24,写单块指令,短响应 	   
;;;621    	errorstatus=CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);//等待R1响应   		   
;;;622    	if(errorstatus!=SD_OK)return errorstatus;   	  
;;;623    	StopCondition=0;									//单块写,不需要发送停止传输指令 
;;;624     	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,blksize,power,0);	//blksize, 控制器到卡	  
;;;625    	if (DeviceMode == SD_POLLING_MODE)
;;;626    	{
;;;627    		while(!(SDIO->STA&((1<<10)|(1<<4)|(1<<1)|(1<<3)|(1<<9))))//数据块发送成功/下溢/CRC/超时/起始位错误
;;;628    		{
;;;629    			if(SDIO->STA&(1<<14))							//发送区半空,表示至少存了8个字
;;;630    			{
;;;631    				if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;632    				{
;;;633    					restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;634    					
;;;635    					for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;636    					{
;;;637    						SDIO->FIFO=*tempbuff;
;;;638    					}
;;;639    				}else
;;;640    				{
;;;641    					for(count=0;count<8;count++)
;;;642    					{
;;;643    						SDIO->FIFO=*(tempbuff+count);
;;;644    					}
;;;645    					tempbuff+=8;
;;;646    					bytestransferred+=32;
;;;647    				}
;;;648    
;;;649    			}
;;;650    		} 
;;;651    		if(SDIO->STA&(1<<3))		//数据超时错误
;;;652    		{										   
;;;653    	 		SDIO->ICR|=1<<3; 		//清错误标志
;;;654    			return SD_DATA_TIMEOUT;
;;;655    	 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;656    		{
;;;657    	 		SDIO->ICR|=1<<1; 		//清错误标志
;;;658    			return SD_DATA_CRC_FAIL;		   
;;;659    		}else if(SDIO->STA&(1<<4)) 	//接收fifo下溢错误
;;;660    		{
;;;661    	 		SDIO->ICR|=1<<4; 		//清错误标志
;;;662    			return SD_TX_UNDERRUN;		 
;;;663    		}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;664    		{
;;;665    	 		SDIO->ICR|=1<<9; 		//清错误标志
;;;666    			return SD_START_BIT_ERR;		 
;;;667    		}   
;;;668    		SDIO->ICR=0X5FF;	 		//清除所有标记	  
;;;669    	}else if(DeviceMode==SD_DMA_MODE)
;;;670    	{
;;;671       		TransferError=SD_OK;
;;;672    		StopCondition=0;			//单块写,不需要发送停止传输指令 
;;;673    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;674    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;675    		SD_DMA_Config((u32*)buf,blksize,1);				//SDIO DMA配置
;;;676     	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能. 
;;;677    		timeout=SDIO_DATATIMEOUT;
;;;678     		while(((DMA2->ISR&0X2000)==RESET)&&timeout)timeout--;//等待传输完成 
;;;679    		if(timeout==0)
;;;680    		{
;;;681      			SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;682    			return SD_DATA_TIMEOUT;			//超时	 
;;;683     		}
;;;684    		timeout=SDIO_DATATIMEOUT;
;;;685    		while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;686     		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;687      		if(TransferError!=SD_OK)return TransferError;
;;;688     	}  
;;;689     	SDIO->ICR=0X5FF;	 		//清除所有标记
;;;690     	errorstatus=IsCardProgramming(&cardstate);
;;;691     	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;692    	{
;;;693    		errorstatus=IsCardProgramming(&cardstate);
;;;694    	}   
;;;695    	return errorstatus;
;;;696    }
000028  b007              ADD      sp,sp,#0x1c
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L27.46|
00002e  2000              MOVS     r0,#0                 ;591
000030  49a3              LDR      r1,|L27.704|
000032  62c8              STR      r0,[r1,#0x2c]         ;591
000034  2300              MOVS     r3,#0                 ;592
000036  461a              MOV      r2,r3                 ;592
000038  4619              MOV      r1,r3                 ;592
00003a  48a2              LDR      r0,|L27.708|
00003c  f7fffffe          BL       SDIO_Send_Data_Cfg
000040  489f              LDR      r0,|L27.704|
000042  6940              LDR      r0,[r0,#0x14]         ;593
000044  f0107f00          TST      r0,#0x2000000         ;593
000048  d001              BEQ      |L27.78|
00004a  200e              MOVS     r0,#0xe               ;593
00004c  e7ec              B        |L27.40|
                  |L27.78|
00004e  489e              LDR      r0,|L27.712|
000050  7800              LDRB     r0,[r0,#0]            ;594  ; CardType
000052  2802              CMP      r0,#2                 ;594
000054  d103              BNE      |L27.94|
000056  0205              LSLS     r5,r0,#8              ;596
000058  9805              LDR      r0,[sp,#0x14]         ;597
00005a  0a40              LSRS     r0,r0,#9              ;597
00005c  9005              STR      r0,[sp,#0x14]         ;597
                  |L27.94|
00005e  2d00              CMP      r5,#0                 ;599
000060  dd15              BLE      |L27.142|
000062  f5b56f00          CMP      r5,#0x800             ;599
000066  dc12              BGT      |L27.142|
000068  1e68              SUBS     r0,r5,#1              ;599
00006a  4228              TST      r0,r5                 ;599
00006c  d10f              BNE      |L27.142|
00006e  4628              MOV      r0,r5                 ;601
000070  f7fffffe          BL       convert_from_bytes_to_power_of_two
000074  9003              STR      r0,[sp,#0xc]          ;601
000076  462a              MOV      r2,r5                 ;602
000078  2101              MOVS     r1,#1                 ;602
00007a  2010              MOVS     r0,#0x10              ;602
00007c  f7fffffe          BL       SDIO_Send_Cmd
000080  2010              MOVS     r0,#0x10              ;603
000082  f7fffffe          BL       CmdResp1Error
000086  4606              MOV      r6,r0                 ;603
000088  b11e              CBZ      r6,|L27.146|
00008a  4630              MOV      r0,r6                 ;604
00008c  e7cc              B        |L27.40|
                  |L27.142|
00008e  2026              MOVS     r0,#0x26              ;605
000090  e7ca              B        |L27.40|
                  |L27.146|
000092  488e              LDR      r0,|L27.716|
000094  8800              LDRH     r0,[r0,#0]            ;606  ; RCA
000096  0402              LSLS     r2,r0,#16             ;606
000098  2101              MOVS     r1,#1                 ;606
00009a  200d              MOVS     r0,#0xd               ;606
00009c  f7fffffe          BL       SDIO_Send_Cmd
0000a0  200d              MOVS     r0,#0xd               ;607
0000a2  f7fffffe          BL       CmdResp1Error
0000a6  4606              MOV      r6,r0                 ;607
0000a8  b10e              CBZ      r6,|L27.174|
0000aa  4630              MOV      r0,r6                 ;608
0000ac  e7bc              B        |L27.40|
                  |L27.174|
0000ae  4884              LDR      r0,|L27.704|
0000b0  6940              LDR      r0,[r0,#0x14]         ;609
0000b2  9001              STR      r0,[sp,#4]            ;609
0000b4  4c83              LDR      r4,|L27.708|
0000b6  e011              B        |L27.220|
                  |L27.184|
0000b8  1e64              SUBS     r4,r4,#1              ;613
0000ba  4884              LDR      r0,|L27.716|
0000bc  8800              LDRH     r0,[r0,#0]            ;614  ; RCA
0000be  0402              LSLS     r2,r0,#16             ;614
0000c0  2101              MOVS     r1,#1                 ;614
0000c2  200d              MOVS     r0,#0xd               ;614
0000c4  f7fffffe          BL       SDIO_Send_Cmd
0000c8  200d              MOVS     r0,#0xd               ;615
0000ca  f7fffffe          BL       CmdResp1Error
0000ce  4606              MOV      r6,r0                 ;615
0000d0  b10e              CBZ      r6,|L27.214|
0000d2  4630              MOV      r0,r6                 ;616
0000d4  e7a8              B        |L27.40|
                  |L27.214|
0000d6  487a              LDR      r0,|L27.704|
0000d8  6940              LDR      r0,[r0,#0x14]         ;617
0000da  9001              STR      r0,[sp,#4]            ;617
                  |L27.220|
0000dc  9801              LDR      r0,[sp,#4]            ;611
0000de  f4107f80          TST      r0,#0x100             ;611
0000e2  d101              BNE      |L27.232|
0000e4  2c00              CMP      r4,#0                 ;611
0000e6  d1e7              BNE      |L27.184|
                  |L27.232|
0000e8  b90c              CBNZ     r4,|L27.238|
0000ea  2029              MOVS     r0,#0x29              ;619
0000ec  e79c              B        |L27.40|
                  |L27.238|
0000ee  2101              MOVS     r1,#1                 ;620
0000f0  2018              MOVS     r0,#0x18              ;620
0000f2  9a05              LDR      r2,[sp,#0x14]         ;620
0000f4  f7fffffe          BL       SDIO_Send_Cmd
0000f8  2018              MOVS     r0,#0x18              ;621
0000fa  f7fffffe          BL       CmdResp1Error
0000fe  4606              MOV      r6,r0                 ;621
000100  b10e              CBZ      r6,|L27.262|
000102  4630              MOV      r0,r6                 ;622
000104  e790              B        |L27.40|
                  |L27.262|
000106  2000              MOVS     r0,#0                 ;623
000108  4971              LDR      r1,|L27.720|
00010a  7008              STRB     r0,[r1,#0]            ;623
00010c  2300              MOVS     r3,#0                 ;624
00010e  4629              MOV      r1,r5                 ;624
000110  486c              LDR      r0,|L27.708|
000112  9a03              LDR      r2,[sp,#0xc]          ;624
000114  f7fffffe          BL       SDIO_Send_Data_Cfg
000118  486e              LDR      r0,|L27.724|
00011a  7800              LDRB     r0,[r0,#0]            ;625  ; DeviceMode
00011c  2800              CMP      r0,#0                 ;625
00011e  d177              BNE      |L27.528|
000120  e036              B        |L27.400|
                  |L27.290|
000122  4867              LDR      r0,|L27.704|
000124  6b40              LDR      r0,[r0,#0x34]         ;629
000126  f4104f80          TST      r0,#0x4000            ;629
00012a  d031              BEQ      |L27.400|
00012c  ebaa0007          SUB      r0,r10,r7             ;631
000130  2820              CMP      r0,#0x20              ;631
000132  d21e              BCS      |L27.370|
000134  ebaa0007          SUB      r0,r10,r7             ;633
000138  f0100f03          TST      r0,#3                 ;633
00013c  d103              BNE      |L27.326|
00013e  ebaa0007          SUB      r0,r10,r7             ;633
000142  0880              LSRS     r0,r0,#2              ;633
000144  e003              B        |L27.334|
                  |L27.326|
000146  ebaa0007          SUB      r0,r10,r7             ;633
00014a  0880              LSRS     r0,r0,#2              ;633
00014c  1c40              ADDS     r0,r0,#1              ;633
                  |L27.334|
00014e  9000              STR      r0,[sp,#0]            ;633
000150  f04f0800          MOV      r8,#0                 ;635
000154  e009              B        |L27.362|
                  |L27.342|
000156  4960              LDR      r1,|L27.728|
000158  f8d90000          LDR      r0,[r9,#0]            ;637
00015c  6008              STR      r0,[r1,#0]            ;637
00015e  f1080801          ADD      r8,r8,#1              ;635
000162  f1090904          ADD      r9,r9,#4              ;635
000166  f1070704          ADD      r7,r7,#4              ;635
                  |L27.362|
00016a  9800              LDR      r0,[sp,#0]            ;635
00016c  4580              CMP      r8,r0                 ;635
00016e  d20f              BCS      |L27.400|
000170  e7f1              B        |L27.342|
                  |L27.370|
000172  f04f0800          MOV      r8,#0                 ;641
000176  e005              B        |L27.388|
                  |L27.376|
000178  f8590028          LDR      r0,[r9,r8,LSL #2]     ;643
00017c  4956              LDR      r1,|L27.728|
00017e  6008              STR      r0,[r1,#0]            ;643
000180  f1080801          ADD      r8,r8,#1              ;641
                  |L27.388|
000184  f1b80f08          CMP      r8,#8                 ;641
000188  d3f6              BCC      |L27.376|
00018a  f1090920          ADD      r9,r9,#0x20           ;645
00018e  3720              ADDS     r7,r7,#0x20           ;646
                  |L27.400|
000190  484b              LDR      r0,|L27.704|
000192  6b40              LDR      r0,[r0,#0x34]         ;627
000194  f240611a          MOV      r1,#0x61a             ;627
000198  4208              TST      r0,r1                 ;627
00019a  d0c2              BEQ      |L27.290|
00019c  4848              LDR      r0,|L27.704|
00019e  6b40              LDR      r0,[r0,#0x34]         ;651
0001a0  f0100f08          TST      r0,#8                 ;651
0001a4  d007              BEQ      |L27.438|
0001a6  4846              LDR      r0,|L27.704|
0001a8  6b80              LDR      r0,[r0,#0x38]         ;653
0001aa  f0400008          ORR      r0,r0,#8              ;653
0001ae  4944              LDR      r1,|L27.704|
0001b0  6388              STR      r0,[r1,#0x38]         ;653
0001b2  2004              MOVS     r0,#4                 ;654
0001b4  e738              B        |L27.40|
                  |L27.438|
0001b6  4842              LDR      r0,|L27.704|
0001b8  6b40              LDR      r0,[r0,#0x34]         ;655
0001ba  f0100f02          TST      r0,#2                 ;655
0001be  d007              BEQ      |L27.464|
0001c0  483f              LDR      r0,|L27.704|
0001c2  6b80              LDR      r0,[r0,#0x38]         ;657
0001c4  f0400002          ORR      r0,r0,#2              ;657
0001c8  493d              LDR      r1,|L27.704|
0001ca  6388              STR      r0,[r1,#0x38]         ;657
0001cc  2002              MOVS     r0,#2                 ;658
0001ce  e72b              B        |L27.40|
                  |L27.464|
0001d0  483b              LDR      r0,|L27.704|
0001d2  6b40              LDR      r0,[r0,#0x34]         ;659
0001d4  f0100f10          TST      r0,#0x10              ;659
0001d8  d007              BEQ      |L27.490|
0001da  4839              LDR      r0,|L27.704|
0001dc  6b80              LDR      r0,[r0,#0x38]         ;661
0001de  f0400010          ORR      r0,r0,#0x10           ;661
0001e2  4937              LDR      r1,|L27.704|
0001e4  6388              STR      r0,[r1,#0x38]         ;661
0001e6  2005              MOVS     r0,#5                 ;662
0001e8  e71e              B        |L27.40|
                  |L27.490|
0001ea  4835              LDR      r0,|L27.704|
0001ec  6b40              LDR      r0,[r0,#0x34]         ;663
0001ee  f4107f00          TST      r0,#0x200             ;663
0001f2  d008              BEQ      |L27.518|
0001f4  4832              LDR      r0,|L27.704|
0001f6  6b80              LDR      r0,[r0,#0x38]         ;665
0001f8  f4407000          ORR      r0,r0,#0x200          ;665
0001fc  4930              LDR      r1,|L27.704|
0001fe  6388              STR      r0,[r1,#0x38]         ;665
000200  2007              MOVS     r0,#7                 ;666
000202  e711              B        |L27.40|
000204  e004              B        |L27.528|
                  |L27.518|
000206  f24050ff          MOV      r0,#0x5ff             ;668
00020a  492d              LDR      r1,|L27.704|
00020c  6388              STR      r0,[r1,#0x38]         ;668
00020e  e03f              B        |L27.656|
                  |L27.528|
000210  4830              LDR      r0,|L27.724|
000212  7800              LDRB     r0,[r0,#0]            ;669  ; DeviceMode
000214  2801              CMP      r0,#1                 ;669
000216  d13b              BNE      |L27.656|
000218  2000              MOVS     r0,#0                 ;671
00021a  4930              LDR      r1,|L27.732|
00021c  7008              STRB     r0,[r1,#0]            ;671
00021e  492c              LDR      r1,|L27.720|
000220  7008              STRB     r0,[r1,#0]            ;672
000222  492f              LDR      r1,|L27.736|
000224  7008              STRB     r0,[r1,#0]            ;673
000226  4826              LDR      r0,|L27.704|
000228  6bc0              LDR      r0,[r0,#0x3c]         ;674
00022a  f240311a          MOV      r1,#0x31a             ;674
00022e  4308              ORRS     r0,r0,r1              ;674
000230  4923              LDR      r1,|L27.704|
000232  63c8              STR      r0,[r1,#0x3c]         ;674
000234  2201              MOVS     r2,#1                 ;675
000236  4629              MOV      r1,r5                 ;675
000238  4658              MOV      r0,r11                ;675
00023a  f7fffffe          BL       SD_DMA_Config
00023e  4820              LDR      r0,|L27.704|
000240  6ac0              LDR      r0,[r0,#0x2c]         ;676
000242  f0400008          ORR      r0,r0,#8              ;676
000246  491e              LDR      r1,|L27.704|
000248  62c8              STR      r0,[r1,#0x2c]         ;676
00024a  4c26              LDR      r4,|L27.740|
00024c  e000              B        |L27.592|
                  |L27.590|
00024e  1e64              SUBS     r4,r4,#1              ;678
                  |L27.592|
000250  4825              LDR      r0,|L27.744|
000252  6800              LDR      r0,[r0,#0]            ;678
000254  f4105f00          TST      r0,#0x2000            ;678
000258  d101              BNE      |L27.606|
00025a  2c00              CMP      r4,#0                 ;678
00025c  d1f7              BNE      |L27.590|
                  |L27.606|
00025e  b91c              CBNZ     r4,|L27.616|
000260  f7fffffe          BL       SD_Init
000264  2004              MOVS     r0,#4                 ;682
000266  e6df              B        |L27.40|
                  |L27.616|
000268  4c1e              LDR      r4,|L27.740|
00026a  e000              B        |L27.622|
                  |L27.620|
00026c  1e64              SUBS     r4,r4,#1              ;685
                  |L27.622|
00026e  481c              LDR      r0,|L27.736|
000270  7800              LDRB     r0,[r0,#0]            ;685  ; TransferEnd
000272  b920              CBNZ     r0,|L27.638|
000274  4819              LDR      r0,|L27.732|
000276  7800              LDRB     r0,[r0,#0]            ;685  ; TransferError
000278  b908              CBNZ     r0,|L27.638|
00027a  2c00              CMP      r4,#0                 ;685
00027c  d1f6              BNE      |L27.620|
                  |L27.638|
00027e  b90c              CBNZ     r4,|L27.644|
000280  2004              MOVS     r0,#4                 ;686
000282  e6d1              B        |L27.40|
                  |L27.644|
000284  4815              LDR      r0,|L27.732|
000286  7800              LDRB     r0,[r0,#0]            ;687  ; TransferError
000288  b110              CBZ      r0,|L27.656|
00028a  4814              LDR      r0,|L27.732|
00028c  7800              LDRB     r0,[r0,#0]            ;687  ; TransferError
00028e  e6cb              B        |L27.40|
                  |L27.656|
000290  f24050ff          MOV      r0,#0x5ff             ;689
000294  490a              LDR      r1,|L27.704|
000296  6388              STR      r0,[r1,#0x38]         ;689
000298  a802              ADD      r0,sp,#8              ;690
00029a  f7fffffe          BL       IsCardProgramming
00029e  4606              MOV      r6,r0                 ;690
0002a0  e003              B        |L27.682|
                  |L27.674|
0002a2  a802              ADD      r0,sp,#8              ;693
0002a4  f7fffffe          BL       IsCardProgramming
0002a8  4606              MOV      r6,r0                 ;693
                  |L27.682|
0002aa  b93e              CBNZ     r6,|L27.700|
0002ac  f89d0008          LDRB     r0,[sp,#8]            ;691
0002b0  2807              CMP      r0,#7                 ;691
0002b2  d0f6              BEQ      |L27.674|
0002b4  f89d0008          LDRB     r0,[sp,#8]            ;691
0002b8  2806              CMP      r0,#6                 ;691
0002ba  d0f2              BEQ      |L27.674|
                  |L27.700|
0002bc  4630              MOV      r0,r6                 ;695
0002be  e6b3              B        |L27.40|
;;;697    //SD卡写多个块 
                          ENDP

                  |L27.704|
                          DCD      0x40018000
                  |L27.708|
                          DCD      0x000fffff
                  |L27.712|
                          DCD      CardType
                  |L27.716|
                          DCD      ||RCA||
                  |L27.720|
                          DCD      StopCondition
                  |L27.724|
                          DCD      DeviceMode
                  |L27.728|
                          DCD      0x40018080
                  |L27.732|
                          DCD      TransferError
                  |L27.736|
                          DCD      TransferEnd
                  |L27.740|
                          DCD      0x0002ffff
                  |L27.744|
                          DCD      0x40020400

                          AREA ||i.SD_WriteDisk||, CODE, READONLY, ALIGN=2

                  SD_WriteDisk PROC
;;;1198   //返回值:错误状态;0,正常;其他,错误代码;	
;;;1199   u8 SD_WriteDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1200   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1201   	u8 sta=SD_OK;
00000a  f04f0800          MOV      r8,#0
;;;1202   	u8 n;
;;;1203   	if(CardType!=SDIO_STD_CAPACITY_SD_CARD_V1_1)sector<<=9;
00000e  4819              LDR      r0,|L28.116|
000010  7800              LDRB     r0,[r0,#0]  ; CardType
000012  b100              CBZ      r0,|L28.22|
000014  027f              LSLS     r7,r7,#9
                  |L28.22|
;;;1204   	if((u32)buf%4!=0)
000016  f0140f03          TST      r4,#3
00001a  d017              BEQ      |L28.76|
;;;1205   	{
;;;1206   	 	for(n=0;n<cnt;n++)
00001c  2600              MOVS     r6,#0
00001e  e012              B        |L28.70|
                  |L28.32|
;;;1207   		{
;;;1208   			memcpy(SDIO_DATA_BUFFER,buf,512);
000020  f44f7200          MOV      r2,#0x200
000024  4621              MOV      r1,r4
000026  4814              LDR      r0,|L28.120|
000028  f7fffffe          BL       __aeabi_memcpy
;;;1209   		 	sta=SD_WriteBlock(SDIO_DATA_BUFFER,sector+512*n,512);//单个sector的写操作
00002c  f44f7000          MOV      r0,#0x200
000030  fb007106          MLA      r1,r0,r6,r7
000034  4602              MOV      r2,r0
000036  4810              LDR      r0,|L28.120|
000038  f7fffffe          BL       SD_WriteBlock
00003c  4680              MOV      r8,r0
;;;1210   			buf+=512;
00003e  f5047400          ADD      r4,r4,#0x200
000042  1c70              ADDS     r0,r6,#1              ;1206
000044  b2c6              UXTB     r6,r0                 ;1206
                  |L28.70|
000046  42ae              CMP      r6,r5                 ;1206
000048  dbea              BLT      |L28.32|
00004a  e010              B        |L28.110|
                  |L28.76|
;;;1211   		} 
;;;1212   	}else
;;;1213   	{
;;;1214   		if(cnt==1)sta=SD_WriteBlock(buf,sector,512);    	//单个sector的写操作
00004c  2d01              CMP      r5,#1
00004e  d106              BNE      |L28.94|
000050  026a              LSLS     r2,r5,#9
000052  4639              MOV      r1,r7
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       SD_WriteBlock
00005a  4680              MOV      r8,r0
00005c  e007              B        |L28.110|
                  |L28.94|
;;;1215   		else sta=SD_WriteMultiBlocks(buf,sector,512,cnt);	//多个sector  
00005e  462b              MOV      r3,r5
000060  f44f7200          MOV      r2,#0x200
000064  4639              MOV      r1,r7
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SD_WriteMultiBlocks
00006c  4680              MOV      r8,r0
                  |L28.110|
;;;1216   	}
;;;1217   	return sta;
00006e  4640              MOV      r0,r8
;;;1218   }
000070  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L28.116|
                          DCD      CardType
                  |L28.120|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;702    //返回值:错误状态												   
;;;703    SD_Error SD_WriteMultiBlocks(u8 *buf,u32 addr,u16 blksize,u32 nblks)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;704    {
000004  b083              SUB      sp,sp,#0xc
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;705    	SD_Error errorstatus = SD_OK;
00000a  2600              MOVS     r6,#0
;;;706    	u8  power = 0, cardstate = 0;
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
000010  9001              STR      r0,[sp,#4]
;;;707    	u32 timeout=0,bytestransferred=0;
000012  2700              MOVS     r7,#0
000014  4680              MOV      r8,r0
;;;708    	u32 count = 0, restwords = 0;
000016  4681              MOV      r9,r0
000018  9000              STR      r0,[sp,#0]
;;;709    	u32 tlen=nblks*blksize;				//总长度(字节)
00001a  fb05fb04          MUL      r11,r5,r4
;;;710    	u32 *tempbuff = (u32*)buf;  
00001e  f8dda00c          LDR      r10,[sp,#0xc]
;;;711      	if(buf==NULL)return SD_INVALID_PARAMETER; //参数错误  
000022  f8dda00c          LDR      r10,[sp,#0xc]
000026  f1ba0f00          CMP      r10,#0
00002a  d103              BNE      |L29.52|
00002c  2026              MOVS     r0,#0x26
                  |L29.46|
;;;712      	SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)   
;;;713      	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,0,0,0);	//清除DPSM状态机配置
;;;714    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;715     	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;716    	{
;;;717    		blksize=512;
;;;718    		addr>>=9;
;;;719    	}    
;;;720    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;721    	{
;;;722    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;723    		SDIO_Send_Cmd(SD_CMD_SET_BLOCKLEN,1,blksize);	//发送CMD16+设置数据长度为blksize,短响应 	   
;;;724    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;725    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;726    	}else return SD_INVALID_PARAMETER;	 
;;;727    	if(nblks>1)
;;;728    	{					  
;;;729    		if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;   
;;;730         	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;731        	{
;;;732    			//提高性能
;;;733    	 	   	SDIO_Send_Cmd(SD_CMD_APP_CMD,1,(u32)RCA<<16);	//发送ACMD55,短响应 	   
;;;734    			errorstatus=CmdResp1Error(SD_CMD_APP_CMD);		//等待R1响应   		   
;;;735    			if(errorstatus!=SD_OK)return errorstatus;				    
;;;736    	 	   	SDIO_Send_Cmd(SD_CMD_SET_BLOCK_COUNT,1,nblks);	//发送CMD23,设置块数量,短响应 	   
;;;737    			errorstatus=CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);//等待R1响应   		   
;;;738    			if(errorstatus!=SD_OK)return errorstatus;				    
;;;739    		} 
;;;740    		SDIO_Send_Cmd(SD_CMD_WRITE_MULT_BLOCK,1,addr);		//发送CMD25,多块写指令,短响应 	   
;;;741    		errorstatus=CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);	//等待R1响应   		   
;;;742    		if(errorstatus!=SD_OK)return errorstatus;
;;;743     	 	SDIO_Send_Data_Cfg(SD_DATATIMEOUT,nblks*blksize,power,0);//blksize, 控制器到卡	
;;;744    	    if(DeviceMode==SD_POLLING_MODE)
;;;745    	    {
;;;746    			while(!(SDIO->STA&((1<<4)|(1<<1)|(1<<8)|(1<<3)|(1<<9))))//下溢/CRC/数据结束/超时/起始位错误
;;;747    			{
;;;748    				if(SDIO->STA&(1<<14))							//发送区半空,表示至少存了8字(32字节)
;;;749    				{	  
;;;750    					if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;751    					{
;;;752    						restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;753    						for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;754    						{
;;;755    							SDIO->FIFO=*tempbuff;
;;;756    						}
;;;757    					}else 										//发送区半空,可以发送至少8字(32字节)数据
;;;758    					{
;;;759    						for(count=0;count<SD_HALFFIFO;count++)
;;;760    						{
;;;761    							SDIO->FIFO=*(tempbuff+count);
;;;762    						}
;;;763    						tempbuff+=SD_HALFFIFO;
;;;764    						bytestransferred+=SD_HALFFIFOBYTES;
;;;765    					} 
;;;766    				}
;;;767    			} 
;;;768    			if(SDIO->STA&(1<<3))		//数据超时错误
;;;769    			{										   
;;;770    		 		SDIO->ICR|=1<<3; 		//清错误标志
;;;771    				return SD_DATA_TIMEOUT;
;;;772    		 	}else if(SDIO->STA&(1<<1))	//数据块CRC错误
;;;773    			{
;;;774    		 		SDIO->ICR|=1<<1; 		//清错误标志
;;;775    				return SD_DATA_CRC_FAIL;		   
;;;776    			}else if(SDIO->STA&(1<<4)) 	//接收fifo下溢错误
;;;777    			{
;;;778    		 		SDIO->ICR|=1<<4; 		//清错误标志
;;;779    				return SD_TX_UNDERRUN;		 
;;;780    			}else if(SDIO->STA&(1<<9)) 	//接收起始位错误
;;;781    			{
;;;782    		 		SDIO->ICR|=1<<9; 		//清错误标志
;;;783    				return SD_START_BIT_ERR;		 
;;;784    			}   										   
;;;785    			if(SDIO->STA&(1<<8))		//发送结束
;;;786    			{															 
;;;787    				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;788    				{
;;;789    					SDIO_Send_Cmd(SD_CMD_STOP_TRANSMISSION,1,0);		//发送CMD12+结束传输 	   
;;;790    					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;791    					if(errorstatus!=SD_OK)return errorstatus;	 
;;;792    				}
;;;793    			}
;;;794    	 		SDIO->ICR=0X5FF;	 		//清除所有标记 
;;;795    	    }else if(DeviceMode==SD_DMA_MODE)
;;;796    		{
;;;797    	   		TransferError=SD_OK;
;;;798    			StopCondition=1;			//多块写,需要发送停止传输指令 
;;;799    			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;800    			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;801    			SD_DMA_Config((u32*)buf,nblks*blksize,1);		//SDIO DMA配置
;;;802    	 	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能. 
;;;803    			timeout=SDIO_DATATIMEOUT;
;;;804    	 		while(((DMA2->ISR&0X2000)==RESET)&&timeout)timeout--;//等待传输完成 
;;;805    			if(timeout==0)	 								//超时
;;;806    			{									  
;;;807      				SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;808    	 			return SD_DATA_TIMEOUT;			//超时	 
;;;809    	 		}
;;;810    			timeout=SDIO_DATATIMEOUT;
;;;811    			while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;812    	 		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;813    	 		if(TransferError!=SD_OK)return TransferError;	 
;;;814    		}
;;;815      	}
;;;816     	SDIO->ICR=0X5FF;	 		//清除所有标记
;;;817     	errorstatus=IsCardProgramming(&cardstate);
;;;818     	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;819    	{
;;;820    		errorstatus=IsCardProgramming(&cardstate);
;;;821    	}   
;;;822    	return errorstatus;	   
;;;823    }
00002e  b007              ADD      sp,sp,#0x1c
000030  e8bd8ff0          POP      {r4-r11,pc}
                  |L29.52|
000034  2000              MOVS     r0,#0                 ;712
000036  49b3              LDR      r1,|L29.772|
000038  62c8              STR      r0,[r1,#0x2c]         ;712
00003a  2300              MOVS     r3,#0                 ;713
00003c  461a              MOV      r2,r3                 ;713
00003e  4619              MOV      r1,r3                 ;713
000040  48b1              LDR      r0,|L29.776|
000042  f7fffffe          BL       SDIO_Send_Data_Cfg
000046  48af              LDR      r0,|L29.772|
000048  6940              LDR      r0,[r0,#0x14]         ;714
00004a  f0107f00          TST      r0,#0x2000000         ;714
00004e  d001              BEQ      |L29.84|
000050  200e              MOVS     r0,#0xe               ;714
000052  e7ec              B        |L29.46|
                  |L29.84|
000054  48ad              LDR      r0,|L29.780|
000056  7800              LDRB     r0,[r0,#0]            ;715  ; CardType
000058  2802              CMP      r0,#2                 ;715
00005a  d103              BNE      |L29.100|
00005c  0204              LSLS     r4,r0,#8              ;717
00005e  9804              LDR      r0,[sp,#0x10]         ;718
000060  0a40              LSRS     r0,r0,#9              ;718
000062  9004              STR      r0,[sp,#0x10]         ;718
                  |L29.100|
000064  2c00              CMP      r4,#0                 ;720
000066  dd15              BLE      |L29.148|
000068  f5b46f00          CMP      r4,#0x800             ;720
00006c  dc12              BGT      |L29.148|
00006e  1e60              SUBS     r0,r4,#1              ;720
000070  4220              TST      r0,r4                 ;720
000072  d10f              BNE      |L29.148|
000074  4620              MOV      r0,r4                 ;722
000076  f7fffffe          BL       convert_from_bytes_to_power_of_two
00007a  9002              STR      r0,[sp,#8]            ;722
00007c  4622              MOV      r2,r4                 ;723
00007e  2101              MOVS     r1,#1                 ;723
000080  2010              MOVS     r0,#0x10              ;723
000082  f7fffffe          BL       SDIO_Send_Cmd
000086  2010              MOVS     r0,#0x10              ;724
000088  f7fffffe          BL       CmdResp1Error
00008c  4606              MOV      r6,r0                 ;724
00008e  b11e              CBZ      r6,|L29.152|
000090  4630              MOV      r0,r6                 ;725
000092  e7cc              B        |L29.46|
                  |L29.148|
000094  2026              MOVS     r0,#0x26              ;726
000096  e7ca              B        |L29.46|
                  |L29.152|
000098  2d01              CMP      r5,#1                 ;727
00009a  d96e              BLS      |L29.378|
00009c  fb05f004          MUL      r0,r5,r4              ;729
0000a0  f1b07f00          CMP      r0,#0x2000000         ;729
0000a4  d301              BCC      |L29.170|
0000a6  2026              MOVS     r0,#0x26              ;729
0000a8  e7c1              B        |L29.46|
                  |L29.170|
0000aa  4898              LDR      r0,|L29.780|
0000ac  7800              LDRB     r0,[r0,#0]            ;730  ; CardType
0000ae  b138              CBZ      r0,|L29.192|
0000b0  4896              LDR      r0,|L29.780|
0000b2  7800              LDRB     r0,[r0,#0]            ;730  ; CardType
0000b4  2801              CMP      r0,#1                 ;730
0000b6  d003              BEQ      |L29.192|
0000b8  4894              LDR      r0,|L29.780|
0000ba  7800              LDRB     r0,[r0,#0]            ;730  ; CardType
0000bc  2802              CMP      r0,#2                 ;730
0000be  d119              BNE      |L29.244|
                  |L29.192|
0000c0  4893              LDR      r0,|L29.784|
0000c2  8800              LDRH     r0,[r0,#0]            ;733  ; RCA
0000c4  0402              LSLS     r2,r0,#16             ;733
0000c6  2101              MOVS     r1,#1                 ;733
0000c8  2037              MOVS     r0,#0x37              ;733
0000ca  f7fffffe          BL       SDIO_Send_Cmd
0000ce  2037              MOVS     r0,#0x37              ;734
0000d0  f7fffffe          BL       CmdResp1Error
0000d4  4606              MOV      r6,r0                 ;734
0000d6  b10e              CBZ      r6,|L29.220|
0000d8  4630              MOV      r0,r6                 ;735
0000da  e7a8              B        |L29.46|
                  |L29.220|
0000dc  462a              MOV      r2,r5                 ;736
0000de  2101              MOVS     r1,#1                 ;736
0000e0  2017              MOVS     r0,#0x17              ;736
0000e2  f7fffffe          BL       SDIO_Send_Cmd
0000e6  2017              MOVS     r0,#0x17              ;737
0000e8  f7fffffe          BL       CmdResp1Error
0000ec  4606              MOV      r6,r0                 ;737
0000ee  b10e              CBZ      r6,|L29.244|
0000f0  4630              MOV      r0,r6                 ;738
0000f2  e79c              B        |L29.46|
                  |L29.244|
0000f4  2101              MOVS     r1,#1                 ;740
0000f6  2019              MOVS     r0,#0x19              ;740
0000f8  9a04              LDR      r2,[sp,#0x10]         ;740
0000fa  f7fffffe          BL       SDIO_Send_Cmd
0000fe  2019              MOVS     r0,#0x19              ;741
000100  f7fffffe          BL       CmdResp1Error
000104  4606              MOV      r6,r0                 ;741
000106  b10e              CBZ      r6,|L29.268|
000108  4630              MOV      r0,r6                 ;742
00010a  e790              B        |L29.46|
                  |L29.268|
00010c  fb05f104          MUL      r1,r5,r4              ;743
000110  2300              MOVS     r3,#0                 ;743
000112  487d              LDR      r0,|L29.776|
000114  9a02              LDR      r2,[sp,#8]            ;743
000116  f7fffffe          BL       SDIO_Send_Data_Cfg
00011a  487e              LDR      r0,|L29.788|
00011c  7800              LDRB     r0,[r0,#0]            ;744  ; DeviceMode
00011e  2800              CMP      r0,#0                 ;744
000120  d173              BNE      |L29.522|
000122  e038              B        |L29.406|
                  |L29.292|
000124  4877              LDR      r0,|L29.772|
000126  6b40              LDR      r0,[r0,#0x34]         ;748
000128  f4104f80          TST      r0,#0x4000            ;748
00012c  d033              BEQ      |L29.406|
00012e  ebab0008          SUB      r0,r11,r8             ;750
000132  2820              CMP      r0,#0x20              ;750
000134  d21e              BCS      |L29.372|
000136  ebab0008          SUB      r0,r11,r8             ;752
00013a  f0100f03          TST      r0,#3                 ;752
00013e  d103              BNE      |L29.328|
000140  ebab0008          SUB      r0,r11,r8             ;752
000144  0880              LSRS     r0,r0,#2              ;752
000146  e003              B        |L29.336|
                  |L29.328|
000148  ebab0008          SUB      r0,r11,r8             ;752
00014c  0880              LSRS     r0,r0,#2              ;752
00014e  1c40              ADDS     r0,r0,#1              ;752
                  |L29.336|
000150  9000              STR      r0,[sp,#0]            ;752
000152  f04f0900          MOV      r9,#0                 ;753
000156  e009              B        |L29.364|
                  |L29.344|
000158  496f              LDR      r1,|L29.792|
00015a  f8da0000          LDR      r0,[r10,#0]           ;755
00015e  6008              STR      r0,[r1,#0]            ;755
000160  f1090901          ADD      r9,r9,#1              ;753
000164  f10a0a04          ADD      r10,r10,#4            ;753
000168  f1080804          ADD      r8,r8,#4              ;753
                  |L29.364|
00016c  9800              LDR      r0,[sp,#0]            ;753
00016e  4581              CMP      r9,r0                 ;753
000170  d211              BCS      |L29.406|
000172  e7f1              B        |L29.344|
                  |L29.372|
000174  f04f0900          MOV      r9,#0                 ;759
000178  e006              B        |L29.392|
                  |L29.378|
00017a  e0ab              B        |L29.724|
                  |L29.380|
00017c  f85a0029          LDR      r0,[r10,r9,LSL #2]    ;761
000180  4965              LDR      r1,|L29.792|
000182  6008              STR      r0,[r1,#0]            ;761
000184  f1090901          ADD      r9,r9,#1              ;759
                  |L29.392|
000188  f1b90f08          CMP      r9,#8                 ;759
00018c  d3f6              BCC      |L29.380|
00018e  f10a0a20          ADD      r10,r10,#0x20         ;763
000192  f1080820          ADD      r8,r8,#0x20           ;764
                  |L29.406|
000196  485b              LDR      r0,|L29.772|
000198  6b40              LDR      r0,[r0,#0x34]         ;746
00019a  f240311a          MOV      r1,#0x31a             ;746
00019e  4208              TST      r0,r1                 ;746
0001a0  d0c0              BEQ      |L29.292|
0001a2  4858              LDR      r0,|L29.772|
0001a4  6b40              LDR      r0,[r0,#0x34]         ;768
0001a6  f0100f08          TST      r0,#8                 ;768
0001aa  d007              BEQ      |L29.444|
0001ac  4855              LDR      r0,|L29.772|
0001ae  6b80              LDR      r0,[r0,#0x38]         ;770
0001b0  f0400008          ORR      r0,r0,#8              ;770
0001b4  4953              LDR      r1,|L29.772|
0001b6  6388              STR      r0,[r1,#0x38]         ;770
0001b8  2004              MOVS     r0,#4                 ;771
0001ba  e738              B        |L29.46|
                  |L29.444|
0001bc  4851              LDR      r0,|L29.772|
0001be  6b40              LDR      r0,[r0,#0x34]         ;772
0001c0  f0100f02          TST      r0,#2                 ;772
0001c4  d007              BEQ      |L29.470|
0001c6  484f              LDR      r0,|L29.772|
0001c8  6b80              LDR      r0,[r0,#0x38]         ;774
0001ca  f0400002          ORR      r0,r0,#2              ;774
0001ce  494d              LDR      r1,|L29.772|
0001d0  6388              STR      r0,[r1,#0x38]         ;774
0001d2  2002              MOVS     r0,#2                 ;775
0001d4  e72b              B        |L29.46|
                  |L29.470|
0001d6  484b              LDR      r0,|L29.772|
0001d8  6b40              LDR      r0,[r0,#0x34]         ;776
0001da  f0100f10          TST      r0,#0x10              ;776
0001de  d007              BEQ      |L29.496|
0001e0  4848              LDR      r0,|L29.772|
0001e2  6b80              LDR      r0,[r0,#0x38]         ;778
0001e4  f0400010          ORR      r0,r0,#0x10           ;778
0001e8  4946              LDR      r1,|L29.772|
0001ea  6388              STR      r0,[r1,#0x38]         ;778
0001ec  2005              MOVS     r0,#5                 ;779
0001ee  e71e              B        |L29.46|
                  |L29.496|
0001f0  4844              LDR      r0,|L29.772|
0001f2  6b40              LDR      r0,[r0,#0x34]         ;780
0001f4  f4107f00          TST      r0,#0x200             ;780
0001f8  d008              BEQ      |L29.524|
0001fa  4842              LDR      r0,|L29.772|
0001fc  6b80              LDR      r0,[r0,#0x38]         ;782
0001fe  f4407000          ORR      r0,r0,#0x200          ;782
000202  4940              LDR      r1,|L29.772|
000204  6388              STR      r0,[r1,#0x38]         ;782
000206  2007              MOVS     r0,#7                 ;783
000208  e711              B        |L29.46|
                  |L29.522|
00020a  e020              B        |L29.590|
                  |L29.524|
00020c  483d              LDR      r0,|L29.772|
00020e  6b40              LDR      r0,[r0,#0x34]         ;785
000210  f4107f80          TST      r0,#0x100             ;785
000214  d016              BEQ      |L29.580|
000216  483d              LDR      r0,|L29.780|
000218  7800              LDRB     r0,[r0,#0]            ;787  ; CardType
00021a  b138              CBZ      r0,|L29.556|
00021c  483b              LDR      r0,|L29.780|
00021e  7800              LDRB     r0,[r0,#0]            ;787  ; CardType
000220  2801              CMP      r0,#1                 ;787
000222  d003              BEQ      |L29.556|
000224  4839              LDR      r0,|L29.780|
000226  7800              LDRB     r0,[r0,#0]            ;787  ; CardType
000228  2802              CMP      r0,#2                 ;787
00022a  d10b              BNE      |L29.580|
                  |L29.556|
00022c  2200              MOVS     r2,#0                 ;789
00022e  2101              MOVS     r1,#1                 ;789
000230  200c              MOVS     r0,#0xc               ;789
000232  f7fffffe          BL       SDIO_Send_Cmd
000236  200c              MOVS     r0,#0xc               ;790
000238  f7fffffe          BL       CmdResp1Error
00023c  4606              MOV      r6,r0                 ;790
00023e  b10e              CBZ      r6,|L29.580|
000240  4630              MOV      r0,r6                 ;791
000242  e6f4              B        |L29.46|
                  |L29.580|
000244  f24050ff          MOV      r0,#0x5ff             ;794
000248  492e              LDR      r1,|L29.772|
00024a  6388              STR      r0,[r1,#0x38]         ;794
00024c  e042              B        |L29.724|
                  |L29.590|
00024e  4831              LDR      r0,|L29.788|
000250  7800              LDRB     r0,[r0,#0]            ;795  ; DeviceMode
000252  2801              CMP      r0,#1                 ;795
000254  d13e              BNE      |L29.724|
000256  2000              MOVS     r0,#0                 ;797
000258  4930              LDR      r1,|L29.796|
00025a  7008              STRB     r0,[r1,#0]            ;797
00025c  2001              MOVS     r0,#1                 ;798
00025e  4930              LDR      r1,|L29.800|
000260  7008              STRB     r0,[r1,#0]            ;798
000262  2000              MOVS     r0,#0                 ;799
000264  492f              LDR      r1,|L29.804|
000266  7008              STRB     r0,[r1,#0]            ;799
000268  4826              LDR      r0,|L29.772|
00026a  6bc0              LDR      r0,[r0,#0x3c]         ;800
00026c  f240311a          MOV      r1,#0x31a             ;800
000270  4308              ORRS     r0,r0,r1              ;800
000272  4924              LDR      r1,|L29.772|
000274  63c8              STR      r0,[r1,#0x3c]         ;800
000276  fb05f104          MUL      r1,r5,r4              ;801
00027a  2201              MOVS     r2,#1                 ;801
00027c  9803              LDR      r0,[sp,#0xc]          ;801
00027e  f7fffffe          BL       SD_DMA_Config
000282  4820              LDR      r0,|L29.772|
000284  6ac0              LDR      r0,[r0,#0x2c]         ;802
000286  f0400008          ORR      r0,r0,#8              ;802
00028a  491e              LDR      r1,|L29.772|
00028c  62c8              STR      r0,[r1,#0x2c]         ;802
00028e  4f26              LDR      r7,|L29.808|
000290  e000              B        |L29.660|
                  |L29.658|
000292  1e7f              SUBS     r7,r7,#1              ;804
                  |L29.660|
000294  4825              LDR      r0,|L29.812|
000296  6800              LDR      r0,[r0,#0]            ;804
000298  f4105f00          TST      r0,#0x2000            ;804
00029c  d101              BNE      |L29.674|
00029e  2f00              CMP      r7,#0                 ;804
0002a0  d1f7              BNE      |L29.658|
                  |L29.674|
0002a2  b91f              CBNZ     r7,|L29.684|
0002a4  f7fffffe          BL       SD_Init
0002a8  2004              MOVS     r0,#4                 ;808
0002aa  e6c0              B        |L29.46|
                  |L29.684|
0002ac  4f1e              LDR      r7,|L29.808|
0002ae  e000              B        |L29.690|
                  |L29.688|
0002b0  1e7f              SUBS     r7,r7,#1              ;811
                  |L29.690|
0002b2  481c              LDR      r0,|L29.804|
0002b4  7800              LDRB     r0,[r0,#0]            ;811  ; TransferEnd
0002b6  b920              CBNZ     r0,|L29.706|
0002b8  4818              LDR      r0,|L29.796|
0002ba  7800              LDRB     r0,[r0,#0]            ;811  ; TransferError
0002bc  b908              CBNZ     r0,|L29.706|
0002be  2f00              CMP      r7,#0                 ;811
0002c0  d1f6              BNE      |L29.688|
                  |L29.706|
0002c2  b90f              CBNZ     r7,|L29.712|
0002c4  2004              MOVS     r0,#4                 ;812
0002c6  e6b2              B        |L29.46|
                  |L29.712|
0002c8  4814              LDR      r0,|L29.796|
0002ca  7800              LDRB     r0,[r0,#0]            ;813  ; TransferError
0002cc  b110              CBZ      r0,|L29.724|
0002ce  4813              LDR      r0,|L29.796|
0002d0  7800              LDRB     r0,[r0,#0]            ;813  ; TransferError
0002d2  e6ac              B        |L29.46|
                  |L29.724|
0002d4  f24050ff          MOV      r0,#0x5ff             ;816
0002d8  490a              LDR      r1,|L29.772|
0002da  6388              STR      r0,[r1,#0x38]         ;816
0002dc  a801              ADD      r0,sp,#4              ;817
0002de  f7fffffe          BL       IsCardProgramming
0002e2  4606              MOV      r6,r0                 ;817
0002e4  e003              B        |L29.750|
                  |L29.742|
0002e6  a801              ADD      r0,sp,#4              ;820
0002e8  f7fffffe          BL       IsCardProgramming
0002ec  4606              MOV      r6,r0                 ;820
                  |L29.750|
0002ee  b93e              CBNZ     r6,|L29.768|
0002f0  f89d0004          LDRB     r0,[sp,#4]            ;818
0002f4  2807              CMP      r0,#7                 ;818
0002f6  d0f6              BEQ      |L29.742|
0002f8  f89d0004          LDRB     r0,[sp,#4]            ;818
0002fc  2806              CMP      r0,#6                 ;818
0002fe  d0f2              BEQ      |L29.742|
                  |L29.768|
000300  4630              MOV      r0,r6                 ;822
000302  e694              B        |L29.46|
;;;824    //SDIO中断服务函数		  
                          ENDP

                  |L29.772|
                          DCD      0x40018000
                  |L29.776|
                          DCD      0x000fffff
                  |L29.780|
                          DCD      CardType
                  |L29.784|
                          DCD      ||RCA||
                  |L29.788|
                          DCD      DeviceMode
                  |L29.792|
                          DCD      0x40018080
                  |L29.796|
                          DCD      TransferError
                  |L29.800|
                          DCD      StopCondition
                  |L29.804|
                          DCD      TransferEnd
                  |L29.808|
                          DCD      0x0002ffff
                  |L29.812|
                          DCD      0x40020400

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;1137   //返回值:以2为底的指数值
;;;1138   u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes)
000000  4601              MOV      r1,r0
;;;1139   {
;;;1140   	u8 count=0;
000002  2000              MOVS     r0,#0
;;;1141   	while(NumberOfBytes!=1)
000004  e002              B        |L30.12|
                  |L30.6|
;;;1142   	{
;;;1143   		NumberOfBytes>>=1;
000006  1049              ASRS     r1,r1,#1
;;;1144   		count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L30.12|
00000c  2901              CMP      r1,#1                 ;1141
00000e  d1fa              BNE      |L30.6|
;;;1145   	}
;;;1146   	return count;
;;;1147   } 	 
000010  4770              BX       lr
;;;1148   //配置SDIO DMA  
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDCardInfo
                          %        88
                  SDIO_DATA_BUFFER
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
000008  01                DCB      0x01
                  StopCondition
000009  00                DCB      0x00
                  TransferError
00000a  00                DCB      0x00
                  TransferEnd
00000b  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\src\\bsp_sdio_sd.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_sdio_sd_c_4ab284f9____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_sdio_sd_c_4ab284f9____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_sdio_sd_c_4ab284f9____REVSH|
#line 128
|__asm___13_bsp_sdio_sd_c_4ab284f9____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
