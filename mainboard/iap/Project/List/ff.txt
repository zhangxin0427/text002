; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ff.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\User -I..\User\bsp\inc -I..\User\bsp -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\MALLOC -I..\FatFs\src -I..\FatFs\src\option -I..\Iap -I"E:\Program Files\MDK 4.74\ARM\RV31\INC" -I"E:\Program Files\MDK 4.74\ARM\CMSIS\Include" -I"E:\Program Files\MDK 4.74\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\ff.crf ..\FATFS\src\ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;2133   static
;;;2134   BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;2135   	FATFS* fs,	/* File system object */
;;;2136   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2137   )
;;;2138   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2139   	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
000006  2000              MOVS     r0,#0
000008  7120              STRB     r0,[r4,#4]
00000a  1e40              SUBS     r0,r0,#1
00000c  62e0              STR      r0,[r4,#0x2c]
;;;2140   	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       move_window
000016  b108              CBZ      r0,|L1.28|
;;;2141   		return 3;
000018  2003              MOVS     r0,#3
                  |L1.26|
;;;2142   
;;;2143   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
;;;2144   		return 2;
;;;2145   
;;;2146   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
;;;2147   		return 0;
;;;2148   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2149   		return 0;
;;;2150   
;;;2151   	return 1;
;;;2152   }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  f894122e          LDRB     r1,[r4,#0x22e]        ;2143
000020  f894022f          LDRB     r0,[r4,#0x22f]        ;2143
000024  ea412000          ORR      r0,r1,r0,LSL #8       ;2143
000028  f5a0412a          SUB      r1,r0,#0xaa00         ;2143
00002c  3955              SUBS     r1,r1,#0x55           ;2143
00002e  d001              BEQ      |L1.52|
000030  2002              MOVS     r0,#2                 ;2144
000032  e7f2              B        |L1.26|
                  |L1.52|
000034  f8940069          LDRB     r0,[r4,#0x69]         ;2146
000038  0601              LSLS     r1,r0,#24             ;2146
00003a  f8940068          LDRB     r0,[r4,#0x68]         ;2146
00003e  ea414100          ORR      r1,r1,r0,LSL #16      ;2146
000042  f8940067          LDRB     r0,[r4,#0x67]         ;2146
000046  ea412000          ORR      r0,r1,r0,LSL #8       ;2146
00004a  f8941066          LDRB     r1,[r4,#0x66]         ;2146
00004e  4308              ORRS     r0,r0,r1              ;2146
000050  f020407f          BIC      r0,r0,#0xff000000     ;2146
000054  490d              LDR      r1,|L1.140|
000056  4288              CMP      r0,r1                 ;2146
000058  d101              BNE      |L1.94|
00005a  2000              MOVS     r0,#0                 ;2147
00005c  e7dd              B        |L1.26|
                  |L1.94|
00005e  f8940085          LDRB     r0,[r4,#0x85]         ;2148
000062  0601              LSLS     r1,r0,#24             ;2148
000064  f8940084          LDRB     r0,[r4,#0x84]         ;2148
000068  ea414100          ORR      r1,r1,r0,LSL #16      ;2148
00006c  f8940083          LDRB     r0,[r4,#0x83]         ;2148
000070  ea412000          ORR      r0,r1,r0,LSL #8       ;2148
000074  f8941082          LDRB     r1,[r4,#0x82]         ;2148
000078  4308              ORRS     r0,r0,r1              ;2148
00007a  f020407f          BIC      r0,r0,#0xff000000     ;2148
00007e  4903              LDR      r1,|L1.140|
000080  4288              CMP      r0,r1                 ;2148
000082  d101              BNE      |L1.136|
000084  2000              MOVS     r0,#0                 ;2149
000086  e7c8              B        |L1.26|
                  |L1.136|
000088  2001              MOVS     r0,#1                 ;2151
00008a  e7c6              B        |L1.26|
;;;2153   
                          ENDP

                  |L1.140|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;595    static
;;;596    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;597    	while (*str && *str != chr) str++;
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c52              ADDS     r2,r2,#1
                  |L2.6|
000006  7810              LDRB     r0,[r2,#0]
000008  b110              CBZ      r0,|L2.16|
00000a  7810              LDRB     r0,[r2,#0]
00000c  4288              CMP      r0,r1
00000e  d1f9              BNE      |L2.4|
                  |L2.16|
;;;598    	return *str;
000010  7810              LDRB     r0,[r2,#0]
;;;599    }
000012  4770              BX       lr
;;;600    
                          ENDP


                          AREA ||i.clmt_clust||, CODE, READONLY, ALIGN=1

                  clmt_clust PROC
;;;1086   static
;;;1087   DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
000000  b570              PUSH     {r4-r6,lr}
;;;1088   	FIL* fp,		/* Pointer to the file object */
;;;1089   	DWORD ofs		/* File offset to be converted to cluster# */
;;;1090   )
;;;1091   {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
;;;1092   	DWORD cl, ncl, *tbl;
;;;1093   
;;;1094   
;;;1095   	tbl = fp->cltbl + 1;	/* Top of CLMT */
000006  6a58              LDR      r0,[r3,#0x24]
000008  1d02              ADDS     r2,r0,#4
;;;1096   	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
00000a  0a68              LSRS     r0,r5,#9
00000c  681e              LDR      r6,[r3,#0]
00000e  78b6              LDRB     r6,[r6,#2]
000010  fbb0f4f6          UDIV     r4,r0,r6
;;;1097   	for (;;) {
000014  bf00              NOP      
                  |L3.22|
;;;1098   		ncl = *tbl++;			/* Number of cluters in the fragment */
000016  ca02              LDM      r2!,{r1}
;;;1099   		if (!ncl) return 0;		/* End of table? (error) */
000018  b909              CBNZ     r1,|L3.30|
00001a  2000              MOVS     r0,#0
                  |L3.28|
;;;1100   		if (cl < ncl) break;	/* In this fragment? */
;;;1101   		cl -= ncl; tbl++;		/* Next fragment */
;;;1102   	}
;;;1103   	return cl + *tbl;	/* Return the cluster number */
;;;1104   }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  428c              CMP      r4,r1                 ;1100
000020  d200              BCS      |L3.36|
000022  e002              B        |L3.42|
                  |L3.36|
000024  1a64              SUBS     r4,r4,r1              ;1101
000026  1d12              ADDS     r2,r2,#4              ;1101
000028  e7f5              B        |L3.22|
                  |L3.42|
00002a  bf00              NOP                            ;1100
00002c  6810              LDR      r0,[r2,#0]            ;1103
00002e  4420              ADD      r0,r0,r4              ;1103
000030  e7f4              B        |L3.28|
;;;1105   #endif	/* _USE_FASTSEEK */
                          ENDP


                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;844    
;;;845    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  4602              MOV      r2,r0
;;;846    	FATFS* fs,		/* File system object */
;;;847    	DWORD clst		/* Cluster# to be converted */
;;;848    )
;;;849    {
;;;850    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;851    	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
000004  6950              LDR      r0,[r2,#0x14]
000006  1e80              SUBS     r0,r0,#2
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L4.16|
00000c  2000              MOVS     r0,#0
                  |L4.14|
;;;852    	return clst * fs->csize + fs->database;
;;;853    }
00000e  4770              BX       lr
                  |L4.16|
000010  7893              LDRB     r3,[r2,#2]            ;852
000012  6a90              LDR      r0,[r2,#0x28]         ;852
000014  fb010003          MLA      r0,r1,r3,r0           ;852
000018  e7f9              B        |L4.14|
;;;854    
                          ENDP


                          AREA ||i.cmp_lfn||, CODE, READONLY, ALIGN=2

                  cmp_lfn PROC
;;;1306   static
;;;1307   int cmp_lfn (			/* 1:Matched, 0:Not matched */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1308   	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
;;;1309   	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
;;;1310   )
;;;1311   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;1312   	UINT i, s;
;;;1313   	WCHAR wc, uc;
;;;1314   
;;;1315   
;;;1316   	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
000008  7820              LDRB     r0,[r4,#0]
00000a  f0200040          BIC      r0,r0,#0x40
00000e  1e40              SUBS     r0,r0,#1
000010  eb000180          ADD      r1,r0,r0,LSL #2
000014  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;1317   	s = 0; wc = 1;
000018  2700              MOVS     r7,#0
00001a  f04f0801          MOV      r8,#1
;;;1318   	do {
00001e  bf00              NOP      
                  |L5.32|
;;;1319   		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
000020  481a              LDR      r0,|L5.140|
000022  5dc0              LDRB     r0,[r0,r7]
000024  5c20              LDRB     r0,[r4,r0]
000026  4919              LDR      r1,|L5.140|
000028  5dc9              LDRB     r1,[r1,r7]
00002a  4421              ADD      r1,r1,r4
00002c  7849              LDRB     r1,[r1,#1]
00002e  ea402901          ORR      r9,r0,r1,LSL #8
;;;1320   		if (wc) {	/* Last character has not been processed */
000032  f1b80f00          CMP      r8,#0
000036  d010              BEQ      |L5.90|
;;;1321   			wc = ff_wtoupper(uc);		/* Convert it to upper case */
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       ff_wtoupper
00003e  4680              MOV      r8,r0
;;;1322   			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
000040  2eff              CMP      r6,#0xff
000042  d207              BCS      |L5.84|
000044  4631              MOV      r1,r6
000046  1c76              ADDS     r6,r6,#1
000048  f8350011          LDRH     r0,[r5,r1,LSL #1]
00004c  f7fffffe          BL       ff_wtoupper
000050  4540              CMP      r0,r8
000052  d008              BEQ      |L5.102|
                  |L5.84|
;;;1323   				return 0;				/* Not matched */
000054  2000              MOVS     r0,#0
                  |L5.86|
;;;1324   		} else {
;;;1325   			if (uc != 0xFFFF) return 0;	/* Check filler */
;;;1326   		}
;;;1327   	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
;;;1328   
;;;1329   	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
;;;1330   		return 0;
;;;1331   
;;;1332   	return 1;						/* The part of LFN matched */
;;;1333   }
000056  e8bd87f0          POP      {r4-r10,pc}
                  |L5.90|
00005a  f5a9407f          SUB      r0,r9,#0xff00         ;1325
00005e  38ff              SUBS     r0,r0,#0xff           ;1325
000060  d001              BEQ      |L5.102|
000062  2000              MOVS     r0,#0                 ;1325
000064  e7f7              B        |L5.86|
                  |L5.102|
000066  1c78              ADDS     r0,r7,#1              ;1327
000068  4607              MOV      r7,r0                 ;1327
00006a  280d              CMP      r0,#0xd               ;1327
00006c  d3d8              BCC      |L5.32|
00006e  7820              LDRB     r0,[r4,#0]            ;1329
000070  f0100f40          TST      r0,#0x40              ;1329
000074  d007              BEQ      |L5.134|
000076  f1b80f00          CMP      r8,#0                 ;1329
00007a  d004              BEQ      |L5.134|
00007c  f8350016          LDRH     r0,[r5,r6,LSL #1]     ;1329
000080  b108              CBZ      r0,|L5.134|
000082  2000              MOVS     r0,#0                 ;1330
000084  e7e7              B        |L5.86|
                  |L5.134|
000086  2001              MOVS     r0,#1                 ;1332
000088  e7e5              B        |L5.86|
;;;1334   
                          ENDP

00008a  0000              DCW      0x0000
                  |L5.140|
                          DCD      LfnOfs

                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;1024   static
;;;1025   DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1026   	FATFS* fs,			/* File system object */
;;;1027   	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;1028   )
;;;1029   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;1030   	DWORD cs, ncl, scl;
;;;1031   	FRESULT res;
;;;1032   
;;;1033   
;;;1034   	if (clst == 0) {		/* Create a new chain */
000008  f1b90f00          CMP      r9,#0
00000c  d106              BNE      |L6.28|
;;;1035   		scl = fs->last_clust;			/* Get suggested start point */
00000e  68e7              LDR      r7,[r4,#0xc]
;;;1036   		if (!scl || scl >= fs->n_fatent) scl = 1;
000010  b117              CBZ      r7,|L6.24|
000012  6960              LDR      r0,[r4,#0x14]
000014  42b8              CMP      r0,r7
000016  d815              BHI      |L6.68|
                  |L6.24|
000018  2701              MOVS     r7,#1
00001a  e013              B        |L6.68|
                  |L6.28|
;;;1037   	}
;;;1038   	else {					/* Stretch the current chain */
;;;1039   		cs = get_fat(fs, clst);			/* Check the cluster status */
00001c  4649              MOV      r1,r9
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       get_fat
000024  4606              MOV      r6,r0
;;;1040   		if (cs < 2) return 1;			/* Invalid value */
000026  2e02              CMP      r6,#2
000028  d202              BCS      |L6.48|
00002a  2001              MOVS     r0,#1
                  |L6.44|
;;;1041   		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
;;;1042   		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;1043   		scl = clst;
;;;1044   	}
;;;1045   
;;;1046   	ncl = scl;				/* Start cluster */
;;;1047   	for (;;) {
;;;1048   		ncl++;							/* Next cluster */
;;;1049   		if (ncl >= fs->n_fatent) {		/* Check wrap around */
;;;1050   			ncl = 2;
;;;1051   			if (ncl > scl) return 0;	/* No free cluster */
;;;1052   		}
;;;1053   		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1054   		if (cs == 0) break;				/* Found a free cluster */
;;;1055   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1056   			return cs;
;;;1057   		if (ncl == scl) return 0;		/* No free cluster */
;;;1058   	}
;;;1059   
;;;1060   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1061   	if (res == FR_OK && clst != 0) {
;;;1062   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1063   	}
;;;1064   	if (res == FR_OK) {
;;;1065   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1066   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1067   			fs->free_clust--;
;;;1068   			fs->fsi_flag |= 1;
;;;1069   		}
;;;1070   	} else {
;;;1071   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1072   	}
;;;1073   
;;;1074   	return ncl;		/* Return new cluster number or error code */
;;;1075   }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L6.48|
000030  1c70              ADDS     r0,r6,#1              ;1041
000032  d101              BNE      |L6.56|
000034  4630              MOV      r0,r6                 ;1041
000036  e7f9              B        |L6.44|
                  |L6.56|
000038  6960              LDR      r0,[r4,#0x14]         ;1042
00003a  42b0              CMP      r0,r6                 ;1042
00003c  d901              BLS      |L6.66|
00003e  4630              MOV      r0,r6                 ;1042
000040  e7f4              B        |L6.44|
                  |L6.66|
000042  464f              MOV      r7,r9                 ;1043
                  |L6.68|
000044  463d              MOV      r5,r7                 ;1046
000046  bf00              NOP                            ;1047
                  |L6.72|
000048  1c6d              ADDS     r5,r5,#1              ;1048
00004a  6960              LDR      r0,[r4,#0x14]         ;1049
00004c  42a8              CMP      r0,r5                 ;1049
00004e  d804              BHI      |L6.90|
000050  2502              MOVS     r5,#2                 ;1050
000052  42bd              CMP      r5,r7                 ;1051
000054  d901              BLS      |L6.90|
000056  2000              MOVS     r0,#0                 ;1051
000058  e7e8              B        |L6.44|
                  |L6.90|
00005a  4629              MOV      r1,r5                 ;1053
00005c  4620              MOV      r0,r4                 ;1053
00005e  f7fffffe          BL       get_fat
000062  4606              MOV      r6,r0                 ;1053
000064  b906              CBNZ     r6,|L6.104|
000066  e009              B        |L6.124|
                  |L6.104|
000068  1c70              ADDS     r0,r6,#1              ;1055
00006a  d001              BEQ      |L6.112|
00006c  2e01              CMP      r6,#1                 ;1055
00006e  d101              BNE      |L6.116|
                  |L6.112|
000070  4630              MOV      r0,r6                 ;1056
000072  e7db              B        |L6.44|
                  |L6.116|
000074  42bd              CMP      r5,r7                 ;1057
000076  d1e7              BNE      |L6.72|
000078  2000              MOVS     r0,#0                 ;1057
00007a  e7d7              B        |L6.44|
                  |L6.124|
00007c  bf00              NOP                            ;1054
00007e  f06f4270          MVN      r2,#0xf0000000        ;1060
000082  4629              MOV      r1,r5                 ;1060
000084  4620              MOV      r0,r4                 ;1060
000086  f7fffffe          BL       put_fat
00008a  4680              MOV      r8,r0                 ;1060
00008c  f1b80f00          CMP      r8,#0                 ;1061
000090  d108              BNE      |L6.164|
000092  f1b90f00          CMP      r9,#0                 ;1061
000096  d005              BEQ      |L6.164|
000098  462a              MOV      r2,r5                 ;1062
00009a  4649              MOV      r1,r9                 ;1062
00009c  4620              MOV      r0,r4                 ;1062
00009e  f7fffffe          BL       put_fat
0000a2  4680              MOV      r8,r0                 ;1062
                  |L6.164|
0000a4  f1b80f00          CMP      r8,#0                 ;1064
0000a8  d10b              BNE      |L6.194|
0000aa  60e5              STR      r5,[r4,#0xc]          ;1065
0000ac  6920              LDR      r0,[r4,#0x10]         ;1066
0000ae  1c40              ADDS     r0,r0,#1              ;1066
0000b0  d00f              BEQ      |L6.210|
0000b2  6920              LDR      r0,[r4,#0x10]         ;1067
0000b4  1e40              SUBS     r0,r0,#1              ;1067
0000b6  6120              STR      r0,[r4,#0x10]         ;1067
0000b8  7960              LDRB     r0,[r4,#5]            ;1068
0000ba  f0400001          ORR      r0,r0,#1              ;1068
0000be  7160              STRB     r0,[r4,#5]            ;1068
0000c0  e007              B        |L6.210|
                  |L6.194|
0000c2  f1b80f01          CMP      r8,#1                 ;1071
0000c6  d102              BNE      |L6.206|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;1071
0000cc  e000              B        |L6.208|
                  |L6.206|
0000ce  2001              MOVS     r0,#1                 ;1071
                  |L6.208|
0000d0  4605              MOV      r5,r0                 ;1071
                  |L6.210|
0000d2  4628              MOV      r0,r5                 ;1074
0000d4  e7aa              B        |L6.44|
;;;1076   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1802   static
;;;1803   FRESULT create_name (
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1804   	DIR* dp,			/* Pointer to the directory object */
;;;1805   	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
;;;1806   )
;;;1807   {
000004  b083              SUB      sp,sp,#0xc
000006  4682              MOV      r10,r0
;;;1808   #if _USE_LFN	/* LFN configuration */
;;;1809   	BYTE b, cf;
;;;1810   	WCHAR w, *lfn;
;;;1811   	UINT i, ni, si, di;
;;;1812   	const TCHAR *p;
;;;1813   
;;;1814   	/* Create LFN in Unicode */
;;;1815   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000008  9804              LDR      r0,[sp,#0x10]
00000a  f8d0b000          LDR      r11,[r0,#0]
00000e  e001              B        |L7.20|
                  |L7.16|
000010  f10b0b01          ADD      r11,r11,#1
                  |L7.20|
000014  f89b0000          LDRB     r0,[r11,#0]
000018  282f              CMP      r0,#0x2f
00001a  d0f9              BEQ      |L7.16|
00001c  f89b0000          LDRB     r0,[r11,#0]
000020  285c              CMP      r0,#0x5c
000022  d0f5              BEQ      |L7.16|
;;;1816   	lfn = dp->lfn;
000024  f8da901c          LDR      r9,[r10,#0x1c]
;;;1817   	si = di = 0;
000028  2500              MOVS     r5,#0
00002a  462e              MOV      r6,r5
;;;1818   	for (;;) {
00002c  bf00              NOP      
                  |L7.46|
;;;1819   		w = p[si++];					/* Get a character */
00002e  4630              MOV      r0,r6
000030  1c76              ADDS     r6,r6,#1
000032  f81b4000          LDRB     r4,[r11,r0]
;;;1820   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
000036  2c20              CMP      r4,#0x20
000038  db03              BLT      |L7.66|
00003a  2c2f              CMP      r4,#0x2f
00003c  d001              BEQ      |L7.66|
00003e  2c5c              CMP      r4,#0x5c
000040  d100              BNE      |L7.68|
                  |L7.66|
000042  e01c              B        |L7.126|
                  |L7.68|
;;;1821   		if (di >= _MAX_LFN)				/* Reject too long name */
000044  2dff              CMP      r5,#0xff
000046  d303              BCC      |L7.80|
;;;1822   			return FR_INVALID_NAME;
000048  2006              MOVS     r0,#6
                  |L7.74|
;;;1823   #if !_LFN_UNICODE
;;;1824   		w &= 0xFF;
;;;1825   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1826   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1827   			if (!IsDBCS2(b))
;;;1828   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1829   			w = (w << 8) + b;			/* Create a DBC */
;;;1830   		}
;;;1831   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1832   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1833   #endif
;;;1834   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
;;;1835   			return FR_INVALID_NAME;
;;;1836   		lfn[di++] = w;					/* Store the Unicode character */
;;;1837   	}
;;;1838   	*path = &p[si];						/* Return pointer to the next segment */
;;;1839   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1840   #if _FS_RPATH
;;;1841   	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
;;;1842   		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
;;;1843   		lfn[di] = 0;
;;;1844   		for (i = 0; i < 11; i++)
;;;1845   			dp->fn[i] = (i < di) ? '.' : ' ';
;;;1846   		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1847   		return FR_OK;
;;;1848   	}
;;;1849   #endif
;;;1850   	while (di) {						/* Strip trailing spaces and dots */
;;;1851   		w = lfn[di-1];
;;;1852   		if (w != ' ' && w != '.') break;
;;;1853   		di--;
;;;1854   	}
;;;1855   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1856   
;;;1857   	lfn[di] = 0;						/* LFN is created */
;;;1858   
;;;1859   	/* Create SFN in directory form */
;;;1860   	mem_set(dp->fn, ' ', 11);
;;;1861   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1862   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1863   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1864   
;;;1865   	b = i = 0; ni = 8;
;;;1866   	for (;;) {
;;;1867   		w = lfn[si++];					/* Get an LFN character */
;;;1868   		if (!w) break;					/* Break on end of the LFN */
;;;1869   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1870   			cf |= NS_LOSS | NS_LFN; continue;
;;;1871   		}
;;;1872   
;;;1873   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1874   			if (ni == 11) {				/* Long extension */
;;;1875   				cf |= NS_LOSS | NS_LFN; break;
;;;1876   			}
;;;1877   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1878   			if (si > di) break;			/* No extension */
;;;1879   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1880   			b <<= 2; continue;
;;;1881   		}
;;;1882   
;;;1883   		if (w >= 0x80) {				/* Non ASCII character */
;;;1884   #ifdef _EXCVT
;;;1885   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1886   			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
;;;1887   #else
;;;1888   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1889   #endif
;;;1890   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1891   		}
;;;1892   
;;;1893   		if (_DF1S && w >= 0x100) {		/* Double byte character (always false on SBCS cfg) */
;;;1894   			if (i >= ni - 1) {
;;;1895   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1896   			}
;;;1897   			dp->fn[i++] = (BYTE)(w >> 8);
;;;1898   		} else {						/* Single byte character */
;;;1899   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
;;;1900   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1901   			} else {
;;;1902   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1903   					b |= 2;
;;;1904   				} else {
;;;1905   					if (IsLower(w)) {	/* ASCII small capital */
;;;1906   						b |= 1; w -= 0x20;
;;;1907   					}
;;;1908   				}
;;;1909   			}
;;;1910   		}
;;;1911   		dp->fn[i++] = (BYTE)w;
;;;1912   	}
;;;1913   
;;;1914   	if (dp->fn[0] == DDE) dp->fn[0] = NDDE;	/* If the first character collides with deleted mark, replace it with 0x05 */
;;;1915   
;;;1916   	if (ni == 8) b <<= 2;
;;;1917   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1918   		cf |= NS_LFN;
;;;1919   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
;;;1920   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1921   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1922   	}
;;;1923   
;;;1924   	dp->fn[NS] = cf;	/* SFN is created */
;;;1925   
;;;1926   	return FR_OK;
;;;1927   
;;;1928   
;;;1929   #else	/* Non-LFN configuration */
;;;1930   	BYTE b, c, d, *sfn;
;;;1931   	UINT ni, si, i;
;;;1932   	const char *p;
;;;1933   
;;;1934   	/* Create file name in directory form */
;;;1935   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1936   	sfn = dp->fn;
;;;1937   	mem_set(sfn, ' ', 11);
;;;1938   	si = i = b = 0; ni = 8;
;;;1939   #if _FS_RPATH
;;;1940   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1941   		for (;;) {
;;;1942   			c = (BYTE)p[si++];
;;;1943   			if (c != '.' || si >= 3) break;
;;;1944   			sfn[i++] = c;
;;;1945   		}
;;;1946   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1947   		*path = &p[si];									/* Return pointer to the next segment */
;;;1948   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1949   		return FR_OK;
;;;1950   	}
;;;1951   #endif
;;;1952   	for (;;) {
;;;1953   		c = (BYTE)p[si++];
;;;1954   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;1955   		if (c == '.' || i >= ni) {
;;;1956   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;1957   			i = 8; ni = 11;
;;;1958   			b <<= 2; continue;
;;;1959   		}
;;;1960   		if (c >= 0x80) {				/* Extended character? */
;;;1961   			b |= 3;						/* Eliminate NT flag */
;;;1962   #ifdef _EXCVT
;;;1963   			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
;;;1964   #else
;;;1965   #if !_DF1S
;;;1966   			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
;;;1967   #endif
;;;1968   #endif
;;;1969   		}
;;;1970   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1971   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1972   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1973   				return FR_INVALID_NAME;
;;;1974   			sfn[i++] = c;
;;;1975   			sfn[i++] = d;
;;;1976   		} else {						/* Single byte code */
;;;1977   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1978   				return FR_INVALID_NAME;
;;;1979   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1980   				b |= 2;
;;;1981   			} else {
;;;1982   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1983   					b |= 1; c -= 0x20;
;;;1984   				}
;;;1985   			}
;;;1986   			sfn[i++] = c;
;;;1987   		}
;;;1988   	}
;;;1989   	*path = &p[si];						/* Return pointer to the next segment */
;;;1990   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1991   
;;;1992   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1993   	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
;;;1994   
;;;1995   	if (ni == 8) b <<= 2;
;;;1996   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1997   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;1998   
;;;1999   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;2000   
;;;2001   	return FR_OK;
;;;2002   #endif
;;;2003   }
00004a  b005              ADD      sp,sp,#0x14
00004c  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.80|
000050  b2e4              UXTB     r4,r4                 ;1824
000052  2101              MOVS     r1,#1                 ;1831
000054  4620              MOV      r0,r4                 ;1831
000056  f7fffffe          BL       ff_convert
00005a  4604              MOV      r4,r0                 ;1831
00005c  b90c              CBNZ     r4,|L7.98|
00005e  2006              MOVS     r0,#6                 ;1832
000060  e7f3              B        |L7.74|
                  |L7.98|
000062  2c80              CMP      r4,#0x80              ;1834
000064  da06              BGE      |L7.116|
000066  4621              MOV      r1,r4                 ;1834
000068  a06b              ADR      r0,|L7.536|
00006a  f7fffffe          BL       chk_chr
00006e  b108              CBZ      r0,|L7.116|
000070  2006              MOVS     r0,#6                 ;1835
000072  e7ea              B        |L7.74|
                  |L7.116|
000074  4628              MOV      r0,r5                 ;1836
000076  1c6d              ADDS     r5,r5,#1              ;1836
000078  f8294010          STRH     r4,[r9,r0,LSL #1]     ;1836
00007c  e7d7              B        |L7.46|
                  |L7.126|
00007e  bf00              NOP                            ;1820
000080  eb0b0106          ADD      r1,r11,r6             ;1838
000084  9804              LDR      r0,[sp,#0x10]         ;1838
000086  6001              STR      r1,[r0,#0]            ;1838
000088  2c20              CMP      r4,#0x20              ;1839
00008a  da01              BGE      |L7.144|
00008c  2004              MOVS     r0,#4                 ;1839
00008e  e000              B        |L7.146|
                  |L7.144|
000090  2000              MOVS     r0,#0                 ;1839
                  |L7.146|
000092  4607              MOV      r7,r0                 ;1839
000094  e008              B        |L7.168|
                  |L7.150|
000096  1e68              SUBS     r0,r5,#1              ;1851
000098  f8394010          LDRH     r4,[r9,r0,LSL #1]     ;1851
00009c  2c20              CMP      r4,#0x20              ;1852
00009e  d002              BEQ      |L7.166|
0000a0  2c2e              CMP      r4,#0x2e              ;1852
0000a2  d000              BEQ      |L7.166|
0000a4  e002              B        |L7.172|
                  |L7.166|
0000a6  1e6d              SUBS     r5,r5,#1              ;1853
                  |L7.168|
0000a8  2d00              CMP      r5,#0                 ;1850
0000aa  d1f4              BNE      |L7.150|
                  |L7.172|
0000ac  bf00              NOP                            ;1852
0000ae  b90d              CBNZ     r5,|L7.180|
0000b0  2006              MOVS     r0,#6                 ;1855
0000b2  e7ca              B        |L7.74|
                  |L7.180|
0000b4  2000              MOVS     r0,#0                 ;1857
0000b6  f8290015          STRH     r0,[r9,r5,LSL #1]     ;1857
0000ba  220b              MOVS     r2,#0xb               ;1860
0000bc  2120              MOVS     r1,#0x20              ;1860
0000be  f8da0018          LDR      r0,[r10,#0x18]        ;1860
0000c2  f7fffffe          BL       mem_set
0000c6  2600              MOVS     r6,#0                 ;1861
0000c8  e000              B        |L7.204|
                  |L7.202|
0000ca  1c76              ADDS     r6,r6,#1              ;1861
                  |L7.204|
0000cc  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1861
0000d0  2820              CMP      r0,#0x20              ;1861
0000d2  d0fa              BEQ      |L7.202|
0000d4  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1861
0000d8  282e              CMP      r0,#0x2e              ;1861
0000da  d0f6              BEQ      |L7.202|
0000dc  b10e              CBZ      r6,|L7.226|
0000de  f0470703          ORR      r7,r7,#3              ;1862
                  |L7.226|
0000e2  e000              B        |L7.230|
                  |L7.228|
0000e4  1e6d              SUBS     r5,r5,#1              ;1863
                  |L7.230|
0000e6  b125              CBZ      r5,|L7.242|
0000e8  1e68              SUBS     r0,r5,#1              ;1863
0000ea  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;1863
0000ee  282e              CMP      r0,#0x2e              ;1863
0000f0  d1f8              BNE      |L7.228|
                  |L7.242|
0000f2  f04f0800          MOV      r8,#0                 ;1865
0000f6  f8cd8008          STR      r8,[sp,#8]            ;1865
0000fa  2008              MOVS     r0,#8                 ;1865
0000fc  9001              STR      r0,[sp,#4]            ;1865
0000fe  bf00              NOP                            ;1866
                  |L7.256|
000100  4630              MOV      r0,r6                 ;1867
000102  1c76              ADDS     r6,r6,#1              ;1867
000104  f8394010          LDRH     r4,[r9,r0,LSL #1]     ;1867
000108  b904              CBNZ     r4,|L7.268|
00010a  e055              B        |L7.440|
                  |L7.268|
00010c  2c20              CMP      r4,#0x20              ;1869
00010e  d003              BEQ      |L7.280|
000110  2c2e              CMP      r4,#0x2e              ;1869
000112  d104              BNE      |L7.286|
000114  42ae              CMP      r6,r5                 ;1869
000116  d002              BEQ      |L7.286|
                  |L7.280|
000118  f0470703          ORR      r7,r7,#3              ;1870
00011c  e7f0              B        |L7.256|
                  |L7.286|
00011e  e9dd1001          LDRD     r1,r0,[sp,#4]         ;1873
000122  4288              CMP      r0,r1                 ;1873
000124  d201              BCS      |L7.298|
000126  42ae              CMP      r6,r5                 ;1873
000128  d116              BNE      |L7.344|
                  |L7.298|
00012a  9801              LDR      r0,[sp,#4]            ;1874
00012c  280b              CMP      r0,#0xb               ;1874
00012e  d102              BNE      |L7.310|
000130  f0470703          ORR      r7,r7,#3              ;1875
000134  e040              B        |L7.440|
                  |L7.310|
000136  42ae              CMP      r6,r5                 ;1877
000138  d001              BEQ      |L7.318|
00013a  f0470703          ORR      r7,r7,#3              ;1877
                  |L7.318|
00013e  42ae              CMP      r6,r5                 ;1878
000140  d900              BLS      |L7.324|
000142  e039              B        |L7.440|
                  |L7.324|
000144  462e              MOV      r6,r5                 ;1879
000146  2008              MOVS     r0,#8                 ;1879
000148  9002              STR      r0,[sp,#8]            ;1879
00014a  200b              MOVS     r0,#0xb               ;1879
00014c  9001              STR      r0,[sp,#4]            ;1879
00014e  ea4f6088          LSL      r0,r8,#26             ;1880
000152  ea4f6810          LSR      r8,r0,#24             ;1880
000156  e7d3              B        |L7.256|
                  |L7.344|
000158  2c80              CMP      r4,#0x80              ;1883
00015a  db0b              BLT      |L7.372|
00015c  2100              MOVS     r1,#0                 ;1885
00015e  4620              MOV      r0,r4                 ;1885
000160  f7fffffe          BL       ff_convert
000164  4604              MOV      r4,r0                 ;1885
000166  b11c              CBZ      r4,|L7.368|
000168  f1a40080          SUB      r0,r4,#0x80           ;1886
00016c  492d              LDR      r1,|L7.548|
00016e  5c0c              LDRB     r4,[r1,r0]            ;1886
                  |L7.368|
000170  f0470702          ORR      r7,r7,#2              ;1890
                  |L7.372|
000174  bf00              NOP                            ;1893
000176  b124              CBZ      r4,|L7.386|
000178  4621              MOV      r1,r4                 ;1899
00017a  a02b              ADR      r0,|L7.552|
00017c  f7fffffe          BL       chk_chr
000180  b118              CBZ      r0,|L7.394|
                  |L7.386|
000182  245f              MOVS     r4,#0x5f              ;1900
000184  f0470703          ORR      r7,r7,#3              ;1900
000188  e00f              B        |L7.426|
                  |L7.394|
00018a  2c41              CMP      r4,#0x41              ;1902
00018c  db04              BLT      |L7.408|
00018e  2c5a              CMP      r4,#0x5a              ;1902
000190  dc02              BGT      |L7.408|
000192  f0480802          ORR      r8,r8,#2              ;1903
000196  e008              B        |L7.426|
                  |L7.408|
000198  2c61              CMP      r4,#0x61              ;1905
00019a  db06              BLT      |L7.426|
00019c  2c7a              CMP      r4,#0x7a              ;1905
00019e  dc04              BGT      |L7.426|
0001a0  f0480801          ORR      r8,r8,#1              ;1906
0001a4  f1a40020          SUB      r0,r4,#0x20           ;1906
0001a8  b284              UXTH     r4,r0                 ;1906
                  |L7.426|
0001aa  f8da3018          LDR      r3,[r10,#0x18]        ;1911
0001ae  9802              LDR      r0,[sp,#8]            ;1911
0001b0  1c41              ADDS     r1,r0,#1              ;1911
0001b2  9102              STR      r1,[sp,#8]            ;1911
0001b4  541c              STRB     r4,[r3,r0]            ;1911
0001b6  e7a3              B        |L7.256|
                  |L7.440|
0001b8  bf00              NOP                            ;1868
0001ba  f8da0018          LDR      r0,[r10,#0x18]        ;1914
0001be  7800              LDRB     r0,[r0,#0]            ;1914
0001c0  28e5              CMP      r0,#0xe5              ;1914
0001c2  d103              BNE      |L7.460|
0001c4  2005              MOVS     r0,#5                 ;1914
0001c6  f8da1018          LDR      r1,[r10,#0x18]        ;1914
0001ca  7008              STRB     r0,[r1,#0]            ;1914
                  |L7.460|
0001cc  9801              LDR      r0,[sp,#4]            ;1916
0001ce  2808              CMP      r0,#8                 ;1916
0001d0  d103              BNE      |L7.474|
0001d2  ea4f6088          LSL      r0,r8,#26             ;1916
0001d6  ea4f6810          LSR      r8,r0,#24             ;1916
                  |L7.474|
0001da  f008000c          AND      r0,r8,#0xc            ;1917
0001de  280c              CMP      r0,#0xc               ;1917
0001e0  d003              BEQ      |L7.490|
0001e2  f0080003          AND      r0,r8,#3              ;1917
0001e6  2803              CMP      r0,#3                 ;1917
0001e8  d101              BNE      |L7.494|
                  |L7.490|
0001ea  f0470702          ORR      r7,r7,#2              ;1918
                  |L7.494|
0001ee  f0170f02          TST      r7,#2                 ;1919
0001f2  d10b              BNE      |L7.524|
0001f4  f0080003          AND      r0,r8,#3              ;1920
0001f8  2801              CMP      r0,#1                 ;1920
0001fa  d101              BNE      |L7.512|
0001fc  f0470710          ORR      r7,r7,#0x10           ;1920
                  |L7.512|
000200  f008000c          AND      r0,r8,#0xc            ;1921
000204  2804              CMP      r0,#4                 ;1921
000206  d101              BNE      |L7.524|
000208  f0470708          ORR      r7,r7,#8              ;1921
                  |L7.524|
00020c  f8da0018          LDR      r0,[r10,#0x18]        ;1924
000210  72c7              STRB     r7,[r0,#0xb]          ;1924
000212  2000              MOVS     r0,#0                 ;1926
000214  e719              B        |L7.74|
;;;2004   
                          ENDP

000216  0000              DCW      0x0000
                  |L7.536|
000218  222a3a3c          DCB      """*:<>?|",127,0
00021c  3e3f7c7f
000220  00      
000221  00                DCB      0
000222  00                DCB      0
000223  00                DCB      0
                  |L7.548|
                          DCD      ExCvt
                  |L7.552|
000228  2b2c3b3d          DCB      "+,;=[]",0
00022c  5b5d00  
00022f  00                DCB      0

                          AREA ||i.dir_alloc||, CODE, READONLY, ALIGN=1

                  dir_alloc PROC
;;;1231   static
;;;1232   FRESULT dir_alloc (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1233   	DIR* dp,	/* Pointer to the directory object */
;;;1234   	UINT nent	/* Number of contiguous entries to allocate (1-21) */
;;;1235   )
;;;1236   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1237   	FRESULT res;
;;;1238   	UINT n;
;;;1239   
;;;1240   
;;;1241   	res = dir_sdi(dp, 0);
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dir_sdi
000010  4605              MOV      r5,r0
;;;1242   	if (res == FR_OK) {
000012  b9ed              CBNZ     r5,|L8.80|
;;;1243   		n = 0;
000014  2700              MOVS     r7,#0
;;;1244   		do {
000016  bf00              NOP      
                  |L8.24|
;;;1245   			res = move_window(dp->fs, dp->sect);
000018  6921              LDR      r1,[r4,#0x10]
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       move_window
000020  4605              MOV      r5,r0
;;;1246   			if (res != FR_OK) break;
000022  b105              CBZ      r5,|L8.38|
000024  e013              B        |L8.78|
                  |L8.38|
;;;1247   			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
000026  6960              LDR      r0,[r4,#0x14]
000028  7800              LDRB     r0,[r0,#0]
00002a  28e5              CMP      r0,#0xe5
00002c  d002              BEQ      |L8.52|
00002e  6960              LDR      r0,[r4,#0x14]
000030  7800              LDRB     r0,[r0,#0]
000032  b920              CBNZ     r0,|L8.62|
                  |L8.52|
;;;1248   				if (++n == nent) break;	/* A block of contiguous entries is found */
000034  1c78              ADDS     r0,r7,#1
000036  4607              MOV      r7,r0
000038  42b0              CMP      r0,r6
00003a  d101              BNE      |L8.64|
00003c  e007              B        |L8.78|
                  |L8.62|
;;;1249   			} else {
;;;1250   				n = 0;					/* Not a blank entry. Restart to search */
00003e  2700              MOVS     r7,#0
                  |L8.64|
;;;1251   			}
;;;1252   			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
000040  2101              MOVS     r1,#1
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dir_next
000048  4605              MOV      r5,r0
;;;1253   		} while (res == FR_OK);
00004a  2d00              CMP      r5,#0
00004c  d0e4              BEQ      |L8.24|
                  |L8.78|
00004e  bf00              NOP                            ;1246
                  |L8.80|
;;;1254   	}
;;;1255   	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
000050  2d04              CMP      r5,#4
000052  d100              BNE      |L8.86|
000054  2507              MOVS     r5,#7
                  |L8.86|
;;;1256   	return res;
000056  4628              MOV      r0,r5
;;;1257   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;1258   #endif
                          ENDP


                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;1487   static
;;;1488   FRESULT dir_find (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1489   	DIR* dp			/* Pointer to the directory object linked to the file name */
;;;1490   )
;;;1491   {
000004  4604              MOV      r4,r0
;;;1492   	FRESULT res;
;;;1493   	BYTE c, *dir;
;;;1494   #if _USE_LFN
;;;1495   	BYTE a, ord, sum;
;;;1496   #endif
;;;1497   
;;;1498   	res = dir_sdi(dp, 0);			/* Rewind directory object */
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_sdi
00000e  4607              MOV      r7,r0
;;;1499   	if (res != FR_OK) return res;
000010  b117              CBZ      r7,|L9.24|
000012  4638              MOV      r0,r7
                  |L9.20|
;;;1500   
;;;1501   #if _USE_LFN
;;;1502   	ord = sum = 0xFF;
;;;1503   #endif
;;;1504   	do {
;;;1505   		res = move_window(dp->fs, dp->sect);
;;;1506   		if (res != FR_OK) break;
;;;1507   		dir = dp->dir;					/* Ptr to the directory entry of current index */
;;;1508   		c = dir[DIR_Name];
;;;1509   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1510   #if _USE_LFN	/* LFN configuration */
;;;1511   		a = dir[DIR_Attr] & AM_MASK;
;;;1512   		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1513   			ord = 0xFF;
;;;1514   		} else {
;;;1515   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1516   				if (dp->lfn) {
;;;1517   					if (c & LLE) {		/* Is it start of LFN sequence? */
;;;1518   						sum = dir[LDIR_Chksum];
;;;1519   						c &= ~LLE; ord = c;	/* LFN start order */
;;;1520   						dp->lfn_idx = dp->index;
;;;1521   					}
;;;1522   					/* Check validity of the LFN entry and compare it with given name */
;;;1523   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
;;;1524   				}
;;;1525   			} else {					/* An SFN entry is found */
;;;1526   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1527   				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1528   				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
;;;1529   			}
;;;1530   		}
;;;1531   #else		/* Non LFN configuration */
;;;1532   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
;;;1533   			break;
;;;1534   #endif
;;;1535   		res = dir_next(dp, 0);		/* Next entry */
;;;1536   	} while (res == FR_OK);
;;;1537   
;;;1538   	return res;
;;;1539   }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L9.24|
000018  f04f09ff          MOV      r9,#0xff              ;1502
00001c  46ca              MOV      r10,r9                ;1502
00001e  bf00              NOP                            ;1504
                  |L9.32|
000020  6921              LDR      r1,[r4,#0x10]         ;1505
000022  6820              LDR      r0,[r4,#0]            ;1505
000024  f7fffffe          BL       move_window
000028  4607              MOV      r7,r0                 ;1505
00002a  b107              CBZ      r7,|L9.46|
00002c  e054              B        |L9.216|
                  |L9.46|
00002e  6965              LDR      r5,[r4,#0x14]         ;1507
000030  782e              LDRB     r6,[r5,#0]            ;1508
000032  b90e              CBNZ     r6,|L9.56|
000034  2704              MOVS     r7,#4                 ;1509
000036  e04f              B        |L9.216|
                  |L9.56|
000038  7ae8              LDRB     r0,[r5,#0xb]          ;1511
00003a  f000083f          AND      r8,r0,#0x3f           ;1511
00003e  2ee5              CMP      r6,#0xe5              ;1512
000040  d005              BEQ      |L9.78|
000042  f0180f08          TST      r8,#8                 ;1512
000046  d005              BEQ      |L9.84|
000048  f1b80f0f          CMP      r8,#0xf               ;1512
00004c  d002              BEQ      |L9.84|
                  |L9.78|
00004e  f04f09ff          MOV      r9,#0xff              ;1513
000052  e03a              B        |L9.202|
                  |L9.84|
000054  f1b80f0f          CMP      r8,#0xf               ;1515
000058  d11c              BNE      |L9.148|
00005a  69e0              LDR      r0,[r4,#0x1c]         ;1516
00005c  b3a0              CBZ      r0,|L9.200|
00005e  f0160f40          TST      r6,#0x40              ;1517
000062  d006              BEQ      |L9.114|
000064  f895a00d          LDRB     r10,[r5,#0xd]         ;1518
000068  f0260640          BIC      r6,r6,#0x40           ;1519
00006c  46b1              MOV      r9,r6                 ;1519
00006e  88e0              LDRH     r0,[r4,#6]            ;1520
000070  8420              STRH     r0,[r4,#0x20]         ;1520
                  |L9.114|
000072  454e              CMP      r6,r9                 ;1523
000074  d10a              BNE      |L9.140|
000076  7b68              LDRB     r0,[r5,#0xd]          ;1523
000078  4550              CMP      r0,r10                ;1523
00007a  d107              BNE      |L9.140|
00007c  4629              MOV      r1,r5                 ;1523
00007e  69e0              LDR      r0,[r4,#0x1c]         ;1523
000080  f7fffffe          BL       cmp_lfn
000084  b110              CBZ      r0,|L9.140|
000086  f1a90001          SUB      r0,r9,#1              ;1523
00008a  e000              B        |L9.142|
                  |L9.140|
00008c  20ff              MOVS     r0,#0xff              ;1523
                  |L9.142|
00008e  f00009ff          AND      r9,r0,#0xff           ;1523
000092  e01a              B        |L9.202|
                  |L9.148|
000094  f1b90f00          CMP      r9,#0                 ;1526
000098  d105              BNE      |L9.166|
00009a  4628              MOV      r0,r5                 ;1526
00009c  f7fffffe          BL       sum_sfn
0000a0  4550              CMP      r0,r10                ;1526
0000a2  d100              BNE      |L9.166|
0000a4  e018              B        |L9.216|
                  |L9.166|
0000a6  f04f09ff          MOV      r9,#0xff              ;1527
0000aa  f64f70ff          MOV      r0,#0xffff            ;1527
0000ae  8420              STRH     r0,[r4,#0x20]         ;1527
0000b0  69a0              LDR      r0,[r4,#0x18]         ;1528
0000b2  7ac0              LDRB     r0,[r0,#0xb]          ;1528
0000b4  f0100f01          TST      r0,#1                 ;1528
0000b8  d107              BNE      |L9.202|
0000ba  220b              MOVS     r2,#0xb               ;1528
0000bc  4628              MOV      r0,r5                 ;1528
0000be  69a1              LDR      r1,[r4,#0x18]         ;1528
0000c0  f7fffffe          BL       mem_cmp
0000c4  b900              CBNZ     r0,|L9.200|
0000c6  e007              B        |L9.216|
                  |L9.200|
0000c8  e7ff              B        |L9.202|
                  |L9.202|
0000ca  2100              MOVS     r1,#0                 ;1535
0000cc  4620              MOV      r0,r4                 ;1535
0000ce  f7fffffe          BL       dir_next
0000d2  4607              MOV      r7,r0                 ;1535
0000d4  2f00              CMP      r7,#0                 ;1536
0000d6  d0a3              BEQ      |L9.32|
                  |L9.216|
0000d8  bf00              NOP                            ;1506
0000da  4638              MOV      r0,r7                 ;1538
0000dc  e79a              B        |L9.20|
;;;1540   
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;1162   static
;;;1163   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1164   	DIR* dp,		/* Pointer to the directory object */
;;;1165   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1166   )
;;;1167   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;1168   	DWORD clst;
;;;1169   	UINT i;
;;;1170   
;;;1171   
;;;1172   	i = dp->index + 1;
000008  88e0              LDRH     r0,[r4,#6]
00000a  1c46              ADDS     r6,r0,#1
;;;1173   	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
00000c  0430              LSLS     r0,r6,#16
00000e  0c00              LSRS     r0,r0,#16
000010  d001              BEQ      |L10.22|
000012  6920              LDR      r0,[r4,#0x10]
000014  b910              CBNZ     r0,|L10.28|
                  |L10.22|
;;;1174   		return FR_NO_FILE;
000016  2004              MOVS     r0,#4
                  |L10.24|
;;;1175   
;;;1176   	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
;;;1177   		dp->sect++;					/* Next sector */
;;;1178   
;;;1179   		if (!dp->clust) {		/* Static table */
;;;1180   			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
;;;1181   				return FR_NO_FILE;
;;;1182   		}
;;;1183   		else {					/* Dynamic table */
;;;1184   			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1185   				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
;;;1186   				if (clst <= 1) return FR_INT_ERR;
;;;1187   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1188   				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
;;;1189   #if !_FS_READONLY
;;;1190   					UINT c;
;;;1191   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
;;;1192   					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
;;;1193   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1194   					if (clst == 1) return FR_INT_ERR;
;;;1195   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1196   					/* Clean-up stretched table */
;;;1197   					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
;;;1198   					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
;;;1199   					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
;;;1200   					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1201   						dp->fs->wflag = 1;
;;;1202   						if (sync_window(dp->fs)) return FR_DISK_ERR;
;;;1203   						dp->fs->winsect++;
;;;1204   					}
;;;1205   					dp->fs->winsect -= c;						/* Rewind window offset */
;;;1206   #else
;;;1207   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
;;;1208   					return FR_NO_FILE;							/* Report EOT */
;;;1209   #endif
;;;1210   				}
;;;1211   				dp->clust = clst;				/* Initialize data for new cluster */
;;;1212   				dp->sect = clust2sect(dp->fs, clst);
;;;1213   			}
;;;1214   		}
;;;1215   	}
;;;1216   
;;;1217   	dp->index = (WORD)i;	/* Current index */
;;;1218   	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
;;;1219   
;;;1220   	return FR_OK;
;;;1221   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L10.28|
00001c  f0160f0f          TST      r6,#0xf               ;1176
000020  d16b              BNE      |L10.250|
000022  6920              LDR      r0,[r4,#0x10]         ;1177
000024  1c40              ADDS     r0,r0,#1              ;1177
000026  6120              STR      r0,[r4,#0x10]         ;1177
000028  68e0              LDR      r0,[r4,#0xc]          ;1179
00002a  b928              CBNZ     r0,|L10.56|
00002c  6820              LDR      r0,[r4,#0]            ;1180
00002e  8900              LDRH     r0,[r0,#8]            ;1180
000030  42b0              CMP      r0,r6                 ;1180
000032  d862              BHI      |L10.250|
000034  2004              MOVS     r0,#4                 ;1181
000036  e7ef              B        |L10.24|
                  |L10.56|
000038  6820              LDR      r0,[r4,#0]            ;1184
00003a  7880              LDRB     r0,[r0,#2]            ;1184
00003c  1e40              SUBS     r0,r0,#1              ;1184
00003e  ea101f16          TST      r0,r6,LSR #4          ;1184
000042  d15a              BNE      |L10.250|
000044  68e1              LDR      r1,[r4,#0xc]          ;1185
000046  6820              LDR      r0,[r4,#0]            ;1185
000048  f7fffffe          BL       get_fat
00004c  4605              MOV      r5,r0                 ;1185
00004e  2d01              CMP      r5,#1                 ;1186
000050  d801              BHI      |L10.86|
000052  2002              MOVS     r0,#2                 ;1186
000054  e7e0              B        |L10.24|
                  |L10.86|
000056  1c68              ADDS     r0,r5,#1              ;1187
000058  d101              BNE      |L10.94|
00005a  2001              MOVS     r0,#1                 ;1187
00005c  e7dc              B        |L10.24|
                  |L10.94|
00005e  6820              LDR      r0,[r4,#0]            ;1188
000060  6940              LDR      r0,[r0,#0x14]         ;1188
000062  42a8              CMP      r0,r5                 ;1188
000064  d843              BHI      |L10.238|
000066  f1b80f00          CMP      r8,#0                 ;1191
00006a  d101              BNE      |L10.112|
00006c  2004              MOVS     r0,#4                 ;1191
00006e  e7d3              B        |L10.24|
                  |L10.112|
000070  68e1              LDR      r1,[r4,#0xc]          ;1192
000072  6820              LDR      r0,[r4,#0]            ;1192
000074  f7fffffe          BL       create_chain
000078  4605              MOV      r5,r0                 ;1192
00007a  b90d              CBNZ     r5,|L10.128|
00007c  2007              MOVS     r0,#7                 ;1193
00007e  e7cb              B        |L10.24|
                  |L10.128|
000080  2d01              CMP      r5,#1                 ;1194
000082  d101              BNE      |L10.136|
000084  2002              MOVS     r0,#2                 ;1194
000086  e7c7              B        |L10.24|
                  |L10.136|
000088  1c68              ADDS     r0,r5,#1              ;1195
00008a  d101              BNE      |L10.144|
00008c  2001              MOVS     r0,#1                 ;1195
00008e  e7c3              B        |L10.24|
                  |L10.144|
000090  6820              LDR      r0,[r4,#0]            ;1197
000092  f7fffffe          BL       sync_window
000096  b108              CBZ      r0,|L10.156|
000098  2001              MOVS     r0,#1                 ;1197
00009a  e7bd              B        |L10.24|
                  |L10.156|
00009c  6821              LDR      r1,[r4,#0]            ;1198
00009e  f1010030          ADD      r0,r1,#0x30           ;1198
0000a2  f44f7200          MOV      r2,#0x200             ;1198
0000a6  2100              MOVS     r1,#0                 ;1198
0000a8  f7fffffe          BL       mem_set
0000ac  4629              MOV      r1,r5                 ;1199
0000ae  6820              LDR      r0,[r4,#0]            ;1199
0000b0  f7fffffe          BL       clust2sect
0000b4  6821              LDR      r1,[r4,#0]            ;1199
0000b6  62c8              STR      r0,[r1,#0x2c]         ;1199
0000b8  2700              MOVS     r7,#0                 ;1200
0000ba  e00e              B        |L10.218|
                  |L10.188|
0000bc  2001              MOVS     r0,#1                 ;1201
0000be  6821              LDR      r1,[r4,#0]            ;1201
0000c0  7108              STRB     r0,[r1,#4]            ;1201
0000c2  6820              LDR      r0,[r4,#0]            ;1202
0000c4  f7fffffe          BL       sync_window
0000c8  b108              CBZ      r0,|L10.206|
0000ca  2001              MOVS     r0,#1                 ;1202
0000cc  e7a4              B        |L10.24|
                  |L10.206|
0000ce  6820              LDR      r0,[r4,#0]            ;1203
0000d0  6ac0              LDR      r0,[r0,#0x2c]         ;1203
0000d2  1c40              ADDS     r0,r0,#1              ;1203
0000d4  6821              LDR      r1,[r4,#0]            ;1203
0000d6  62c8              STR      r0,[r1,#0x2c]         ;1203
0000d8  1c7f              ADDS     r7,r7,#1              ;1200
                  |L10.218|
0000da  6820              LDR      r0,[r4,#0]            ;1200
0000dc  7880              LDRB     r0,[r0,#2]            ;1200
0000de  42b8              CMP      r0,r7                 ;1200
0000e0  d8ec              BHI      |L10.188|
0000e2  6820              LDR      r0,[r4,#0]            ;1205
0000e4  6ac0              LDR      r0,[r0,#0x2c]         ;1205
0000e6  1bc0              SUBS     r0,r0,r7              ;1205
0000e8  6821              LDR      r1,[r4,#0]            ;1205
0000ea  62c8              STR      r0,[r1,#0x2c]         ;1205
0000ec  bf00              NOP                            ;1210
                  |L10.238|
0000ee  60e5              STR      r5,[r4,#0xc]          ;1211
0000f0  4629              MOV      r1,r5                 ;1212
0000f2  6820              LDR      r0,[r4,#0]            ;1212
0000f4  f7fffffe          BL       clust2sect
0000f8  6120              STR      r0,[r4,#0x10]         ;1212
                  |L10.250|
0000fa  80e6              STRH     r6,[r4,#6]            ;1217
0000fc  6820              LDR      r0,[r4,#0]            ;1218
0000fe  3030              ADDS     r0,r0,#0x30           ;1218
000100  f006010f          AND      r1,r6,#0xf            ;1218
000104  eb001041          ADD      r0,r0,r1,LSL #5       ;1218
000108  6160              STR      r0,[r4,#0x14]         ;1218
00010a  2000              MOVS     r0,#0                 ;1220
00010c  e784              B        |L10.24|
;;;1222   
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;1548   static
;;;1549   FRESULT dir_read (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1550   	DIR* dp,		/* Pointer to the directory object */
;;;1551   	int vol			/* Filtered by 0:file/directory or 1:volume label */
;;;1552   )
;;;1553   {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
;;;1554   	FRESULT res;
;;;1555   	BYTE a, c, *dir;
;;;1556   #if _USE_LFN
;;;1557   	BYTE ord = 0xFF, sum = 0xFF;
000008  f04f09ff          MOV      r9,#0xff
00000c  46cb              MOV      r11,r9
;;;1558   #endif
;;;1559   
;;;1560   	res = FR_NO_FILE;
00000e  2704              MOVS     r7,#4
;;;1561   	while (dp->sect) {
000010  e04e              B        |L11.176|
                  |L11.18|
;;;1562   		res = move_window(dp->fs, dp->sect);
000012  6921              LDR      r1,[r4,#0x10]
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       move_window
00001a  4607              MOV      r7,r0
;;;1563   		if (res != FR_OK) break;
00001c  b107              CBZ      r7,|L11.32|
00001e  e04a              B        |L11.182|
                  |L11.32|
;;;1564   		dir = dp->dir;					/* Ptr to the directory entry of current index */
000020  6966              LDR      r6,[r4,#0x14]
;;;1565   		c = dir[DIR_Name];
000022  7835              LDRB     r5,[r6,#0]
;;;1566   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000024  b90d              CBNZ     r5,|L11.42|
000026  2704              MOVS     r7,#4
000028  e045              B        |L11.182|
                  |L11.42|
;;;1567   		a = dir[DIR_Attr] & AM_MASK;
00002a  7af0              LDRB     r0,[r6,#0xb]
00002c  f000083f          AND      r8,r0,#0x3f
;;;1568   #if _USE_LFN	/* LFN configuration */
;;;1569   		if (c == DDE || (!_FS_RPATH && c == '.') || (int)(a == AM_VOL) != vol) {	/* An entry without valid data */
000030  2de5              CMP      r5,#0xe5
000032  d009              BEQ      |L11.72|
000034  2d2e              CMP      r5,#0x2e
000036  d007              BEQ      |L11.72|
000038  f1b80f08          CMP      r8,#8
00003c  d101              BNE      |L11.66|
00003e  2001              MOVS     r0,#1
000040  e000              B        |L11.68|
                  |L11.66|
000042  2000              MOVS     r0,#0
                  |L11.68|
000044  4550              CMP      r0,r10
000046  d002              BEQ      |L11.78|
                  |L11.72|
;;;1570   			ord = 0xFF;
000048  f04f09ff          MOV      r9,#0xff
00004c  e029              B        |L11.162|
                  |L11.78|
;;;1571   		} else {
;;;1572   			if (a == AM_LFN) {			/* An LFN entry is found */
00004e  f1b80f0f          CMP      r8,#0xf
000052  d11a              BNE      |L11.138|
;;;1573   				if (c & LLE) {			/* Is it start of LFN sequence? */
000054  f0150f40          TST      r5,#0x40
000058  d006              BEQ      |L11.104|
;;;1574   					sum = dir[LDIR_Chksum];
00005a  f896b00d          LDRB     r11,[r6,#0xd]
;;;1575   					c &= ~LLE; ord = c;
00005e  f0250540          BIC      r5,r5,#0x40
000062  46a9              MOV      r9,r5
;;;1576   					dp->lfn_idx = dp->index;
000064  88e0              LDRH     r0,[r4,#6]
000066  8420              STRH     r0,[r4,#0x20]
                  |L11.104|
;;;1577   				}
;;;1578   				/* Check LFN validity and capture it */
;;;1579   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
000068  454d              CMP      r5,r9
00006a  d10a              BNE      |L11.130|
00006c  7b70              LDRB     r0,[r6,#0xd]
00006e  4558              CMP      r0,r11
000070  d107              BNE      |L11.130|
000072  4631              MOV      r1,r6
000074  69e0              LDR      r0,[r4,#0x1c]
000076  f7fffffe          BL       pick_lfn
00007a  b110              CBZ      r0,|L11.130|
00007c  f1a90001          SUB      r0,r9,#1
000080  e000              B        |L11.132|
                  |L11.130|
000082  20ff              MOVS     r0,#0xff
                  |L11.132|
000084  f00009ff          AND      r9,r0,#0xff
000088  e00b              B        |L11.162|
                  |L11.138|
;;;1580   			} else {					/* An SFN entry is found */
;;;1581   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
00008a  f1b90f00          CMP      r9,#0
00008e  d104              BNE      |L11.154|
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       sum_sfn
000096  4558              CMP      r0,r11
000098  d002              BEQ      |L11.160|
                  |L11.154|
;;;1582   					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
00009a  f64f70ff          MOV      r0,#0xffff
00009e  8420              STRH     r0,[r4,#0x20]
                  |L11.160|
;;;1583   				break;
0000a0  e009              B        |L11.182|
                  |L11.162|
;;;1584   			}
;;;1585   		}
;;;1586   #else		/* Non LFN configuration */
;;;1587   		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
;;;1588   			break;
;;;1589   #endif
;;;1590   		res = dir_next(dp, 0);				/* Next entry */
0000a2  2100              MOVS     r1,#0
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       dir_next
0000aa  4607              MOV      r7,r0
;;;1591   		if (res != FR_OK) break;
0000ac  b107              CBZ      r7,|L11.176|
0000ae  e002              B        |L11.182|
                  |L11.176|
0000b0  6920              LDR      r0,[r4,#0x10]         ;1561
0000b2  2800              CMP      r0,#0                 ;1561
0000b4  d1ad              BNE      |L11.18|
                  |L11.182|
0000b6  bf00              NOP                            ;1563
;;;1592   	}
;;;1593   
;;;1594   	if (res != FR_OK) dp->sect = 0;
0000b8  b10f              CBZ      r7,|L11.190|
0000ba  2000              MOVS     r0,#0
0000bc  6120              STR      r0,[r4,#0x10]
                  |L11.190|
;;;1595   
;;;1596   	return res;
0000be  4638              MOV      r0,r7
;;;1597   }
0000c0  e8bd9ff0          POP      {r4-r12,pc}
;;;1598   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;1607   static
;;;1608   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1609   	DIR* dp				/* Target directory with object name to be created */
;;;1610   )
;;;1611   {
000004  4604              MOV      r4,r0
;;;1612   	FRESULT res;
;;;1613   #if _USE_LFN	/* LFN configuration */
;;;1614   	UINT n, nent;
;;;1615   	BYTE sn[12], *fn, sum;
;;;1616   	WCHAR *lfn;
;;;1617   
;;;1618   
;;;1619   	fn = dp->fn; lfn = dp->lfn;
000006  f8d48018          LDR      r8,[r4,#0x18]
00000a  f8d4901c          LDR      r9,[r4,#0x1c]
;;;1620   	mem_cpy(sn, fn, 12);
00000e  220c              MOVS     r2,#0xc
000010  4641              MOV      r1,r8
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       mem_cpy
;;;1621   
;;;1622   	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
000018  bf00              NOP      
;;;1623   		return FR_INVALID_NAME;
;;;1624   
;;;1625   	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
00001a  f89d000b          LDRB     r0,[sp,#0xb]
00001e  f0100f01          TST      r0,#1
000022  d024              BEQ      |L12.110|
;;;1626   		fn[NS] = 0; dp->lfn = 0;			/* Find only SFN */
000024  2000              MOVS     r0,#0
000026  f888000b          STRB     r0,[r8,#0xb]
00002a  61e0              STR      r0,[r4,#0x1c]
;;;1627   		for (n = 1; n < 100; n++) {
00002c  2601              MOVS     r6,#1
00002e  e00c              B        |L12.74|
                  |L12.48|
;;;1628   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
000030  4633              MOV      r3,r6
000032  464a              MOV      r2,r9
000034  4669              MOV      r1,sp
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       gen_numname
;;;1629   			res = dir_find(dp);				/* Check if the name collides with existing SFN */
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dir_find
000042  4605              MOV      r5,r0
;;;1630   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L12.72|
000046  e002              B        |L12.78|
                  |L12.72|
000048  1c76              ADDS     r6,r6,#1              ;1627
                  |L12.74|
00004a  2e64              CMP      r6,#0x64              ;1627
00004c  d3f0              BCC      |L12.48|
                  |L12.78|
00004e  bf00              NOP      
;;;1631   		}
;;;1632   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
000050  2e64              CMP      r6,#0x64
000052  d102              BNE      |L12.90|
000054  2007              MOVS     r0,#7
                  |L12.86|
;;;1633   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1634   		fn[NS] = sn[NS]; dp->lfn = lfn;
;;;1635   	}
;;;1636   
;;;1637   	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1638   		for (n = 0; lfn[n]; n++) ;
;;;1639   		nent = (n + 25) / 13;
;;;1640   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1641   		nent = 1;
;;;1642   	}
;;;1643   	res = dir_alloc(dp, nent);		/* Allocate entries */
;;;1644   
;;;1645   	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
;;;1646   		res = dir_sdi(dp, dp->index - nent);
;;;1647   		if (res == FR_OK) {
;;;1648   			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
;;;1649   			do {					/* Store LFN entries in bottom first */
;;;1650   				res = move_window(dp->fs, dp->sect);
;;;1651   				if (res != FR_OK) break;
;;;1652   				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
;;;1653   				dp->fs->wflag = 1;
;;;1654   				res = dir_next(dp, 0);	/* Next entry */
;;;1655   			} while (res == FR_OK && --nent);
;;;1656   		}
;;;1657   	}
;;;1658   #else	/* Non LFN configuration */
;;;1659   	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
;;;1660   #endif
;;;1661   
;;;1662   	if (res == FR_OK) {				/* Set SFN entry */
;;;1663   		res = move_window(dp->fs, dp->sect);
;;;1664   		if (res == FR_OK) {
;;;1665   			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
;;;1666   			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
;;;1667   #if _USE_LFN
;;;1668   			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1669   #endif
;;;1670   			dp->fs->wflag = 1;
;;;1671   		}
;;;1672   	}
;;;1673   
;;;1674   	return res;
;;;1675   }
000056  e8bd8ffe          POP      {r1-r11,pc}
                  |L12.90|
00005a  2d04              CMP      r5,#4                 ;1633
00005c  d001              BEQ      |L12.98|
00005e  4628              MOV      r0,r5                 ;1633
000060  e7f9              B        |L12.86|
                  |L12.98|
000062  f89d000b          LDRB     r0,[sp,#0xb]          ;1634
000066  f888000b          STRB     r0,[r8,#0xb]          ;1634
00006a  f8c4901c          STR      r9,[r4,#0x1c]         ;1634
                  |L12.110|
00006e  f89d000b          LDRB     r0,[sp,#0xb]          ;1637
000072  f0100f02          TST      r0,#2                 ;1637
000076  d00c              BEQ      |L12.146|
000078  2600              MOVS     r6,#0                 ;1638
00007a  e000              B        |L12.126|
                  |L12.124|
00007c  1c76              ADDS     r6,r6,#1              ;1638
                  |L12.126|
00007e  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1638
000082  2800              CMP      r0,#0                 ;1638
000084  d1fa              BNE      |L12.124|
000086  f1060019          ADD      r0,r6,#0x19           ;1639
00008a  210d              MOVS     r1,#0xd               ;1639
00008c  fbb0f7f1          UDIV     r7,r0,r1              ;1639
000090  e000              B        |L12.148|
                  |L12.146|
000092  2701              MOVS     r7,#1                 ;1641
                  |L12.148|
000094  4639              MOV      r1,r7                 ;1643
000096  4620              MOV      r0,r4                 ;1643
000098  f7fffffe          BL       dir_alloc
00009c  4605              MOV      r5,r0                 ;1643
00009e  bb45              CBNZ     r5,|L12.242|
0000a0  1e78              SUBS     r0,r7,#1              ;1645
0000a2  0007              MOVS     r7,r0                 ;1645
0000a4  d025              BEQ      |L12.242|
0000a6  88e0              LDRH     r0,[r4,#6]            ;1646
0000a8  1bc1              SUBS     r1,r0,r7              ;1646
0000aa  4620              MOV      r0,r4                 ;1646
0000ac  f7fffffe          BL       dir_sdi
0000b0  4605              MOV      r5,r0                 ;1646
0000b2  b9f5              CBNZ     r5,|L12.242|
0000b4  69a0              LDR      r0,[r4,#0x18]         ;1648
0000b6  f7fffffe          BL       sum_sfn
0000ba  4682              MOV      r10,r0                ;1648
0000bc  bf00              NOP                            ;1649
                  |L12.190|
0000be  6921              LDR      r1,[r4,#0x10]         ;1650
0000c0  6820              LDR      r0,[r4,#0]            ;1650
0000c2  f7fffffe          BL       move_window
0000c6  4605              MOV      r5,r0                 ;1650
0000c8  b105              CBZ      r5,|L12.204|
0000ca  e011              B        |L12.240|
                  |L12.204|
0000cc  b2fa              UXTB     r2,r7                 ;1652
0000ce  4653              MOV      r3,r10                ;1652
0000d0  6961              LDR      r1,[r4,#0x14]         ;1652
0000d2  69e0              LDR      r0,[r4,#0x1c]         ;1652
0000d4  f7fffffe          BL       fit_lfn
0000d8  2001              MOVS     r0,#1                 ;1653
0000da  6821              LDR      r1,[r4,#0]            ;1653
0000dc  7108              STRB     r0,[r1,#4]            ;1653
0000de  2100              MOVS     r1,#0                 ;1654
0000e0  4620              MOV      r0,r4                 ;1654
0000e2  f7fffffe          BL       dir_next
0000e6  4605              MOV      r5,r0                 ;1654
0000e8  b915              CBNZ     r5,|L12.240|
0000ea  1e78              SUBS     r0,r7,#1              ;1655
0000ec  0007              MOVS     r7,r0                 ;1655
0000ee  d1e6              BNE      |L12.190|
                  |L12.240|
0000f0  bf00              NOP                            ;1651
                  |L12.242|
0000f2  b9c5              CBNZ     r5,|L12.294|
0000f4  6921              LDR      r1,[r4,#0x10]         ;1663
0000f6  6820              LDR      r0,[r4,#0]            ;1663
0000f8  f7fffffe          BL       move_window
0000fc  4605              MOV      r5,r0                 ;1663
0000fe  b995              CBNZ     r5,|L12.294|
000100  2220              MOVS     r2,#0x20              ;1665
000102  2100              MOVS     r1,#0                 ;1665
000104  6960              LDR      r0,[r4,#0x14]         ;1665
000106  f7fffffe          BL       mem_set
00010a  220b              MOVS     r2,#0xb               ;1666
00010c  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;1666
000110  f7fffffe          BL       mem_cpy
000114  69a0              LDR      r0,[r4,#0x18]         ;1668
000116  7ac0              LDRB     r0,[r0,#0xb]          ;1668
000118  f0000018          AND      r0,r0,#0x18           ;1668
00011c  6961              LDR      r1,[r4,#0x14]         ;1668
00011e  7308              STRB     r0,[r1,#0xc]          ;1668
000120  2001              MOVS     r0,#1                 ;1670
000122  6821              LDR      r1,[r4,#0]            ;1670
000124  7108              STRB     r0,[r1,#4]            ;1670
                  |L12.294|
000126  4628              MOV      r0,r5                 ;1674
000128  e795              B        |L12.86|
;;;1676   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1685   static
;;;1686   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1687   	DIR* dp				/* Directory object pointing the entry to be removed */
;;;1688   )
;;;1689   {
000002  4604              MOV      r4,r0
;;;1690   	FRESULT res;
;;;1691   #if _USE_LFN	/* LFN configuration */
;;;1692   	UINT i;
;;;1693   
;;;1694   	i = dp->index;	/* SFN index */
000004  88e6              LDRH     r6,[r4,#6]
;;;1695   	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
000006  8c20              LDRH     r0,[r4,#0x20]
000008  f5a0427f          SUB      r2,r0,#0xff00
00000c  3aff              SUBS     r2,r2,#0xff
00000e  d101              BNE      |L13.20|
000010  4630              MOV      r0,r6
000012  e000              B        |L13.22|
                  |L13.20|
000014  8c20              LDRH     r0,[r4,#0x20]
                  |L13.22|
000016  4601              MOV      r1,r0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dir_sdi
00001e  4605              MOV      r5,r0
;;;1696   	if (res == FR_OK) {
000020  bb0d              CBNZ     r5,|L13.102|
;;;1697   		do {
000022  bf00              NOP      
                  |L13.36|
;;;1698   			res = move_window(dp->fs, dp->sect);
000024  6921              LDR      r1,[r4,#0x10]
000026  6820              LDR      r0,[r4,#0]
000028  f7fffffe          BL       move_window
00002c  4605              MOV      r5,r0
;;;1699   			if (res != FR_OK) break;
00002e  b105              CBZ      r5,|L13.50|
000030  e015              B        |L13.94|
                  |L13.50|
;;;1700   			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
000032  2220              MOVS     r2,#0x20
000034  2100              MOVS     r1,#0
000036  6960              LDR      r0,[r4,#0x14]
000038  f7fffffe          BL       mem_set
;;;1701   			*dp->dir = DDE;
00003c  20e5              MOVS     r0,#0xe5
00003e  6961              LDR      r1,[r4,#0x14]
000040  7008              STRB     r0,[r1,#0]
;;;1702   			dp->fs->wflag = 1;
000042  2001              MOVS     r0,#1
000044  6821              LDR      r1,[r4,#0]
000046  7108              STRB     r0,[r1,#4]
;;;1703   			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
000048  88e0              LDRH     r0,[r4,#6]
00004a  42b0              CMP      r0,r6
00004c  d300              BCC      |L13.80|
00004e  e006              B        |L13.94|
                  |L13.80|
;;;1704   			res = dir_next(dp, 0);		/* Next entry */
000050  2100              MOVS     r1,#0
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dir_next
000058  4605              MOV      r5,r0
;;;1705   		} while (res == FR_OK);
00005a  2d00              CMP      r5,#0
00005c  d0e2              BEQ      |L13.36|
                  |L13.94|
00005e  bf00              NOP                            ;1699
;;;1706   		if (res == FR_NO_FILE) res = FR_INT_ERR;
000060  2d04              CMP      r5,#4
000062  d100              BNE      |L13.102|
000064  2502              MOVS     r5,#2
                  |L13.102|
;;;1707   	}
;;;1708   
;;;1709   #else			/* Non LFN configuration */
;;;1710   	res = dir_sdi(dp, dp->index);
;;;1711   	if (res == FR_OK) {
;;;1712   		res = move_window(dp->fs, dp->sect);
;;;1713   		if (res == FR_OK) {
;;;1714   			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
;;;1715   			*dp->dir = DDE;
;;;1716   			dp->fs->wflag = 1;
;;;1717   		}
;;;1718   	}
;;;1719   #endif
;;;1720   
;;;1721   	return res;
000066  4628              MOV      r0,r5
;;;1722   }
000068  bd70              POP      {r4-r6,pc}
;;;1723   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_sdi||, CODE, READONLY, ALIGN=1

                  dir_sdi PROC
;;;1114   static
;;;1115   FRESULT dir_sdi (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1116   	DIR* dp,		/* Pointer to directory object */
;;;1117   	UINT idx		/* Index of directory table */
;;;1118   )
;;;1119   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1120   	DWORD clst, sect;
;;;1121   	UINT ic;
;;;1122   
;;;1123   
;;;1124   	dp->index = (WORD)idx;	/* Current index */
000008  80e6              STRH     r6,[r4,#6]
;;;1125   	clst = dp->sclust;		/* Table start cluster (0:root) */
00000a  68a5              LDR      r5,[r4,#8]
;;;1126   	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
00000c  2d01              CMP      r5,#1
00000e  d003              BEQ      |L14.24|
000010  6820              LDR      r0,[r4,#0]
000012  6940              LDR      r0,[r0,#0x14]
000014  42a8              CMP      r0,r5
000016  d802              BHI      |L14.30|
                  |L14.24|
;;;1127   		return FR_INT_ERR;
000018  2002              MOVS     r0,#2
                  |L14.26|
;;;1128   	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1129   		clst = dp->fs->dirbase;
;;;1130   
;;;1131   	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
;;;1132   		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
;;;1133   			return FR_INT_ERR;
;;;1134   		sect = dp->fs->dirbase;
;;;1135   	}
;;;1136   	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
;;;1137   		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
;;;1138   		while (idx >= ic) {	/* Follow cluster chain */
;;;1139   			clst = get_fat(dp->fs, clst);				/* Get next cluster */
;;;1140   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1141   			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
;;;1142   				return FR_INT_ERR;
;;;1143   			idx -= ic;
;;;1144   		}
;;;1145   		sect = clust2sect(dp->fs, clst);
;;;1146   	}
;;;1147   	dp->clust = clst;	/* Current cluster# */
;;;1148   	if (!sect) return FR_INT_ERR;
;;;1149   	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
;;;1150   	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
;;;1151   
;;;1152   	return FR_OK;
;;;1153   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L14.30|
00001e  b92d              CBNZ     r5,|L14.44|
000020  6820              LDR      r0,[r4,#0]            ;1128
000022  7800              LDRB     r0,[r0,#0]            ;1128
000024  2803              CMP      r0,#3                 ;1128
000026  d101              BNE      |L14.44|
000028  6820              LDR      r0,[r4,#0]            ;1129
00002a  6a45              LDR      r5,[r0,#0x24]         ;1129
                  |L14.44|
00002c  b945              CBNZ     r5,|L14.64|
00002e  6820              LDR      r0,[r4,#0]            ;1132
000030  8900              LDRH     r0,[r0,#8]            ;1132
000032  42b0              CMP      r0,r6                 ;1132
000034  d801              BHI      |L14.58|
000036  2002              MOVS     r0,#2                 ;1133
000038  e7ef              B        |L14.26|
                  |L14.58|
00003a  6820              LDR      r0,[r4,#0]            ;1134
00003c  6a47              LDR      r7,[r0,#0x24]         ;1134
00003e  e01e              B        |L14.126|
                  |L14.64|
000040  6820              LDR      r0,[r4,#0]            ;1137
000042  7880              LDRB     r0,[r0,#2]            ;1137
000044  ea4f1800          LSL      r8,r0,#4              ;1137
000048  e012              B        |L14.112|
                  |L14.74|
00004a  4629              MOV      r1,r5                 ;1139
00004c  6820              LDR      r0,[r4,#0]            ;1139
00004e  f7fffffe          BL       get_fat
000052  4605              MOV      r5,r0                 ;1139
000054  1c68              ADDS     r0,r5,#1              ;1140
000056  d101              BNE      |L14.92|
000058  2001              MOVS     r0,#1                 ;1140
00005a  e7de              B        |L14.26|
                  |L14.92|
00005c  2d02              CMP      r5,#2                 ;1141
00005e  d303              BCC      |L14.104|
000060  6820              LDR      r0,[r4,#0]            ;1141
000062  6940              LDR      r0,[r0,#0x14]         ;1141
000064  42a8              CMP      r0,r5                 ;1141
000066  d801              BHI      |L14.108|
                  |L14.104|
000068  2002              MOVS     r0,#2                 ;1142
00006a  e7d6              B        |L14.26|
                  |L14.108|
00006c  eba60608          SUB      r6,r6,r8              ;1143
                  |L14.112|
000070  4546              CMP      r6,r8                 ;1138
000072  d2ea              BCS      |L14.74|
000074  4629              MOV      r1,r5                 ;1145
000076  6820              LDR      r0,[r4,#0]            ;1145
000078  f7fffffe          BL       clust2sect
00007c  4607              MOV      r7,r0                 ;1145
                  |L14.126|
00007e  60e5              STR      r5,[r4,#0xc]          ;1147
000080  b90f              CBNZ     r7,|L14.134|
000082  2002              MOVS     r0,#2                 ;1148
000084  e7c9              B        |L14.26|
                  |L14.134|
000086  eb071016          ADD      r0,r7,r6,LSR #4       ;1149
00008a  6120              STR      r0,[r4,#0x10]         ;1149
00008c  6820              LDR      r0,[r4,#0]            ;1150
00008e  3030              ADDS     r0,r0,#0x30           ;1150
000090  f006010f          AND      r1,r6,#0xf            ;1150
000094  eb001041          ADD      r0,r0,r1,LSL #5       ;1150
000098  6160              STR      r0,[r4,#0x14]         ;1150
00009a  2000              MOVS     r0,#0                 ;1152
00009c  e7bd              B        |L14.26|
;;;1154   
                          ENDP


                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=2

                  f_chmod PROC
;;;3580   
;;;3581   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3582   	const TCHAR* path,	/* Pointer to the file path */
;;;3583   	BYTE value,			/* Attribute bits */
;;;3584   	BYTE mask			/* Attribute mask to change */
;;;3585   )
;;;3586   {
000002  b08c              SUB      sp,sp,#0x30
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;3587   	FRESULT res;
;;;3588   	DIR dj;
;;;3589   	BYTE *dir;
;;;3590   	DEF_NAMEBUF;
;;;3591   
;;;3592   
;;;3593   	/* Get logical drive number */
;;;3594   	res = find_volume(&dj.fs, &path, 1);
000008  2201              MOVS     r2,#1
00000a  a90c              ADD      r1,sp,#0x30
00000c  a803              ADD      r0,sp,#0xc
00000e  f7fffffe          BL       find_volume
000012  4606              MOV      r6,r0
;;;3595   	if (res == FR_OK) {
000014  b9ee              CBNZ     r6,|L15.82|
;;;3596   		INIT_BUF(dj);
000016  f8cdd024          STR      sp,[sp,#0x24]
00001a  480f              LDR      r0,|L15.88|
00001c  900a              STR      r0,[sp,#0x28]
;;;3597   		res = follow_path(&dj, path);		/* Follow the file path */
00001e  a803              ADD      r0,sp,#0xc
000020  990c              LDR      r1,[sp,#0x30]
000022  f7fffffe          BL       follow_path
000026  4606              MOV      r6,r0
;;;3598   		FREE_BUF();
;;;3599   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000028  bf00              NOP      
;;;3600   			res = FR_INVALID_NAME;
;;;3601   		if (res == FR_OK) {
00002a  b996              CBNZ     r6,|L15.82|
;;;3602   			dir = dj.dir;
00002c  9d08              LDR      r5,[sp,#0x20]
;;;3603   			if (!dir) {						/* Is it a root directory? */
00002e  b90d              CBNZ     r5,|L15.52|
;;;3604   				res = FR_INVALID_NAME;
000030  2606              MOVS     r6,#6
000032  e00e              B        |L15.82|
                  |L15.52|
;;;3605   			} else {						/* File or sub directory */
;;;3606   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000034  f0040427          AND      r4,r4,#0x27
;;;3607   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
000038  ea070004          AND      r0,r7,r4
00003c  7ae9              LDRB     r1,[r5,#0xb]
00003e  43a1              BICS     r1,r1,r4
000040  4308              ORRS     r0,r0,r1
000042  72e8              STRB     r0,[r5,#0xb]
;;;3608   				dj.fs->wflag = 1;
000044  2001              MOVS     r0,#1
000046  9903              LDR      r1,[sp,#0xc]
000048  7108              STRB     r0,[r1,#4]
;;;3609   				res = sync_fs(dj.fs);
00004a  9803              LDR      r0,[sp,#0xc]
00004c  f7fffffe          BL       sync_fs
000050  4606              MOV      r6,r0
                  |L15.82|
;;;3610   			}
;;;3611   		}
;;;3612   	}
;;;3613   
;;;3614   	LEAVE_FF(dj.fs, res);
000052  4630              MOV      r0,r6
;;;3615   }
000054  b00f              ADD      sp,sp,#0x3c
000056  bdf0              POP      {r4-r7,pc}
;;;3616   
                          ENDP

                  |L15.88|
                          DCD      LfnBuf

                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2818   
;;;2819   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2820   	FIL *fp		/* Pointer to the file object to be closed */
;;;2821   )
;;;2822   {
000002  4605              MOV      r5,r0
;;;2823   	FRESULT res;
;;;2824   
;;;2825   
;;;2826   #if !_FS_READONLY
;;;2827   	res = f_sync(fp);					/* Flush cached data */
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       f_sync
00000a  4604              MOV      r4,r0
;;;2828   	if (res == FR_OK)
00000c  b934              CBNZ     r4,|L16.28|
;;;2829   #endif
;;;2830   	{
;;;2831   		res = validate(fp);				/* Lock volume */
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       validate
000014  4604              MOV      r4,r0
;;;2832   		if (res == FR_OK) {
000016  b90c              CBNZ     r4,|L16.28|
;;;2833   #if _FS_REENTRANT
;;;2834   			FATFS *fs = fp->fs;
;;;2835   #endif
;;;2836   #if _FS_LOCK
;;;2837   			res = dec_lock(fp->lockid);	/* Decrement file open counter */
;;;2838   			if (res == FR_OK)
;;;2839   #endif
;;;2840   				fp->fs = 0;				/* Invalidate file object */
000018  2000              MOVS     r0,#0
00001a  6028              STR      r0,[r5,#0]
                  |L16.28|
;;;2841   #if _FS_REENTRANT
;;;2842   			unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;2843   #endif
;;;2844   		}
;;;2845   	}
;;;2846   	return res;
00001c  4620              MOV      r0,r4
;;;2847   }
00001e  bd70              POP      {r4-r6,pc}
;;;2848   
                          ENDP


                          AREA ||i.f_closedir||, CODE, READONLY, ALIGN=1

                  f_closedir PROC
;;;3204   
;;;3205   FRESULT f_closedir (
000000  b570              PUSH     {r4-r6,lr}
;;;3206   	DIR *dp		/* Pointer to the directory object to be closed */
;;;3207   )
;;;3208   {
000002  4604              MOV      r4,r0
;;;3209   	FRESULT res;
;;;3210   
;;;3211   
;;;3212   	res = validate(dp);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3213   	if (res == FR_OK) {
00000c  b90d              CBNZ     r5,|L17.18|
;;;3214   #if _FS_REENTRANT
;;;3215   		FATFS *fs = dp->fs;
;;;3216   #endif
;;;3217   #if _FS_LOCK
;;;3218   		if (dp->lockid)				/* Decrement sub-directory open counter */
;;;3219   			res = dec_lock(dp->lockid);
;;;3220   		if (res == FR_OK)
;;;3221   #endif
;;;3222   			dp->fs = 0;				/* Invalidate directory object */
00000e  2000              MOVS     r0,#0
000010  6020              STR      r0,[r4,#0]
                  |L17.18|
;;;3223   #if _FS_REENTRANT
;;;3224   		unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;3225   #endif
;;;3226   	}
;;;3227   	return res;
000012  4628              MOV      r0,r5
;;;3228   }
000014  bd70              POP      {r4-r6,pc}
;;;3229   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;3313   
;;;3314   FRESULT f_getfree (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3315   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3316   	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
;;;3317   	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3318   )
;;;3319   {
000004  b082              SUB      sp,sp,#8
000006  468a              MOV      r10,r1
;;;3320   	FRESULT res;
;;;3321   	FATFS *fs;
;;;3322   	DWORD n, clst, sect, stat;
;;;3323   	UINT i;
;;;3324   	BYTE fat, *p;
;;;3325   
;;;3326   
;;;3327   	/* Get logical drive number */
;;;3328   	res = find_volume(fatfs, &path, 0);
000008  2200              MOVS     r2,#0
00000a  a902              ADD      r1,sp,#8
00000c  9804              LDR      r0,[sp,#0x10]
00000e  f7fffffe          BL       find_volume
000012  9001              STR      r0,[sp,#4]
;;;3329   	fs = *fatfs;
000014  9804              LDR      r0,[sp,#0x10]
000016  6804              LDR      r4,[r0,#0]
;;;3330   	if (res == FR_OK) {
000018  9801              LDR      r0,[sp,#4]
00001a  2800              CMP      r0,#0
00001c  d16d              BNE      |L18.250|
;;;3331   		/* If free_clust is valid, return it without full cluster scan */
;;;3332   		if (fs->free_clust <= fs->n_fatent - 2) {
00001e  e9d41004          LDRD     r1,r0,[r4,#0x10]
000022  1e80              SUBS     r0,r0,#2
000024  4281              CMP      r1,r0
000026  d803              BHI      |L18.48|
;;;3333   			*nclst = fs->free_clust;
000028  6920              LDR      r0,[r4,#0x10]
00002a  f8ca0000          STR      r0,[r10,#0]
00002e  e064              B        |L18.250|
                  |L18.48|
;;;3334   		} else {
;;;3335   			/* Get number of free clusters */
;;;3336   			fat = fs->fs_type;
000030  f894b000          LDRB     r11,[r4,#0]
;;;3337   			n = 0;
000034  2600              MOVS     r6,#0
;;;3338   			if (fat == FS_FAT12) {
000036  f1bb0f01          CMP      r11,#1
00003a  d11c              BNE      |L18.118|
;;;3339   				clst = 2;
00003c  2702              MOVS     r7,#2
;;;3340   				do {
00003e  bf00              NOP      
                  |L18.64|
;;;3341   					stat = get_fat(fs, clst);
000040  4639              MOV      r1,r7
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       get_fat
000048  4680              MOV      r8,r0
;;;3342   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
00004a  f1180001          ADDS     r0,r8,#1
00004e  d102              BNE      |L18.86|
000050  2001              MOVS     r0,#1
000052  9001              STR      r0,[sp,#4]
000054  e00e              B        |L18.116|
                  |L18.86|
;;;3343   					if (stat == 1) { res = FR_INT_ERR; break; }
000056  f1b80f01          CMP      r8,#1
00005a  d102              BNE      |L18.98|
00005c  2002              MOVS     r0,#2
00005e  9001              STR      r0,[sp,#4]
000060  e008              B        |L18.116|
                  |L18.98|
;;;3344   					if (stat == 0) n++;
000062  f1b80f00          CMP      r8,#0
000066  d100              BNE      |L18.106|
000068  1c76              ADDS     r6,r6,#1
                  |L18.106|
;;;3345   				} while (++clst < fs->n_fatent);
00006a  1c78              ADDS     r0,r7,#1
00006c  4607              MOV      r7,r0
00006e  6961              LDR      r1,[r4,#0x14]
000070  4288              CMP      r0,r1
000072  d3e5              BCC      |L18.64|
                  |L18.116|
000074  e03a              B        |L18.236|
                  |L18.118|
;;;3346   			} else {
;;;3347   				clst = fs->n_fatent;
000076  6967              LDR      r7,[r4,#0x14]
;;;3348   				sect = fs->fatbase;
000078  6a20              LDR      r0,[r4,#0x20]
00007a  9000              STR      r0,[sp,#0]
;;;3349   				i = 0; p = 0;
00007c  f04f0900          MOV      r9,#0
000080  2500              MOVS     r5,#0
;;;3350   				do {
000082  bf00              NOP      
                  |L18.132|
;;;3351   					if (!i) {
000084  f1b90f00          CMP      r9,#0
000088  d10e              BNE      |L18.168|
;;;3352   						res = move_window(fs, sect++);
00008a  9800              LDR      r0,[sp,#0]
00008c  1c42              ADDS     r2,r0,#1
00008e  4601              MOV      r1,r0
000090  4620              MOV      r0,r4
000092  9200              STR      r2,[sp,#0]
000094  f7fffffe          BL       move_window
000098  9001              STR      r0,[sp,#4]
;;;3353   						if (res != FR_OK) break;
00009a  9801              LDR      r0,[sp,#4]
00009c  b100              CBZ      r0,|L18.160|
00009e  e024              B        |L18.234|
                  |L18.160|
;;;3354   						p = fs->win;
0000a0  f1040530          ADD      r5,r4,#0x30
;;;3355   						i = SS(fs);
0000a4  f44f7900          MOV      r9,#0x200
                  |L18.168|
;;;3356   					}
;;;3357   					if (fat == FS_FAT16) {
0000a8  f1bb0f02          CMP      r11,#2
0000ac  d109              BNE      |L18.194|
;;;3358   						if (LD_WORD(p) == 0) n++;
0000ae  7828              LDRB     r0,[r5,#0]
0000b0  7869              LDRB     r1,[r5,#1]
0000b2  ea502001          ORRS     r0,r0,r1,LSL #8
0000b6  d100              BNE      |L18.186|
0000b8  1c76              ADDS     r6,r6,#1
                  |L18.186|
;;;3359   						p += 2; i -= 2;
0000ba  1cad              ADDS     r5,r5,#2
0000bc  f1a90902          SUB      r9,r9,#2
0000c0  e010              B        |L18.228|
                  |L18.194|
;;;3360   					} else {
;;;3361   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0000c2  78e8              LDRB     r0,[r5,#3]
0000c4  0600              LSLS     r0,r0,#24
0000c6  78a9              LDRB     r1,[r5,#2]
0000c8  ea404001          ORR      r0,r0,r1,LSL #16
0000cc  7869              LDRB     r1,[r5,#1]
0000ce  ea402001          ORR      r0,r0,r1,LSL #8
0000d2  7829              LDRB     r1,[r5,#0]
0000d4  4308              ORRS     r0,r0,r1
0000d6  f0304070          BICS     r0,r0,#0xf0000000
0000da  d100              BNE      |L18.222|
0000dc  1c76              ADDS     r6,r6,#1
                  |L18.222|
;;;3362   						p += 4; i -= 4;
0000de  1d2d              ADDS     r5,r5,#4
0000e0  f1a90904          SUB      r9,r9,#4
                  |L18.228|
;;;3363   					}
;;;3364   				} while (--clst);
0000e4  1e78              SUBS     r0,r7,#1
0000e6  0007              MOVS     r7,r0
0000e8  d1cc              BNE      |L18.132|
                  |L18.234|
0000ea  bf00              NOP                            ;3353
                  |L18.236|
;;;3365   			}
;;;3366   			fs->free_clust = n;
0000ec  6126              STR      r6,[r4,#0x10]
;;;3367   			fs->fsi_flag |= 1;
0000ee  7960              LDRB     r0,[r4,#5]
0000f0  f0400001          ORR      r0,r0,#1
0000f4  7160              STRB     r0,[r4,#5]
;;;3368   			*nclst = n;
0000f6  f8ca6000          STR      r6,[r10,#0]
                  |L18.250|
;;;3369   		}
;;;3370   	}
;;;3371   	LEAVE_FF(fs, res);
0000fa  9801              LDR      r0,[sp,#4]
;;;3372   }
0000fc  b005              ADD      sp,sp,#0x14
0000fe  e8bd8ff0          POP      {r4-r11,pc}
;;;3373   
                          ENDP


                          AREA ||i.f_getlabel||, CODE, READONLY, ALIGN=1

                  f_getlabel PROC
;;;3749   
;;;3750   FRESULT f_getlabel (
000000  e92d41f7          PUSH     {r0-r2,r4-r8,lr}
;;;3751   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3752   	TCHAR* label,		/* Pointer to a buffer to return the volume label */
;;;3753   	DWORD* sn			/* Pointer to a variable to return the volume serial number */
;;;3754   )
;;;3755   {
000004  b089              SUB      sp,sp,#0x24
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;3756   	FRESULT res;
;;;3757   	DIR dj;
;;;3758   	UINT i, j;
;;;3759   
;;;3760   
;;;3761   	/* Get logical drive number */
;;;3762   	res = find_volume(&dj.fs, &path, 0);
00000a  2200              MOVS     r2,#0
00000c  a909              ADD      r1,sp,#0x24
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       find_volume
000014  4604              MOV      r4,r0
;;;3763   
;;;3764   	/* Get volume label */
;;;3765   	if (res == FR_OK && label) {
000016  bb24              CBNZ     r4,|L19.98|
000018  b31d              CBZ      r5,|L19.98|
;;;3766   		dj.sclust = 0;					/* Open root directory */
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;3767   		res = dir_sdi(&dj, 0);
00001e  2100              MOVS     r1,#0
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       dir_sdi
000026  4604              MOV      r4,r0
;;;3768   		if (res == FR_OK) {
000028  b9dc              CBNZ     r4,|L19.98|
;;;3769   			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
00002a  2101              MOVS     r1,#1
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       dir_read
000032  4604              MOV      r4,r0
;;;3770   			if (res == FR_OK) {			/* A volume label is exist */
000034  b984              CBNZ     r4,|L19.88|
;;;3771   #if _USE_LFN && _LFN_UNICODE
;;;3772   				WCHAR w;
;;;3773   				i = j = 0;
;;;3774   				do {
;;;3775   					w = (i < 11) ? dj.dir[i++] : ' ';
;;;3776   					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
;;;3777   						w = w << 8 | dj.dir[i++];
;;;3778   					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
;;;3779   				} while (j < 11);
;;;3780   #else
;;;3781   				mem_cpy(label, dj.dir, 11);
000036  220b              MOVS     r2,#0xb
000038  4628              MOV      r0,r5
00003a  9905              LDR      r1,[sp,#0x14]
00003c  f7fffffe          BL       mem_cpy
;;;3782   #endif
;;;3783   				j = 11;
000040  270b              MOVS     r7,#0xb
;;;3784   				do {
000042  bf00              NOP      
                  |L19.68|
;;;3785   					label[j] = 0;
000044  2000              MOVS     r0,#0
000046  55e8              STRB     r0,[r5,r7]
;;;3786   					if (!j) break;
000048  b907              CBNZ     r7,|L19.76|
00004a  e004              B        |L19.86|
                  |L19.76|
;;;3787   				} while (label[--j] == ' ');
00004c  1e78              SUBS     r0,r7,#1
00004e  4607              MOV      r7,r0
000050  5c28              LDRB     r0,[r5,r0]
000052  2820              CMP      r0,#0x20
000054  d0f6              BEQ      |L19.68|
                  |L19.86|
000056  bf00              NOP                            ;3786
                  |L19.88|
;;;3788   			}
;;;3789   			if (res == FR_NO_FILE) {	/* No label, return nul string */
000058  2c04              CMP      r4,#4
00005a  d102              BNE      |L19.98|
;;;3790   				label[0] = 0;
00005c  2000              MOVS     r0,#0
00005e  7028              STRB     r0,[r5,#0]
;;;3791   				res = FR_OK;
000060  2400              MOVS     r4,#0
                  |L19.98|
;;;3792   			}
;;;3793   		}
;;;3794   	}
;;;3795   
;;;3796   	/* Get volume serial number */
;;;3797   	if (res == FR_OK && sn) {
000062  bb44              CBNZ     r4,|L19.182|
000064  f1b80f00          CMP      r8,#0
000068  d025              BEQ      |L19.182|
;;;3798   		res = move_window(dj.fs, dj.fs->volbase);
00006a  9a00              LDR      r2,[sp,#0]
00006c  4610              MOV      r0,r2
00006e  69d1              LDR      r1,[r2,#0x1c]
000070  f7fffffe          BL       move_window
000074  4604              MOV      r4,r0
;;;3799   		if (res == FR_OK) {
000076  b9f4              CBNZ     r4,|L19.182|
;;;3800   			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
000078  9800              LDR      r0,[sp,#0]
00007a  7800              LDRB     r0,[r0,#0]
00007c  2803              CMP      r0,#3
00007e  d101              BNE      |L19.132|
000080  2043              MOVS     r0,#0x43
000082  e000              B        |L19.134|
                  |L19.132|
000084  2027              MOVS     r0,#0x27
                  |L19.134|
000086  4606              MOV      r6,r0
;;;3801   			*sn = LD_DWORD(&dj.fs->win[i]);
000088  9800              LDR      r0,[sp,#0]
00008a  3030              ADDS     r0,r0,#0x30
00008c  4430              ADD      r0,r0,r6
00008e  78c0              LDRB     r0,[r0,#3]
000090  0601              LSLS     r1,r0,#24
000092  9800              LDR      r0,[sp,#0]
000094  3030              ADDS     r0,r0,#0x30
000096  4430              ADD      r0,r0,r6
000098  7880              LDRB     r0,[r0,#2]
00009a  ea414100          ORR      r1,r1,r0,LSL #16
00009e  9800              LDR      r0,[sp,#0]
0000a0  3030              ADDS     r0,r0,#0x30
0000a2  4430              ADD      r0,r0,r6
0000a4  7840              LDRB     r0,[r0,#1]
0000a6  ea412000          ORR      r0,r1,r0,LSL #8
0000aa  9900              LDR      r1,[sp,#0]
0000ac  3130              ADDS     r1,r1,#0x30
0000ae  5d89              LDRB     r1,[r1,r6]
0000b0  4308              ORRS     r0,r0,r1
0000b2  f8c80000          STR      r0,[r8,#0]
                  |L19.182|
;;;3802   		}
;;;3803   	}
;;;3804   
;;;3805   	LEAVE_FF(dj.fs, res);
0000b6  4620              MOV      r0,r4
;;;3806   }
0000b8  b00c              ADD      sp,sp,#0x30
0000ba  e8bd81f0          POP      {r4-r8,pc}
;;;3807   
                          ENDP


                          AREA ||i.f_gets||, CODE, READONLY, ALIGN=1

                  f_gets PROC
;;;4290   
;;;4291   TCHAR* f_gets (
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;4292   	TCHAR* buff,	/* Pointer to the string buffer to read */
;;;4293   	int len,		/* Size of string buffer (characters) */
;;;4294   	FIL* fp			/* Pointer to the file object */
;;;4295   )
;;;4296   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
;;;4297   	int n = 0;
00000a  2400              MOVS     r4,#0
;;;4298   	TCHAR c, *p = buff;
00000c  463e              MOV      r6,r7
;;;4299   	BYTE s[2];
;;;4300   	UINT rc;
;;;4301   
;;;4302   
;;;4303   	while (n < len - 1) {	/* Read characters until buffer gets filled */
00000e  e013              B        |L20.56|
                  |L20.16|
;;;4304   #if _USE_LFN && _LFN_UNICODE
;;;4305   #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
;;;4306   		f_read(fp, s, 1, &rc);
;;;4307   		if (rc != 1) break;
;;;4308   		c = s[0];
;;;4309   		if (c >= 0x80) {
;;;4310   			if (c < 0xC0) continue;	/* Skip stray trailer */
;;;4311   			if (c < 0xE0) {			/* Two-byte sequence */
;;;4312   				f_read(fp, s, 1, &rc);
;;;4313   				if (rc != 1) break;
;;;4314   				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
;;;4315   				if (c < 0x80) c = '?';
;;;4316   			} else {
;;;4317   				if (c < 0xF0) {		/* Three-byte sequence */
;;;4318   					f_read(fp, s, 2, &rc);
;;;4319   					if (rc != 2) break;
;;;4320   					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
;;;4321   					if (c < 0x800) c = '?';
;;;4322   				} else {			/* Reject four-byte sequence */
;;;4323   					c = '?';
;;;4324   				}
;;;4325   			}
;;;4326   		}
;;;4327   #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
;;;4328   		f_read(fp, s, 2, &rc);
;;;4329   		if (rc != 2) break;
;;;4330   		c = s[1] + (s[0] << 8);
;;;4331   #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
;;;4332   		f_read(fp, s, 2, &rc);
;;;4333   		if (rc != 2) break;
;;;4334   		c = s[0] + (s[1] << 8);
;;;4335   #else						/* Read a character in ANSI/OEM */
;;;4336   		f_read(fp, s, 1, &rc);
;;;4337   		if (rc != 1) break;
;;;4338   		c = s[0];
;;;4339   		if (IsDBCS1(c)) {
;;;4340   			f_read(fp, s, 1, &rc);
;;;4341   			if (rc != 1) break;
;;;4342   			c = (c << 8) + s[0];
;;;4343   		}
;;;4344   		c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;4345   		if (!c) c = '?';
;;;4346   #endif
;;;4347   #else						/* Read a character without conversion */
;;;4348   		f_read(fp, s, 1, &rc);
000010  466b              MOV      r3,sp
000012  2201              MOVS     r2,#1
000014  a901              ADD      r1,sp,#4
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       f_read
;;;4349   		if (rc != 1) break;
00001c  9800              LDR      r0,[sp,#0]
00001e  2801              CMP      r0,#1
000020  d000              BEQ      |L20.36|
000022  e00d              B        |L20.64|
                  |L20.36|
;;;4350   		c = s[0];
000024  f89d5004          LDRB     r5,[sp,#4]
;;;4351   #endif
;;;4352   		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
000028  bf00              NOP      
;;;4353   		*p++ = c;
00002a  f8065b01          STRB     r5,[r6],#1
;;;4354   		n++;
00002e  1c64              ADDS     r4,r4,#1
;;;4355   		if (c == '\n') break;		/* Break on EOL */
000030  2d0a              CMP      r5,#0xa
000032  d100              BNE      |L20.54|
000034  e004              B        |L20.64|
                  |L20.54|
000036  bf00              NOP                            ;4352
                  |L20.56|
000038  f1a80001          SUB      r0,r8,#1              ;4303
00003c  42a0              CMP      r0,r4                 ;4303
00003e  dce7              BGT      |L20.16|
                  |L20.64|
000040  bf00              NOP                            ;4349
;;;4356   	}
;;;4357   	*p = 0;
000042  2000              MOVS     r0,#0
000044  7030              STRB     r0,[r6,#0]
;;;4358   	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
000046  b114              CBZ      r4,|L20.78|
000048  4638              MOV      r0,r7
                  |L20.74|
;;;4359   }
00004a  e8bd87fc          POP      {r2-r10,pc}
                  |L20.78|
00004e  2000              MOVS     r0,#0                 ;4358
000050  e7fb              B        |L20.74|
;;;4360   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;2990   
;;;2991   FRESULT f_lseek (
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;2992   	FIL* fp,		/* Pointer to the file object */
;;;2993   	DWORD ofs		/* File pointer from top of file */
;;;2994   )
;;;2995   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2996   	FRESULT res;
;;;2997   
;;;2998   
;;;2999   	res = validate(fp);					/* Check validity of the object */
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       validate
00000e  9002              STR      r0,[sp,#8]
;;;3000   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000010  9802              LDR      r0,[sp,#8]
000012  b110              CBZ      r0,|L21.26|
000014  9802              LDR      r0,[sp,#8]
                  |L21.22|
;;;3001   	if (fp->err)						/* Check error */
;;;3002   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;3003   
;;;3004   #if _USE_FASTSEEK
;;;3005   	if (fp->cltbl) {	/* Fast seek */
;;;3006   		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;3007   
;;;3008   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;3009   			tbl = fp->cltbl;
;;;3010   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;3011   			cl = fp->sclust;			/* Top of the chain */
;;;3012   			if (cl) {
;;;3013   				do {
;;;3014   					/* Get a fragment */
;;;3015   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;3016   					do {
;;;3017   						pcl = cl; ncl++;
;;;3018   						cl = get_fat(fp->fs, cl);
;;;3019   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;3020   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3021   					} while (cl == pcl + 1);
;;;3022   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;3023   						*tbl++ = ncl; *tbl++ = tcl;
;;;3024   					}
;;;3025   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;3026   			}
;;;3027   			*fp->cltbl = ulen;	/* Number of items used */
;;;3028   			if (ulen <= tlen)
;;;3029   				*tbl = 0;		/* Terminate table */
;;;3030   			else
;;;3031   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;3032   
;;;3033   		} else {						/* Fast seek */
;;;3034   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;3035   				ofs = fp->fsize;
;;;3036   			fp->fptr = ofs;				/* Set file pointer */
;;;3037   			if (ofs) {
;;;3038   				fp->clust = clmt_clust(fp, ofs - 1);
;;;3039   				dsc = clust2sect(fp->fs, fp->clust);
;;;3040   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;3041   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;3042   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;3043   #if !_FS_TINY
;;;3044   #if !_FS_READONLY
;;;3045   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;3046   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;3047   							ABORT(fp->fs, FR_DISK_ERR);
;;;3048   						fp->flag &= ~FA__DIRTY;
;;;3049   					}
;;;3050   #endif
;;;3051   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1))	/* Load current sector */
;;;3052   						ABORT(fp->fs, FR_DISK_ERR);
;;;3053   #endif
;;;3054   					fp->dsect = dsc;
;;;3055   				}
;;;3056   			}
;;;3057   		}
;;;3058   	} else
;;;3059   #endif
;;;3060   
;;;3061   	/* Normal Seek */
;;;3062   	{
;;;3063   		DWORD clst, bcs, nsect, ifptr;
;;;3064   
;;;3065   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;3066   #if !_FS_READONLY
;;;3067   			 && !(fp->flag & FA_WRITE)
;;;3068   #endif
;;;3069   			) ofs = fp->fsize;
;;;3070   
;;;3071   		ifptr = fp->fptr;
;;;3072   		fp->fptr = nsect = 0;
;;;3073   		if (ofs) {
;;;3074   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;3075   			if (ifptr > 0 &&
;;;3076   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;3077   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;3078   				ofs -= fp->fptr;
;;;3079   				clst = fp->clust;
;;;3080   			} else {									/* When seek to back cluster, */
;;;3081   				clst = fp->sclust;						/* start from the first cluster */
;;;3082   #if !_FS_READONLY
;;;3083   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;3084   					clst = create_chain(fp->fs, 0);
;;;3085   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;3086   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3087   					fp->sclust = clst;
;;;3088   				}
;;;3089   #endif
;;;3090   				fp->clust = clst;
;;;3091   			}
;;;3092   			if (clst != 0) {
;;;3093   				while (ofs > bcs) {						/* Cluster following loop */
;;;3094   #if !_FS_READONLY
;;;3095   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;3096   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;3097   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;3098   							ofs = bcs; break;
;;;3099   						}
;;;3100   					} else
;;;3101   #endif
;;;3102   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;3103   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3104   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;3105   					fp->clust = clst;
;;;3106   					fp->fptr += bcs;
;;;3107   					ofs -= bcs;
;;;3108   				}
;;;3109   				fp->fptr += ofs;
;;;3110   				if (ofs % SS(fp->fs)) {
;;;3111   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;3112   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;3113   					nsect += ofs / SS(fp->fs);
;;;3114   				}
;;;3115   			}
;;;3116   		}
;;;3117   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3118   #if !_FS_TINY
;;;3119   #if !_FS_READONLY
;;;3120   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3121   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;3122   					ABORT(fp->fs, FR_DISK_ERR);
;;;3123   				fp->flag &= ~FA__DIRTY;
;;;3124   			}
;;;3125   #endif
;;;3126   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1))	/* Fill sector cache */
;;;3127   				ABORT(fp->fs, FR_DISK_ERR);
;;;3128   #endif
;;;3129   			fp->dsect = nsect;
;;;3130   		}
;;;3131   #if !_FS_READONLY
;;;3132   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3133   			fp->fsize = fp->fptr;
;;;3134   			fp->flag |= FA__WRITTEN;
;;;3135   		}
;;;3136   #endif
;;;3137   	}
;;;3138   
;;;3139   	LEAVE_FF(fp->fs, res);
;;;3140   }
000016  e8bd8ffe          POP      {r1-r11,pc}
                  |L21.26|
00001a  79e0              LDRB     r0,[r4,#7]            ;3001
00001c  b108              CBZ      r0,|L21.34|
00001e  79e0              LDRB     r0,[r4,#7]            ;3002
000020  e7f9              B        |L21.22|
                  |L21.34|
000022  6a60              LDR      r0,[r4,#0x24]         ;3005
000024  2800              CMP      r0,#0                 ;3005
000026  d070              BEQ      |L21.266|
000028  1c68              ADDS     r0,r5,#1              ;3008
00002a  d13b              BNE      |L21.164|
00002c  f8d48024          LDR      r8,[r4,#0x24]         ;3009
000030  f858ab04          LDR      r10,[r8],#4           ;3010
000034  f04f0902          MOV      r9,#2                 ;3010
000038  6926              LDR      r6,[r4,#0x10]         ;3011
00003a  b33e              CBZ      r6,|L21.140|
00003c  bf00              NOP                            ;3013
                  |L21.62|
00003e  9600              STR      r6,[sp,#0]            ;3015
000040  f04f0b00          MOV      r11,#0                ;3015
000044  f1090902          ADD      r9,r9,#2              ;3015
000048  bf00              NOP                            ;3016
                  |L21.74|
00004a  9601              STR      r6,[sp,#4]            ;3017
00004c  f10b0b01          ADD      r11,r11,#1            ;3017
000050  4631              MOV      r1,r6                 ;3018
000052  6820              LDR      r0,[r4,#0]            ;3018
000054  f7fffffe          BL       get_fat
000058  4606              MOV      r6,r0                 ;3018
00005a  2e01              CMP      r6,#1                 ;3019
00005c  d802              BHI      |L21.100|
00005e  2002              MOVS     r0,#2                 ;3019
000060  71e0              STRB     r0,[r4,#7]            ;3019
000062  e7d8              B        |L21.22|
                  |L21.100|
000064  1c70              ADDS     r0,r6,#1              ;3020
000066  d102              BNE      |L21.110|
000068  2001              MOVS     r0,#1                 ;3020
00006a  71e0              STRB     r0,[r4,#7]            ;3020
00006c  e7d3              B        |L21.22|
                  |L21.110|
00006e  9801              LDR      r0,[sp,#4]            ;3021
000070  1c40              ADDS     r0,r0,#1              ;3021
000072  4286              CMP      r6,r0                 ;3021
000074  d0e9              BEQ      |L21.74|
000076  45d1              CMP      r9,r10                ;3022
000078  d804              BHI      |L21.132|
00007a  f848bb04          STR      r11,[r8],#4           ;3023
00007e  9800              LDR      r0,[sp,#0]            ;3023
000080  f8480b04          STR      r0,[r8],#4            ;3023
                  |L21.132|
000084  6820              LDR      r0,[r4,#0]            ;3025
000086  6940              LDR      r0,[r0,#0x14]         ;3025
000088  42b0              CMP      r0,r6                 ;3025
00008a  d8d8              BHI      |L21.62|
                  |L21.140|
00008c  6a60              LDR      r0,[r4,#0x24]         ;3027
00008e  f8c09000          STR      r9,[r0,#0]            ;3027
000092  45d1              CMP      r9,r10                ;3028
000094  d803              BHI      |L21.158|
000096  2000              MOVS     r0,#0                 ;3029
000098  f8c80000          STR      r0,[r8,#0]            ;3029
00009c  e047              B        |L21.302|
                  |L21.158|
00009e  2011              MOVS     r0,#0x11              ;3031
0000a0  9002              STR      r0,[sp,#8]            ;3031
0000a2  e044              B        |L21.302|
                  |L21.164|
0000a4  68e0              LDR      r0,[r4,#0xc]          ;3034
0000a6  42a8              CMP      r0,r5                 ;3034
0000a8  d200              BCS      |L21.172|
0000aa  68e5              LDR      r5,[r4,#0xc]          ;3035
                  |L21.172|
0000ac  60a5              STR      r5,[r4,#8]            ;3036
0000ae  2d00              CMP      r5,#0                 ;3037
0000b0  d03d              BEQ      |L21.302|
0000b2  1e69              SUBS     r1,r5,#1              ;3038
0000b4  4620              MOV      r0,r4                 ;3038
0000b6  f7fffffe          BL       clmt_clust
0000ba  6160              STR      r0,[r4,#0x14]         ;3038
0000bc  6961              LDR      r1,[r4,#0x14]         ;3039
0000be  6820              LDR      r0,[r4,#0]            ;3039
0000c0  f7fffffe          BL       clust2sect
0000c4  4607              MOV      r7,r0                 ;3039
0000c6  b917              CBNZ     r7,|L21.206|
0000c8  2002              MOVS     r0,#2                 ;3040
0000ca  71e0              STRB     r0,[r4,#7]            ;3040
0000cc  e7a3              B        |L21.22|
                  |L21.206|
0000ce  6820              LDR      r0,[r4,#0]            ;3041
0000d0  7880              LDRB     r0,[r0,#2]            ;3041
0000d2  1e40              SUBS     r0,r0,#1              ;3041
0000d4  1e69              SUBS     r1,r5,#1              ;3041
0000d6  ea002051          AND      r0,r0,r1,LSR #9       ;3041
0000da  4407              ADD      r7,r7,r0              ;3041
0000dc  8920              LDRH     r0,[r4,#8]            ;3042
0000de  05c0              LSLS     r0,r0,#23             ;3042
0000e0  0dc0              LSRS     r0,r0,#23             ;3042
0000e2  d024              BEQ      |L21.302|
0000e4  69a0              LDR      r0,[r4,#0x18]         ;3042
0000e6  42b8              CMP      r0,r7                 ;3042
0000e8  d021              BEQ      |L21.302|
0000ea  79a0              LDRB     r0,[r4,#6]            ;3045
0000ec  f0100f40          TST      r0,#0x40              ;3045
0000f0  d010              BEQ      |L21.276|
0000f2  6821              LDR      r1,[r4,#0]            ;3046
0000f4  7848              LDRB     r0,[r1,#1]            ;3046
0000f6  2301              MOVS     r3,#1                 ;3046
0000f8  f1040128          ADD      r1,r4,#0x28           ;3046
0000fc  69a2              LDR      r2,[r4,#0x18]         ;3046
0000fe  f7fffffe          BL       disk_write
000102  b118              CBZ      r0,|L21.268|
000104  2001              MOVS     r0,#1                 ;3047
000106  71e0              STRB     r0,[r4,#7]            ;3047
000108  e785              B        |L21.22|
                  |L21.266|
00010a  e011              B        |L21.304|
                  |L21.268|
00010c  79a0              LDRB     r0,[r4,#6]            ;3048
00010e  f0200040          BIC      r0,r0,#0x40           ;3048
000112  71a0              STRB     r0,[r4,#6]            ;3048
                  |L21.276|
000114  6821              LDR      r1,[r4,#0]            ;3051
000116  7848              LDRB     r0,[r1,#1]            ;3051
000118  2301              MOVS     r3,#1                 ;3051
00011a  463a              MOV      r2,r7                 ;3051
00011c  f1040128          ADD      r1,r4,#0x28           ;3051
000120  f7fffffe          BL       disk_read
000124  b110              CBZ      r0,|L21.300|
000126  2001              MOVS     r0,#1                 ;3052
000128  71e0              STRB     r0,[r4,#7]            ;3052
00012a  e774              B        |L21.22|
                  |L21.300|
00012c  61a7              STR      r7,[r4,#0x18]         ;3054
                  |L21.302|
00012e  e0ab              B        |L21.648|
                  |L21.304|
000130  68e0              LDR      r0,[r4,#0xc]          ;3065
000132  42a8              CMP      r0,r5                 ;3065
000134  d204              BCS      |L21.320|
000136  79a0              LDRB     r0,[r4,#6]            ;3067
000138  f0100f02          TST      r0,#2                 ;3067
00013c  d100              BNE      |L21.320|
00013e  68e5              LDR      r5,[r4,#0xc]          ;3069
                  |L21.320|
000140  f8d49008          LDR      r9,[r4,#8]            ;3071
000144  f04f0800          MOV      r8,#0                 ;3072
000148  f8c48008          STR      r8,[r4,#8]            ;3072
00014c  2d00              CMP      r5,#0                 ;3073
00014e  d067              BEQ      |L21.544|
000150  6820              LDR      r0,[r4,#0]            ;3074
000152  7880              LDRB     r0,[r0,#2]            ;3074
000154  0247              LSLS     r7,r0,#9              ;3074
000156  f1b90f00          CMP      r9,#0                 ;3075
00015a  d011              BEQ      |L21.384|
00015c  1e68              SUBS     r0,r5,#1              ;3076
00015e  fbb0f1f7          UDIV     r1,r0,r7              ;3076
000162  f1a90001          SUB      r0,r9,#1              ;3076
000166  fbb0f0f7          UDIV     r0,r0,r7              ;3076
00016a  4281              CMP      r1,r0                 ;3076
00016c  d308              BCC      |L21.384|
00016e  f1a90001          SUB      r0,r9,#1              ;3077
000172  1e79              SUBS     r1,r7,#1              ;3077
000174  4388              BICS     r0,r0,r1              ;3077
000176  60a0              STR      r0,[r4,#8]            ;3077
000178  68a0              LDR      r0,[r4,#8]            ;3078
00017a  1a2d              SUBS     r5,r5,r0              ;3078
00017c  6966              LDR      r6,[r4,#0x14]         ;3079
00017e  e012              B        |L21.422|
                  |L21.384|
000180  6926              LDR      r6,[r4,#0x10]         ;3081
000182  b97e              CBNZ     r6,|L21.420|
000184  2100              MOVS     r1,#0                 ;3084
000186  6820              LDR      r0,[r4,#0]            ;3084
000188  f7fffffe          BL       create_chain
00018c  4606              MOV      r6,r0                 ;3084
00018e  2e01              CMP      r6,#1                 ;3085
000190  d102              BNE      |L21.408|
000192  2002              MOVS     r0,#2                 ;3085
000194  71e0              STRB     r0,[r4,#7]            ;3085
000196  e73e              B        |L21.22|
                  |L21.408|
000198  1c70              ADDS     r0,r6,#1              ;3086
00019a  d102              BNE      |L21.418|
00019c  2001              MOVS     r0,#1                 ;3086
00019e  71e0              STRB     r0,[r4,#7]            ;3086
0001a0  e739              B        |L21.22|
                  |L21.418|
0001a2  6126              STR      r6,[r4,#0x10]         ;3087
                  |L21.420|
0001a4  6166              STR      r6,[r4,#0x14]         ;3090
                  |L21.422|
0001a6  b3c6              CBZ      r6,|L21.538|
0001a8  e023              B        |L21.498|
                  |L21.426|
0001aa  79a0              LDRB     r0,[r4,#6]            ;3095
0001ac  f0100f02          TST      r0,#2                 ;3095
0001b0  d007              BEQ      |L21.450|
0001b2  4631              MOV      r1,r6                 ;3096
0001b4  6820              LDR      r0,[r4,#0]            ;3096
0001b6  f7fffffe          BL       create_chain
0001ba  4606              MOV      r6,r0                 ;3096
0001bc  b936              CBNZ     r6,|L21.460|
0001be  463d              MOV      r5,r7                 ;3098
0001c0  e019              B        |L21.502|
                  |L21.450|
0001c2  4631              MOV      r1,r6                 ;3102
0001c4  6820              LDR      r0,[r4,#0]            ;3102
0001c6  f7fffffe          BL       get_fat
0001ca  4606              MOV      r6,r0                 ;3102
                  |L21.460|
0001cc  1c70              ADDS     r0,r6,#1              ;3103
0001ce  d102              BNE      |L21.470|
0001d0  2001              MOVS     r0,#1                 ;3103
0001d2  71e0              STRB     r0,[r4,#7]            ;3103
0001d4  e71f              B        |L21.22|
                  |L21.470|
0001d6  2e01              CMP      r6,#1                 ;3104
0001d8  d903              BLS      |L21.482|
0001da  6820              LDR      r0,[r4,#0]            ;3104
0001dc  6940              LDR      r0,[r0,#0x14]         ;3104
0001de  42b0              CMP      r0,r6                 ;3104
0001e0  d802              BHI      |L21.488|
                  |L21.482|
0001e2  2002              MOVS     r0,#2                 ;3104
0001e4  71e0              STRB     r0,[r4,#7]            ;3104
0001e6  e716              B        |L21.22|
                  |L21.488|
0001e8  6166              STR      r6,[r4,#0x14]         ;3105
0001ea  68a0              LDR      r0,[r4,#8]            ;3106
0001ec  4438              ADD      r0,r0,r7              ;3106
0001ee  60a0              STR      r0,[r4,#8]            ;3106
0001f0  1bed              SUBS     r5,r5,r7              ;3107
                  |L21.498|
0001f2  42bd              CMP      r5,r7                 ;3093
0001f4  d8d9              BHI      |L21.426|
                  |L21.502|
0001f6  bf00              NOP                            ;3098
0001f8  68a0              LDR      r0,[r4,#8]            ;3109
0001fa  4428              ADD      r0,r0,r5              ;3109
0001fc  60a0              STR      r0,[r4,#8]            ;3109
0001fe  05e8              LSLS     r0,r5,#23             ;3110
000200  0dc0              LSRS     r0,r0,#23             ;3110
000202  d00d              BEQ      |L21.544|
000204  4631              MOV      r1,r6                 ;3111
000206  6820              LDR      r0,[r4,#0]            ;3111
000208  f7fffffe          BL       clust2sect
00020c  4680              MOV      r8,r0                 ;3111
00020e  f1b80f00          CMP      r8,#0                 ;3112
000212  d103              BNE      |L21.540|
000214  2002              MOVS     r0,#2                 ;3112
000216  71e0              STRB     r0,[r4,#7]            ;3112
000218  e6fd              B        |L21.22|
                  |L21.538|
00021a  e001              B        |L21.544|
                  |L21.540|
00021c  eb082855          ADD      r8,r8,r5,LSR #9       ;3113
                  |L21.544|
000220  8920              LDRH     r0,[r4,#8]            ;3117
000222  05c0              LSLS     r0,r0,#23             ;3117
000224  0dc0              LSRS     r0,r0,#23             ;3117
000226  d024              BEQ      |L21.626|
000228  69a0              LDR      r0,[r4,#0x18]         ;3117
00022a  4540              CMP      r0,r8                 ;3117
00022c  d021              BEQ      |L21.626|
00022e  79a0              LDRB     r0,[r4,#6]            ;3120
000230  f0100f40          TST      r0,#0x40              ;3120
000234  d00f              BEQ      |L21.598|
000236  6821              LDR      r1,[r4,#0]            ;3121
000238  7848              LDRB     r0,[r1,#1]            ;3121
00023a  2301              MOVS     r3,#1                 ;3121
00023c  f1040128          ADD      r1,r4,#0x28           ;3121
000240  69a2              LDR      r2,[r4,#0x18]         ;3121
000242  f7fffffe          BL       disk_write
000246  b110              CBZ      r0,|L21.590|
000248  2001              MOVS     r0,#1                 ;3122
00024a  71e0              STRB     r0,[r4,#7]            ;3122
00024c  e6e3              B        |L21.22|
                  |L21.590|
00024e  79a0              LDRB     r0,[r4,#6]            ;3123
000250  f0200040          BIC      r0,r0,#0x40           ;3123
000254  71a0              STRB     r0,[r4,#6]            ;3123
                  |L21.598|
000256  6821              LDR      r1,[r4,#0]            ;3126
000258  7848              LDRB     r0,[r1,#1]            ;3126
00025a  2301              MOVS     r3,#1                 ;3126
00025c  4642              MOV      r2,r8                 ;3126
00025e  f1040128          ADD      r1,r4,#0x28           ;3126
000262  f7fffffe          BL       disk_read
000266  b110              CBZ      r0,|L21.622|
000268  2001              MOVS     r0,#1                 ;3127
00026a  71e0              STRB     r0,[r4,#7]            ;3127
00026c  e6d3              B        |L21.22|
                  |L21.622|
00026e  f8c48018          STR      r8,[r4,#0x18]         ;3129
                  |L21.626|
000272  e9d40102          LDRD     r0,r1,[r4,#8]         ;3132
000276  4288              CMP      r0,r1                 ;3132
000278  d905              BLS      |L21.646|
00027a  68a0              LDR      r0,[r4,#8]            ;3133
00027c  60e0              STR      r0,[r4,#0xc]          ;3133
00027e  79a0              LDRB     r0,[r4,#6]            ;3134
000280  f0400020          ORR      r0,r0,#0x20           ;3134
000284  71a0              STRB     r0,[r4,#6]            ;3134
                  |L21.646|
000286  bf00              NOP                            ;3137
                  |L21.648|
000288  9802              LDR      r0,[sp,#8]            ;3139
00028a  e6c4              B        |L21.22|
;;;3141   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=2

                  f_mkdir PROC
;;;3506   
;;;3507   FRESULT f_mkdir (
000000  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3508   	const TCHAR* path		/* Pointer to the directory path */
;;;3509   )
;;;3510   {
000004  b08d              SUB      sp,sp,#0x34
;;;3511   	FRESULT res;
;;;3512   	DIR dj;
;;;3513   	BYTE *dir, n;
;;;3514   	DWORD dsc, dcl, pcl, tm = get_fattime();
000006  f7fffffe          BL       get_fattime
00000a  4606              MOV      r6,r0
;;;3515   	DEF_NAMEBUF;
;;;3516   
;;;3517   
;;;3518   	/* Get logical drive number */
;;;3519   	res = find_volume(&dj.fs, &path, 1);
00000c  2201              MOVS     r2,#1
00000e  a90d              ADD      r1,sp,#0x34
000010  a804              ADD      r0,sp,#0x10
000012  f7fffffe          BL       find_volume
000016  4605              MOV      r5,r0
;;;3520   	if (res == FR_OK) {
000018  2d00              CMP      r5,#0
                  |L22.26|
00001a  d16f              BNE      |L22.252|
;;;3521   		INIT_BUF(dj);
00001c  a801              ADD      r0,sp,#4
00001e  900a              STR      r0,[sp,#0x28]
000020  4850              LDR      r0,|L22.356|
000022  900b              STR      r0,[sp,#0x2c]
;;;3522   		res = follow_path(&dj, path);			/* Follow the file path */
000024  a804              ADD      r0,sp,#0x10
000026  990d              LDR      r1,[sp,#0x34]
000028  f7fffffe          BL       follow_path
00002c  4605              MOV      r5,r0
;;;3523   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
00002e  b905              CBNZ     r5,|L22.50|
000030  2508              MOVS     r5,#8
                  |L22.50|
;;;3524   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
000032  bf00              NOP      
;;;3525   			res = FR_INVALID_NAME;
;;;3526   		if (res == FR_NO_FILE) {				/* Can create a new directory */
000034  2d04              CMP      r5,#4
000036  d1f0              BNE      |L22.26|
;;;3527   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
000038  2100              MOVS     r1,#0
00003a  9804              LDR      r0,[sp,#0x10]
00003c  f7fffffe          BL       create_chain
000040  4607              MOV      r7,r0
;;;3528   			res = FR_OK;
000042  2500              MOVS     r5,#0
;;;3529   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
000044  b907              CBNZ     r7,|L22.72|
000046  2507              MOVS     r5,#7
                  |L22.72|
;;;3530   			if (dcl == 1) res = FR_INT_ERR;
000048  2f01              CMP      r7,#1
00004a  d100              BNE      |L22.78|
00004c  2502              MOVS     r5,#2
                  |L22.78|
;;;3531   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
00004e  1c78              ADDS     r0,r7,#1
000050  d100              BNE      |L22.84|
000052  2501              MOVS     r5,#1
                  |L22.84|
;;;3532   			if (res == FR_OK)					/* Flush FAT */
000054  b91d              CBNZ     r5,|L22.94|
;;;3533   				res = sync_window(dj.fs);
000056  9804              LDR      r0,[sp,#0x10]
000058  f7fffffe          BL       sync_window
00005c  4605              MOV      r5,r0
                  |L22.94|
;;;3534   			if (res == FR_OK) {					/* Initialize the new directory table */
00005e  2d00              CMP      r5,#0
000060  d15b              BNE      |L22.282|
;;;3535   				dsc = clust2sect(dj.fs, dcl);
000062  4639              MOV      r1,r7
000064  9804              LDR      r0,[sp,#0x10]
000066  f7fffffe          BL       clust2sect
00006a  4681              MOV      r9,r0
;;;3536   				dir = dj.fs->win;
00006c  9804              LDR      r0,[sp,#0x10]
00006e  f1000430          ADD      r4,r0,#0x30
;;;3537   				mem_set(dir, 0, SS(dj.fs));
000072  f44f7200          MOV      r2,#0x200
000076  2100              MOVS     r1,#0
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       mem_set
;;;3538   				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
00007e  220b              MOVS     r2,#0xb
000080  2120              MOVS     r1,#0x20
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       mem_set
;;;3539   				dir[DIR_Name] = '.';
000088  202e              MOVS     r0,#0x2e
00008a  7020              STRB     r0,[r4,#0]
;;;3540   				dir[DIR_Attr] = AM_DIR;
00008c  2010              MOVS     r0,#0x10
00008e  72e0              STRB     r0,[r4,#0xb]
;;;3541   				ST_DWORD(dir+DIR_WrtTime, tm);
000090  75a6              STRB     r6,[r4,#0x16]
000092  0a31              LSRS     r1,r6,#8
000094  75e1              STRB     r1,[r4,#0x17]
000096  0c31              LSRS     r1,r6,#16
000098  7621              STRB     r1,[r4,#0x18]
00009a  0e31              LSRS     r1,r6,#24
00009c  7661              STRB     r1,[r4,#0x19]
;;;3542   				st_clust(dir, dcl);
00009e  4639              MOV      r1,r7
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       st_clust
;;;3543   				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
0000a6  2220              MOVS     r2,#0x20
0000a8  4621              MOV      r1,r4
0000aa  f1040020          ADD      r0,r4,#0x20
0000ae  f7fffffe          BL       mem_cpy
;;;3544   				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
0000b2  202e              MOVS     r0,#0x2e
0000b4  f8840021          STRB     r0,[r4,#0x21]
0000b8  f8dda018          LDR      r10,[sp,#0x18]
;;;3545   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0000bc  9804              LDR      r0,[sp,#0x10]
0000be  7800              LDRB     r0,[r0,#0]
0000c0  2803              CMP      r0,#3
0000c2  d104              BNE      |L22.206|
0000c4  9804              LDR      r0,[sp,#0x10]
0000c6  6a40              LDR      r0,[r0,#0x24]
0000c8  4550              CMP      r0,r10
0000ca  d100              BNE      |L22.206|
;;;3546   					pcl = 0;
0000cc  46aa              MOV      r10,r5
                  |L22.206|
;;;3547   				st_clust(dir+SZ_DIR, pcl);
0000ce  4651              MOV      r1,r10
0000d0  f1040020          ADD      r0,r4,#0x20
0000d4  f7fffffe          BL       st_clust
;;;3548   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
0000d8  9804              LDR      r0,[sp,#0x10]
0000da  f8908002          LDRB     r8,[r0,#2]
0000de  e018              B        |L22.274|
                  |L22.224|
;;;3549   					dj.fs->winsect = dsc++;
0000e0  9804              LDR      r0,[sp,#0x10]
0000e2  f8c0902c          STR      r9,[r0,#0x2c]
0000e6  f1090901          ADD      r9,r9,#1
;;;3550   					dj.fs->wflag = 1;
0000ea  2001              MOVS     r0,#1
0000ec  9904              LDR      r1,[sp,#0x10]
0000ee  7108              STRB     r0,[r1,#4]
;;;3551   					res = sync_window(dj.fs);
0000f0  9804              LDR      r0,[sp,#0x10]
0000f2  f7fffffe          BL       sync_window
0000f6  4605              MOV      r5,r0
;;;3552   					if (res != FR_OK) break;
0000f8  b10d              CBZ      r5,|L22.254|
0000fa  e00d              B        |L22.280|
                  |L22.252|
0000fc  e02d              B        |L22.346|
                  |L22.254|
;;;3553   					mem_set(dir, 0, SS(dj.fs));
0000fe  f44f7200          MOV      r2,#0x200
000102  2100              MOVS     r1,#0
000104  4620              MOV      r0,r4
000106  f7fffffe          BL       mem_set
00010a  f1a80001          SUB      r0,r8,#1              ;3548
00010e  f00008ff          AND      r8,r0,#0xff           ;3548
                  |L22.274|
000112  f1b80f00          CMP      r8,#0                 ;3548
000116  d1e3              BNE      |L22.224|
                  |L22.280|
000118  bf00              NOP                            ;3552
                  |L22.282|
;;;3554   				}
;;;3555   			}
;;;3556   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
00011a  b91d              CBNZ     r5,|L22.292|
00011c  a804              ADD      r0,sp,#0x10
00011e  f7fffffe          BL       dir_register
000122  4605              MOV      r5,r0
                  |L22.292|
;;;3557   			if (res != FR_OK) {
000124  b125              CBZ      r5,|L22.304|
;;;3558   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
000126  4639              MOV      r1,r7
000128  9804              LDR      r0,[sp,#0x10]
00012a  f7fffffe          BL       remove_chain
00012e  e014              B        |L22.346|
                  |L22.304|
;;;3559   			} else {
;;;3560   				dir = dj.dir;
000130  9c09              LDR      r4,[sp,#0x24]
;;;3561   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
000132  2010              MOVS     r0,#0x10
000134  72e0              STRB     r0,[r4,#0xb]
;;;3562   				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
000136  75a6              STRB     r6,[r4,#0x16]
000138  0a31              LSRS     r1,r6,#8
00013a  75e1              STRB     r1,[r4,#0x17]
00013c  0c31              LSRS     r1,r6,#16
00013e  7621              STRB     r1,[r4,#0x18]
000140  0e31              LSRS     r1,r6,#24
000142  7661              STRB     r1,[r4,#0x19]
;;;3563   				st_clust(dir, dcl);					/* Table start cluster */
000144  4639              MOV      r1,r7
000146  4620              MOV      r0,r4
000148  f7fffffe          BL       st_clust
;;;3564   				dj.fs->wflag = 1;
00014c  2001              MOVS     r0,#1
00014e  9904              LDR      r1,[sp,#0x10]
000150  7108              STRB     r0,[r1,#4]
;;;3565   				res = sync_fs(dj.fs);
000152  9804              LDR      r0,[sp,#0x10]
000154  f7fffffe          BL       sync_fs
000158  4605              MOV      r5,r0
                  |L22.346|
;;;3566   			}
;;;3567   		}
;;;3568   		FREE_BUF();
;;;3569   	}
;;;3570   
;;;3571   	LEAVE_FF(dj.fs, res);
00015a  4628              MOV      r0,r5
;;;3572   }
00015c  b00e              ADD      sp,sp,#0x38
00015e  e8bd87f0          POP      {r4-r10,pc}
;;;3573   
                          ENDP

000162  0000              DCW      0x0000
                  |L22.356|
                          DCD      LfnBuf

                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;3972   
;;;3973   FRESULT f_mkfs (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3974   	const TCHAR* path,	/* Logical drive number */
;;;3975   	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
;;;3976   	UINT au				/* Allocation unit [bytes] */
;;;3977   )
;;;3978   {
000004  b090              SUB      sp,sp,#0x40
000006  4691              MOV      r9,r2
;;;3979   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;3980   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;3981   	int vol;
;;;3982   	BYTE fmt, md, sys, *tbl, pdrv, part;
;;;3983   	DWORD n_clst, vs, n, wsect;
;;;3984   	UINT i;
;;;3985   	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
;;;3986   	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
;;;3987   	FATFS *fs;
;;;3988   	DSTATUS stat;
;;;3989   
;;;3990   
;;;3991   	/* Check mounted drive and clear work area */
;;;3992   	vol = get_ldnumber(&path);
000008  a810              ADD      r0,sp,#0x40
00000a  f7fffffe          BL       get_ldnumber
00000e  900f              STR      r0,[sp,#0x3c]
;;;3993   	if (vol < 0) return FR_INVALID_DRIVE;
000010  980f              LDR      r0,[sp,#0x3c]
000012  2800              CMP      r0,#0
000014  da03              BGE      |L23.30|
000016  200b              MOVS     r0,#0xb
                  |L23.24|
;;;3994   	if (sfd > 1) return FR_INVALID_PARAMETER;
;;;3995   	if (au & (au - 1)) return FR_INVALID_PARAMETER;
;;;3996   	fs = FatFs[vol];
;;;3997   	if (!fs) return FR_NOT_ENABLED;
;;;3998   	fs->fs_type = 0;
;;;3999   	pdrv = LD2PD(vol);	/* Physical drive */
;;;4000   	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
;;;4001   
;;;4002   	/* Get disk statics */
;;;4003   	stat = disk_initialize(pdrv);
;;;4004   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;4005   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;4006   #if _MAX_SS != _MIN_SS		/* Get disk sector size */
;;;4007   	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
;;;4008   		return FR_DISK_ERR;
;;;4009   #endif
;;;4010   	if (_MULTI_PARTITION && part) {
;;;4011   		/* Get partition information from partition table in the MBR */
;;;4012   		if (disk_read(pdrv, fs->win, 0, 1)) return FR_DISK_ERR;
;;;4013   		if (LD_WORD(fs->win+BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
;;;4014   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4015   		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
;;;4016   		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
;;;4017   		n_vol = LD_DWORD(tbl+12);	/* Volume size */
;;;4018   	} else {
;;;4019   		/* Create a partition in this function */
;;;4020   		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;4021   			return FR_DISK_ERR;
;;;4022   		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
;;;4023   		n_vol -= b_vol;				/* Volume size */
;;;4024   	}
;;;4025   
;;;4026   	if (!au) {				/* AU auto selection */
;;;4027   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;4028   		for (i = 0; vs < vst[i]; i++) ;
;;;4029   		au = cst[i];
;;;4030   	}
;;;4031   	au /= SS(fs);		/* Number of sectors per cluster */
;;;4032   	if (au == 0) au = 1;
;;;4033   	if (au > 128) au = 128;
;;;4034   
;;;4035   	/* Pre-compute number of clusters and FAT sub-type */
;;;4036   	n_clst = n_vol / au;
;;;4037   	fmt = FS_FAT12;
;;;4038   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;4039   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;4040   
;;;4041   	/* Determine offset and size of FAT structure */
;;;4042   	if (fmt == FS_FAT32) {
;;;4043   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;4044   		n_rsv = 32;
;;;4045   		n_dir = 0;
;;;4046   	} else {
;;;4047   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;4048   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;4049   		n_rsv = 1;
;;;4050   		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
;;;4051   	}
;;;4052   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;4053   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;4054   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;4055   	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
;;;4056   
;;;4057   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;4058   	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;4059   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
;;;4060   	n = (n - b_data) / N_FATS;
;;;4061   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
;;;4062   		n_rsv += n;
;;;4063   		b_fat += n;
;;;4064   	} else {					/* FAT12/16: Expand FAT size */
;;;4065   		n_fat += n;
;;;4066   	}
;;;4067   
;;;4068   	/* Determine number of clusters and final check of validity of the FAT sub-type */
;;;4069   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;4070   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;4071   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;4072   		return FR_MKFS_ABORTED;
;;;4073   
;;;4074   	/* Determine system ID in the partition table */
;;;4075   	if (fmt == FS_FAT32) {
;;;4076   		sys = 0x0C;		/* FAT32X */
;;;4077   	} else {
;;;4078   		if (fmt == FS_FAT12 && n_vol < 0x10000) {
;;;4079   			sys = 0x01;	/* FAT12(<65536) */
;;;4080   		} else {
;;;4081   			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
;;;4082   		}
;;;4083   	}
;;;4084   
;;;4085   	if (_MULTI_PARTITION && part) {
;;;4086   		/* Update system ID in the partition table */
;;;4087   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4088   		tbl[4] = sys;
;;;4089   		if (disk_write(pdrv, fs->win, 0, 1))	/* Write it to teh MBR */
;;;4090   			return FR_DISK_ERR;
;;;4091   		md = 0xF8;
;;;4092   	} else {
;;;4093   		if (sfd) {	/* No partition table (SFD) */
;;;4094   			md = 0xF0;
;;;4095   		} else {	/* Create partition table (FDISK) */
;;;4096   			mem_set(fs->win, 0, SS(fs));
;;;4097   			tbl = fs->win+MBR_Table;	/* Create partition table for single partition in the drive */
;;;4098   			tbl[1] = 1;						/* Partition start head */
;;;4099   			tbl[2] = 1;						/* Partition start sector */
;;;4100   			tbl[3] = 0;						/* Partition start cylinder */
;;;4101   			tbl[4] = sys;					/* System type */
;;;4102   			tbl[5] = 254;					/* Partition end head */
;;;4103   			n = (b_vol + n_vol) / 63 / 255;
;;;4104   			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
;;;4105   			tbl[7] = (BYTE)n;				/* End cylinder */
;;;4106   			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
;;;4107   			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
;;;4108   			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
;;;4109   			if (disk_write(pdrv, fs->win, 0, 1))	/* Write it to the MBR */
;;;4110   				return FR_DISK_ERR;
;;;4111   			md = 0xF8;
;;;4112   		}
;;;4113   	}
;;;4114   
;;;4115   	/* Create BPB in the VBR */
;;;4116   	tbl = fs->win;							/* Clear sector */
;;;4117   	mem_set(tbl, 0, SS(fs));
;;;4118   	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;4119   	i = SS(fs);								/* Sector size */
;;;4120   	ST_WORD(tbl+BPB_BytsPerSec, i);
;;;4121   	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
;;;4122   	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
;;;4123   	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
;;;4124   	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
;;;4125   	ST_WORD(tbl+BPB_RootEntCnt, i);
;;;4126   	if (n_vol < 0x10000) {					/* Number of total sectors */
;;;4127   		ST_WORD(tbl+BPB_TotSec16, n_vol);
;;;4128   	} else {
;;;4129   		ST_DWORD(tbl+BPB_TotSec32, n_vol);
;;;4130   	}
;;;4131   	tbl[BPB_Media] = md;					/* Media descriptor */
;;;4132   	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
;;;4133   	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
;;;4134   	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
;;;4135   	n = get_fattime();						/* Use current time as VSN */
;;;4136   	if (fmt == FS_FAT32) {
;;;4137   		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
;;;4138   		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
;;;4139   		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
;;;4140   		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
;;;4141   		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
;;;4142   		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
;;;4143   		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
;;;4144   		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
;;;4145   	} else {
;;;4146   		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
;;;4147   		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
;;;4148   		tbl[BS_DrvNum] = 0x80;				/* Drive number */
;;;4149   		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
;;;4150   		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
;;;4151   	}
;;;4152   	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
;;;4153   	if (disk_write(pdrv, tbl, b_vol, 1))	/* Write it to the VBR sector */
;;;4154   		return FR_DISK_ERR;
;;;4155   	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR+6) */
;;;4156   		disk_write(pdrv, tbl, b_vol + 6, 1);
;;;4157   
;;;4158   	/* Initialize FAT area */
;;;4159   	wsect = b_fat;
;;;4160   	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
;;;4161   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;4162   		n = md;								/* Media descriptor byte */
;;;4163   		if (fmt != FS_FAT32) {
;;;4164   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;4165   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
;;;4166   		} else {
;;;4167   			n |= 0xFFFFFF00;
;;;4168   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
;;;4169   			ST_DWORD(tbl+4, 0xFFFFFFFF);
;;;4170   			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
;;;4171   		}
;;;4172   		if (disk_write(pdrv, tbl, wsect++, 1))
;;;4173   			return FR_DISK_ERR;
;;;4174   		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
;;;4175   		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
;;;4176   			if (disk_write(pdrv, tbl, wsect++, 1))
;;;4177   				return FR_DISK_ERR;
;;;4178   		}
;;;4179   	}
;;;4180   
;;;4181   	/* Initialize root directory */
;;;4182   	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
;;;4183   	do {
;;;4184   		if (disk_write(pdrv, tbl, wsect++, 1))
;;;4185   			return FR_DISK_ERR;
;;;4186   	} while (--i);
;;;4187   
;;;4188   #if _USE_ERASE	/* Erase data area if needed */
;;;4189   	{
;;;4190   		DWORD eb[2];
;;;4191   
;;;4192   		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;4193   		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
;;;4194   	}
;;;4195   #endif
;;;4196   
;;;4197   	/* Create FSINFO if needed */
;;;4198   	if (fmt == FS_FAT32) {
;;;4199   		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;4200   		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;4201   		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
;;;4202   		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
;;;4203   		ST_WORD(tbl+BS_55AA, 0xAA55);
;;;4204   		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
;;;4205   		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
;;;4206   	}
;;;4207   
;;;4208   	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;4209   }
000018  b013              ADD      sp,sp,#0x4c
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L23.30|
00001e  9811              LDR      r0,[sp,#0x44]         ;3994
000020  2801              CMP      r0,#1                 ;3994
000022  dd01              BLE      |L23.40|
000024  2013              MOVS     r0,#0x13              ;3994
000026  e7f7              B        |L23.24|
                  |L23.40|
000028  f1a90001          SUB      r0,r9,#1              ;3995
00002c  ea100f09          TST      r0,r9                 ;3995
000030  d001              BEQ      |L23.54|
000032  2013              MOVS     r0,#0x13              ;3995
000034  e7f0              B        |L23.24|
                  |L23.54|
000036  49fe              LDR      r1,|L23.1072|
000038  980f              LDR      r0,[sp,#0x3c]         ;3996
00003a  f851b020          LDR      r11,[r1,r0,LSL #2]    ;3996
00003e  f1bb0f00          CMP      r11,#0                ;3997
000042  d101              BNE      |L23.72|
000044  200c              MOVS     r0,#0xc               ;3997
000046  e7e7              B        |L23.24|
                  |L23.72|
000048  2000              MOVS     r0,#0                 ;3998
00004a  f88b0000          STRB     r0,[r11,#0]           ;3998
00004e  980f              LDR      r0,[sp,#0x3c]         ;3999
000050  b2c0              UXTB     r0,r0                 ;3999
000052  900c              STR      r0,[sp,#0x30]         ;3999
000054  2000              MOVS     r0,#0                 ;4000
000056  900b              STR      r0,[sp,#0x2c]         ;4000
000058  980c              LDR      r0,[sp,#0x30]         ;4003
00005a  f7fffffe          BL       disk_initialize
00005e  9001              STR      r0,[sp,#4]            ;4003
000060  9801              LDR      r0,[sp,#4]            ;4004
000062  f0100f01          TST      r0,#1                 ;4004
000066  d001              BEQ      |L23.108|
000068  2003              MOVS     r0,#3                 ;4004
00006a  e7d5              B        |L23.24|
                  |L23.108|
00006c  9801              LDR      r0,[sp,#4]            ;4005
00006e  f0100f04          TST      r0,#4                 ;4005
000072  d001              BEQ      |L23.120|
000074  200a              MOVS     r0,#0xa               ;4005
000076  e7cf              B        |L23.24|
                  |L23.120|
000078  bf00              NOP                            ;4010
00007a  aa04              ADD      r2,sp,#0x10           ;4020
00007c  2101              MOVS     r1,#1                 ;4020
00007e  980c              LDR      r0,[sp,#0x30]         ;4020
000080  f7fffffe          BL       disk_ioctl
000084  b910              CBNZ     r0,|L23.140|
000086  9804              LDR      r0,[sp,#0x10]         ;4020
000088  2880              CMP      r0,#0x80              ;4020
00008a  d201              BCS      |L23.144|
                  |L23.140|
00008c  2001              MOVS     r0,#1                 ;4021
00008e  e7c3              B        |L23.24|
                  |L23.144|
000090  9811              LDR      r0,[sp,#0x44]         ;4022
000092  b108              CBZ      r0,|L23.152|
000094  2000              MOVS     r0,#0                 ;4022
000096  e000              B        |L23.154|
                  |L23.152|
000098  203f              MOVS     r0,#0x3f              ;4022
                  |L23.154|
00009a  4680              MOV      r8,r0                 ;4022
00009c  9804              LDR      r0,[sp,#0x10]         ;4023
00009e  eba00008          SUB      r0,r0,r8              ;4023
0000a2  9004              STR      r0,[sp,#0x10]         ;4023
0000a4  f1b90f00          CMP      r9,#0                 ;4026
0000a8  d113              BNE      |L23.210|
0000aa  f44f61fa          MOV      r1,#0x7d0             ;4027
0000ae  9804              LDR      r0,[sp,#0x10]         ;4027
0000b0  fbb0f0f1          UDIV     r0,r0,r1              ;4027
0000b4  900a              STR      r0,[sp,#0x28]         ;4027
0000b6  f04f0a00          MOV      r10,#0                ;4028
0000ba  e001              B        |L23.192|
                  |L23.188|
0000bc  f10a0a01          ADD      r10,r10,#1            ;4028
                  |L23.192|
0000c0  48dc              LDR      r0,|L23.1076|
0000c2  f830101a          LDRH     r1,[r0,r10,LSL #1]    ;4028
0000c6  980a              LDR      r0,[sp,#0x28]         ;4028
0000c8  4281              CMP      r1,r0                 ;4028
0000ca  d8f7              BHI      |L23.188|
0000cc  48da              LDR      r0,|L23.1080|
0000ce  f830901a          LDRH     r9,[r0,r10,LSL #1]    ;4029
                  |L23.210|
0000d2  ea4f2959          LSR      r9,r9,#9              ;4031
0000d6  f1b90f00          CMP      r9,#0                 ;4032
0000da  d101              BNE      |L23.224|
0000dc  f04f0901          MOV      r9,#1                 ;4032
                  |L23.224|
0000e0  f1b90f80          CMP      r9,#0x80              ;4033
0000e4  d901              BLS      |L23.234|
0000e6  f04f0980          MOV      r9,#0x80              ;4033
                  |L23.234|
0000ea  9804              LDR      r0,[sp,#0x10]         ;4036
0000ec  fbb0f7f9          UDIV     r7,r0,r9              ;4036
0000f0  2501              MOVS     r5,#1                 ;4037
0000f2  f64070f6          MOV      r0,#0xff6             ;4038
0000f6  4287              CMP      r7,r0                 ;4038
0000f8  d300              BCC      |L23.252|
0000fa  2502              MOVS     r5,#2                 ;4038
                  |L23.252|
0000fc  f64f70f6          MOV      r0,#0xfff6            ;4039
000100  4287              CMP      r7,r0                 ;4039
000102  d300              BCC      |L23.262|
000104  2503              MOVS     r5,#3                 ;4039
                  |L23.262|
000106  2d03              CMP      r5,#3                 ;4042
000108  d10a              BNE      |L23.288|
00010a  2008              MOVS     r0,#8                 ;4043
00010c  eb000087          ADD      r0,r0,r7,LSL #2       ;4043
000110  f20010ff          ADD      r0,r0,#0x1ff          ;4043
000114  0a46              LSRS     r6,r0,#9              ;4043
000116  2020              MOVS     r0,#0x20              ;4044
000118  9003              STR      r0,[sp,#0xc]          ;4044
00011a  2000              MOVS     r0,#0                 ;4045
00011c  9002              STR      r0,[sp,#8]            ;4045
00011e  e011              B        |L23.324|
                  |L23.288|
000120  2d01              CMP      r5,#1                 ;4047
000122  d105              BNE      |L23.304|
000124  eb070047          ADD      r0,r7,r7,LSL #1       ;4047
000128  1c40              ADDS     r0,r0,#1              ;4047
00012a  0840              LSRS     r0,r0,#1              ;4047
00012c  1cc0              ADDS     r0,r0,#3              ;4047
00012e  e001              B        |L23.308|
                  |L23.304|
000130  0078              LSLS     r0,r7,#1              ;4047
000132  1d00              ADDS     r0,r0,#4              ;4047
                  |L23.308|
000134  4606              MOV      r6,r0                 ;4047
000136  f20610ff          ADD      r0,r6,#0x1ff          ;4048
00013a  0a46              LSRS     r6,r0,#9              ;4048
00013c  2001              MOVS     r0,#1                 ;4049
00013e  9003              STR      r0,[sp,#0xc]          ;4049
000140  2020              MOVS     r0,#0x20              ;4050
000142  9002              STR      r0,[sp,#8]            ;4050
                  |L23.324|
000144  9803              LDR      r0,[sp,#0xc]          ;4052
000146  4440              ADD      r0,r0,r8              ;4052
000148  9007              STR      r0,[sp,#0x1c]         ;4052
00014a  9807              LDR      r0,[sp,#0x1c]         ;4053
00014c  4430              ADD      r0,r0,r6              ;4053
00014e  9006              STR      r0,[sp,#0x18]         ;4053
000150  9902              LDR      r1,[sp,#8]            ;4054
000152  9806              LDR      r0,[sp,#0x18]         ;4054
000154  4408              ADD      r0,r0,r1              ;4054
000156  9005              STR      r0,[sp,#0x14]         ;4054
000158  9805              LDR      r0,[sp,#0x14]         ;4055
00015a  4448              ADD      r0,r0,r9              ;4055
00015c  eba00008          SUB      r0,r0,r8              ;4055
000160  9904              LDR      r1,[sp,#0x10]         ;4055
000162  4288              CMP      r0,r1                 ;4055
000164  d901              BLS      |L23.362|
000166  200e              MOVS     r0,#0xe               ;4055
000168  e756              B        |L23.24|
                  |L23.362|
00016a  aa09              ADD      r2,sp,#0x24           ;4058
00016c  2103              MOVS     r1,#3                 ;4058
00016e  980c              LDR      r0,[sp,#0x30]         ;4058
000170  f7fffffe          BL       disk_ioctl
000174  b928              CBNZ     r0,|L23.386|
000176  9809              LDR      r0,[sp,#0x24]         ;4058
000178  b118              CBZ      r0,|L23.386|
00017a  9809              LDR      r0,[sp,#0x24]         ;4058
00017c  f5b04f00          CMP      r0,#0x8000            ;4058
000180  d901              BLS      |L23.390|
                  |L23.386|
000182  2001              MOVS     r0,#1                 ;4058
000184  9009              STR      r0,[sp,#0x24]         ;4058
                  |L23.390|
000186  9909              LDR      r1,[sp,#0x24]         ;4059
000188  9805              LDR      r0,[sp,#0x14]         ;4059
00018a  4408              ADD      r0,r0,r1              ;4059
00018c  1e40              SUBS     r0,r0,#1              ;4059
00018e  1e49              SUBS     r1,r1,#1              ;4059
000190  4388              BICS     r0,r0,r1              ;4059
000192  9009              STR      r0,[sp,#0x24]         ;4059
000194  9909              LDR      r1,[sp,#0x24]         ;4060
000196  9805              LDR      r0,[sp,#0x14]         ;4060
000198  1a08              SUBS     r0,r1,r0              ;4060
00019a  9009              STR      r0,[sp,#0x24]         ;4060
00019c  2d03              CMP      r5,#3                 ;4061
00019e  d108              BNE      |L23.434|
0001a0  9909              LDR      r1,[sp,#0x24]         ;4062
0001a2  9803              LDR      r0,[sp,#0xc]          ;4062
0001a4  4408              ADD      r0,r0,r1              ;4062
0001a6  9003              STR      r0,[sp,#0xc]          ;4062
0001a8  9909              LDR      r1,[sp,#0x24]         ;4063
0001aa  9807              LDR      r0,[sp,#0x1c]         ;4063
0001ac  4408              ADD      r0,r0,r1              ;4063
0001ae  9007              STR      r0,[sp,#0x1c]         ;4063
0001b0  e001              B        |L23.438|
                  |L23.434|
0001b2  9809              LDR      r0,[sp,#0x24]         ;4065
0001b4  4406              ADD      r6,r6,r0              ;4065
                  |L23.438|
0001b6  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;4069
0001ba  1a08              SUBS     r0,r1,r0              ;4069
0001bc  1b81              SUBS     r1,r0,r6              ;4069
0001be  9802              LDR      r0,[sp,#8]            ;4069
0001c0  1a08              SUBS     r0,r1,r0              ;4069
0001c2  fbb0f7f9          UDIV     r7,r0,r9              ;4069
0001c6  2d02              CMP      r5,#2                 ;4070
0001c8  d103              BNE      |L23.466|
0001ca  f64070f6          MOV      r0,#0xff6             ;4070
0001ce  4287              CMP      r7,r0                 ;4070
0001d0  d305              BCC      |L23.478|
                  |L23.466|
0001d2  2d03              CMP      r5,#3                 ;4071
0001d4  d105              BNE      |L23.482|
0001d6  f64f70f6          MOV      r0,#0xfff6            ;4071
0001da  4287              CMP      r7,r0                 ;4071
0001dc  d201              BCS      |L23.482|
                  |L23.478|
0001de  200e              MOVS     r0,#0xe               ;4072
0001e0  e71a              B        |L23.24|
                  |L23.482|
0001e2  2d03              CMP      r5,#3                 ;4075
0001e4  d102              BNE      |L23.492|
0001e6  200c              MOVS     r0,#0xc               ;4076
0001e8  900d              STR      r0,[sp,#0x34]         ;4076
0001ea  e010              B        |L23.526|
                  |L23.492|
0001ec  2d01              CMP      r5,#1                 ;4078
0001ee  d106              BNE      |L23.510|
0001f0  9804              LDR      r0,[sp,#0x10]         ;4078
0001f2  f5b03f80          CMP      r0,#0x10000           ;4078
0001f6  d202              BCS      |L23.510|
0001f8  2001              MOVS     r0,#1                 ;4079
0001fa  900d              STR      r0,[sp,#0x34]         ;4079
0001fc  e007              B        |L23.526|
                  |L23.510|
0001fe  9804              LDR      r0,[sp,#0x10]         ;4081
000200  f5b03f80          CMP      r0,#0x10000           ;4081
000204  d201              BCS      |L23.522|
000206  2004              MOVS     r0,#4                 ;4081
000208  e000              B        |L23.524|
                  |L23.522|
00020a  2006              MOVS     r0,#6                 ;4081
                  |L23.524|
00020c  900d              STR      r0,[sp,#0x34]         ;4081
                  |L23.526|
00020e  bf00              NOP                            ;4085
000210  9811              LDR      r0,[sp,#0x44]         ;4093
000212  b110              CBZ      r0,|L23.538|
000214  20f0              MOVS     r0,#0xf0              ;4094
000216  900e              STR      r0,[sp,#0x38]         ;4094
000218  e044              B        |L23.676|
                  |L23.538|
00021a  f44f7200          MOV      r2,#0x200             ;4096
00021e  2100              MOVS     r1,#0                 ;4096
000220  f10b0030          ADD      r0,r11,#0x30          ;4096
000224  f7fffffe          BL       mem_set
000228  f50b74f7          ADD      r4,r11,#0x1ee         ;4097
00022c  2001              MOVS     r0,#1                 ;4098
00022e  7060              STRB     r0,[r4,#1]            ;4098
000230  70a0              STRB     r0,[r4,#2]            ;4099
000232  2000              MOVS     r0,#0                 ;4100
000234  70e0              STRB     r0,[r4,#3]            ;4100
000236  980d              LDR      r0,[sp,#0x34]         ;4101
000238  7120              STRB     r0,[r4,#4]            ;4101
00023a  20fe              MOVS     r0,#0xfe              ;4102
00023c  7160              STRB     r0,[r4,#5]            ;4102
00023e  9804              LDR      r0,[sp,#0x10]         ;4103
000240  4440              ADD      r0,r0,r8              ;4103
000242  213f              MOVS     r1,#0x3f              ;4103
000244  fbb0f0f1          UDIV     r0,r0,r1              ;4103
000248  21ff              MOVS     r1,#0xff              ;4103
00024a  fbb0f0f1          UDIV     r0,r0,r1              ;4103
00024e  9009              STR      r0,[sp,#0x24]         ;4103
000250  213f              MOVS     r1,#0x3f              ;4104
000252  9809              LDR      r0,[sp,#0x24]         ;4104
000254  ea410090          ORR      r0,r1,r0,LSR #2       ;4104
000258  71a0              STRB     r0,[r4,#6]            ;4104
00025a  9809              LDR      r0,[sp,#0x24]         ;4105
00025c  71e0              STRB     r0,[r4,#7]            ;4105
00025e  203f              MOVS     r0,#0x3f              ;4106
000260  7220              STRB     r0,[r4,#8]            ;4106
000262  2100              MOVS     r1,#0                 ;4106
000264  7261              STRB     r1,[r4,#9]            ;4106
000266  72a1              STRB     r1,[r4,#0xa]          ;4106
000268  72e1              STRB     r1,[r4,#0xb]          ;4106
00026a  9804              LDR      r0,[sp,#0x10]         ;4107
00026c  7320              STRB     r0,[r4,#0xc]          ;4107
00026e  9804              LDR      r0,[sp,#0x10]         ;4107
000270  0a01              LSRS     r1,r0,#8              ;4107
000272  7361              STRB     r1,[r4,#0xd]          ;4107
000274  9804              LDR      r0,[sp,#0x10]         ;4107
000276  0c01              LSRS     r1,r0,#16             ;4107
000278  73a1              STRB     r1,[r4,#0xe]          ;4107
00027a  9804              LDR      r0,[sp,#0x10]         ;4107
00027c  0e01              LSRS     r1,r0,#24             ;4107
00027e  73e1              STRB     r1,[r4,#0xf]          ;4107
000280  2155              MOVS     r1,#0x55              ;4108
000282  f88b122e          STRB     r1,[r11,#0x22e]       ;4108
000286  21aa              MOVS     r1,#0xaa              ;4108
000288  f88b122f          STRB     r1,[r11,#0x22f]       ;4108
00028c  2301              MOVS     r3,#1                 ;4109
00028e  2200              MOVS     r2,#0                 ;4109
000290  f10b0130          ADD      r1,r11,#0x30          ;4109
000294  980c              LDR      r0,[sp,#0x30]         ;4109
000296  f7fffffe          BL       disk_write
00029a  b108              CBZ      r0,|L23.672|
00029c  2001              MOVS     r0,#1                 ;4110
00029e  e6bb              B        |L23.24|
                  |L23.672|
0002a0  20f8              MOVS     r0,#0xf8              ;4111
0002a2  900e              STR      r0,[sp,#0x38]         ;4111
                  |L23.676|
0002a4  f10b0430          ADD      r4,r11,#0x30          ;4116
0002a8  f44f7200          MOV      r2,#0x200             ;4117
0002ac  2100              MOVS     r1,#0                 ;4117
0002ae  4620              MOV      r0,r4                 ;4117
0002b0  f7fffffe          BL       mem_set
0002b4  220b              MOVS     r2,#0xb               ;4118
0002b6  a161              ADR      r1,|L23.1084|
0002b8  4620              MOV      r0,r4                 ;4118
0002ba  f7fffffe          BL       mem_cpy
0002be  f44f7a00          MOV      r10,#0x200            ;4119
0002c2  f884a00b          STRB     r10,[r4,#0xb]         ;4120
0002c6  ea4f211a          LSR      r1,r10,#8             ;4120
0002ca  7321              STRB     r1,[r4,#0xc]          ;4120
0002cc  f884900d          STRB     r9,[r4,#0xd]          ;4121
0002d0  9803              LDR      r0,[sp,#0xc]          ;4122
0002d2  73a0              STRB     r0,[r4,#0xe]          ;4122
0002d4  9803              LDR      r0,[sp,#0xc]          ;4122
0002d6  0a01              LSRS     r1,r0,#8              ;4122
0002d8  73e1              STRB     r1,[r4,#0xf]          ;4122
0002da  2001              MOVS     r0,#1                 ;4123
0002dc  7420              STRB     r0,[r4,#0x10]         ;4123
0002de  2d03              CMP      r5,#3                 ;4124
0002e0  d101              BNE      |L23.742|
0002e2  2000              MOVS     r0,#0                 ;4124
0002e4  e001              B        |L23.746|
                  |L23.742|
0002e6  f44f7000          MOV      r0,#0x200             ;4124
                  |L23.746|
0002ea  4682              MOV      r10,r0                ;4124
0002ec  f884a011          STRB     r10,[r4,#0x11]        ;4125
0002f0  ea4f211a          LSR      r1,r10,#8             ;4125
0002f4  74a1              STRB     r1,[r4,#0x12]         ;4125
0002f6  9804              LDR      r0,[sp,#0x10]         ;4126
0002f8  f5b03f80          CMP      r0,#0x10000           ;4126
0002fc  d205              BCS      |L23.778|
0002fe  9804              LDR      r0,[sp,#0x10]         ;4127
000300  74e0              STRB     r0,[r4,#0x13]         ;4127
000302  9804              LDR      r0,[sp,#0x10]         ;4127
000304  0a01              LSRS     r1,r0,#8              ;4127
000306  7521              STRB     r1,[r4,#0x14]         ;4127
000308  e010              B        |L23.812|
                  |L23.778|
00030a  9804              LDR      r0,[sp,#0x10]         ;4129
00030c  f8840020          STRB     r0,[r4,#0x20]         ;4129
000310  9804              LDR      r0,[sp,#0x10]         ;4129
000312  f3c02107          UBFX     r1,r0,#8,#8           ;4129
000316  2021              MOVS     r0,#0x21              ;4129
000318  5501              STRB     r1,[r0,r4]            ;4129
00031a  9804              LDR      r0,[sp,#0x10]         ;4129
00031c  f3c04107          UBFX     r1,r0,#16,#8          ;4129
000320  2022              MOVS     r0,#0x22              ;4129
000322  5501              STRB     r1,[r0,r4]            ;4129
000324  9804              LDR      r0,[sp,#0x10]         ;4129
000326  0e01              LSRS     r1,r0,#24             ;4129
000328  2023              MOVS     r0,#0x23              ;4129
00032a  5501              STRB     r1,[r0,r4]            ;4129
                  |L23.812|
00032c  980e              LDR      r0,[sp,#0x38]         ;4131
00032e  7560              STRB     r0,[r4,#0x15]         ;4131
000330  203f              MOVS     r0,#0x3f              ;4132
000332  7620              STRB     r0,[r4,#0x18]         ;4132
000334  2100              MOVS     r1,#0                 ;4132
000336  7661              STRB     r1,[r4,#0x19]         ;4132
000338  20ff              MOVS     r0,#0xff              ;4133
00033a  76a0              STRB     r0,[r4,#0x1a]         ;4133
00033c  76e1              STRB     r1,[r4,#0x1b]         ;4133
00033e  f884801c          STRB     r8,[r4,#0x1c]         ;4134
000342  ea4f2118          LSR      r1,r8,#8              ;4134
000346  7761              STRB     r1,[r4,#0x1d]         ;4134
000348  ea4f4118          LSR      r1,r8,#16             ;4134
00034c  77a1              STRB     r1,[r4,#0x1e]         ;4134
00034e  ea4f6118          LSR      r1,r8,#24             ;4134
000352  77e1              STRB     r1,[r4,#0x1f]         ;4134
000354  f7fffffe          BL       get_fattime
000358  9009              STR      r0,[sp,#0x24]         ;4135
00035a  2d03              CMP      r5,#3                 ;4136
00035c  d13e              BNE      |L23.988|
00035e  9809              LDR      r0,[sp,#0x24]         ;4137
000360  f8840043          STRB     r0,[r4,#0x43]         ;4137
000364  9809              LDR      r0,[sp,#0x24]         ;4137
000366  f3c02107          UBFX     r1,r0,#8,#8           ;4137
00036a  2044              MOVS     r0,#0x44              ;4137
00036c  5501              STRB     r1,[r0,r4]            ;4137
00036e  9809              LDR      r0,[sp,#0x24]         ;4137
000370  f3c04107          UBFX     r1,r0,#16,#8          ;4137
000374  2045              MOVS     r0,#0x45              ;4137
000376  5501              STRB     r1,[r0,r4]            ;4137
000378  9809              LDR      r0,[sp,#0x24]         ;4137
00037a  0e01              LSRS     r1,r0,#24             ;4137
00037c  2046              MOVS     r0,#0x46              ;4137
00037e  5501              STRB     r1,[r0,r4]            ;4137
000380  f8846024          STRB     r6,[r4,#0x24]         ;4138
000384  f3c62107          UBFX     r1,r6,#8,#8           ;4138
000388  2025              MOVS     r0,#0x25              ;4138
00038a  5501              STRB     r1,[r0,r4]            ;4138
00038c  f3c64107          UBFX     r1,r6,#16,#8          ;4138
000390  2026              MOVS     r0,#0x26              ;4138
000392  5501              STRB     r1,[r0,r4]            ;4138
000394  0e31              LSRS     r1,r6,#24             ;4138
000396  2027              MOVS     r0,#0x27              ;4138
000398  5501              STRB     r1,[r0,r4]            ;4138
00039a  2002              MOVS     r0,#2                 ;4139
00039c  f884002c          STRB     r0,[r4,#0x2c]         ;4139
0003a0  2100              MOVS     r1,#0                 ;4139
0003a2  202d              MOVS     r0,#0x2d              ;4139
0003a4  5501              STRB     r1,[r0,r4]            ;4139
0003a6  202e              MOVS     r0,#0x2e              ;4139
0003a8  5501              STRB     r1,[r0,r4]            ;4139
0003aa  202f              MOVS     r0,#0x2f              ;4139
0003ac  5501              STRB     r1,[r0,r4]            ;4139
0003ae  2001              MOVS     r0,#1                 ;4140
0003b0  f8840030          STRB     r0,[r4,#0x30]         ;4140
0003b4  2031              MOVS     r0,#0x31              ;4140
0003b6  5501              STRB     r1,[r0,r4]            ;4140
0003b8  2006              MOVS     r0,#6                 ;4141
0003ba  f8840032          STRB     r0,[r4,#0x32]         ;4141
0003be  2033              MOVS     r0,#0x33              ;4141
0003c0  5501              STRB     r1,[r0,r4]            ;4141
0003c2  2080              MOVS     r0,#0x80              ;4142
0003c4  f8840040          STRB     r0,[r4,#0x40]         ;4142
0003c8  2029              MOVS     r0,#0x29              ;4143
0003ca  f8840042          STRB     r0,[r4,#0x42]         ;4143
0003ce  2213              MOVS     r2,#0x13              ;4144
0003d0  a11d              ADR      r1,|L23.1096|
0003d2  f1040047          ADD      r0,r4,#0x47           ;4144
0003d6  f7fffffe          BL       mem_cpy
0003da  e01f              B        |L23.1052|
                  |L23.988|
0003dc  9809              LDR      r0,[sp,#0x24]         ;4146
0003de  f8840027          STRB     r0,[r4,#0x27]         ;4146
0003e2  9809              LDR      r0,[sp,#0x24]         ;4146
0003e4  f3c02107          UBFX     r1,r0,#8,#8           ;4146
0003e8  2028              MOVS     r0,#0x28              ;4146
0003ea  5501              STRB     r1,[r0,r4]            ;4146
0003ec  9809              LDR      r0,[sp,#0x24]         ;4146
0003ee  f3c04107          UBFX     r1,r0,#16,#8          ;4146
0003f2  2029              MOVS     r0,#0x29              ;4146
0003f4  5501              STRB     r1,[r0,r4]            ;4146
0003f6  9809              LDR      r0,[sp,#0x24]         ;4146
0003f8  0e01              LSRS     r1,r0,#24             ;4146
0003fa  202a              MOVS     r0,#0x2a              ;4146
0003fc  5501              STRB     r1,[r0,r4]            ;4146
0003fe  75a6              STRB     r6,[r4,#0x16]         ;4147
000400  0a31              LSRS     r1,r6,#8              ;4147
000402  75e1              STRB     r1,[r4,#0x17]         ;4147
000404  2080              MOVS     r0,#0x80              ;4148
000406  f8840024          STRB     r0,[r4,#0x24]         ;4148
00040a  2029              MOVS     r0,#0x29              ;4149
00040c  f8840026          STRB     r0,[r4,#0x26]         ;4149
000410  2213              MOVS     r2,#0x13              ;4150
000412  a112              ADR      r1,|L23.1116|
000414  f104002b          ADD      r0,r4,#0x2b           ;4150
000418  f7fffffe          BL       mem_cpy
                  |L23.1052|
00041c  2055              MOVS     r0,#0x55              ;4152
00041e  f88401fe          STRB     r0,[r4,#0x1fe]        ;4152
000422  21aa              MOVS     r1,#0xaa              ;4152
000424  f24010ff          MOV      r0,#0x1ff             ;4152
000428  5501              STRB     r1,[r0,r4]            ;4152
00042a  2301              MOVS     r3,#1                 ;4153
00042c  4642              MOV      r2,r8                 ;4153
00042e  e01f              B        |L23.1136|
                  |L23.1072|
                          DCD      FatFs
                  |L23.1076|
                          DCD      vst
                  |L23.1080|
                          DCD      ||cst||
                  |L23.1084|
00043c  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
000440  53444f53
000444  352e3000
                  |L23.1096|
000448  4e4f204e          DCB      "NO NAME    FAT32   ",0
00044c  414d4520
000450  20202046
000454  41543332
000458  20202000
                  |L23.1116|
00045c  4e4f204e          DCB      "NO NAME    FAT     ",0
000460  414d4520
000464  20202046
000468  41542020
00046c  20202000
                  |L23.1136|
000470  4621              MOV      r1,r4                 ;4153
000472  980c              LDR      r0,[sp,#0x30]         ;4153
000474  f7fffffe          BL       disk_write
000478  b108              CBZ      r0,|L23.1150|
00047a  2001              MOVS     r0,#1                 ;4154
00047c  e5cc              B        |L23.24|
                  |L23.1150|
00047e  2d03              CMP      r5,#3                 ;4155
000480  d106              BNE      |L23.1168|
000482  2301              MOVS     r3,#1                 ;4156
000484  f1080206          ADD      r2,r8,#6              ;4156
000488  4621              MOV      r1,r4                 ;4156
00048a  980c              LDR      r0,[sp,#0x30]         ;4156
00048c  f7fffffe          BL       disk_write
                  |L23.1168|
000490  9807              LDR      r0,[sp,#0x1c]         ;4159
000492  9008              STR      r0,[sp,#0x20]         ;4159
000494  f04f0a00          MOV      r10,#0                ;4160
000498  e061              B        |L23.1374|
                  |L23.1178|
00049a  f44f7200          MOV      r2,#0x200             ;4161
00049e  2100              MOVS     r1,#0                 ;4161
0004a0  4620              MOV      r0,r4                 ;4161
0004a2  f7fffffe          BL       mem_set
0004a6  980e              LDR      r0,[sp,#0x38]         ;4162
0004a8  9009              STR      r0,[sp,#0x24]         ;4162
0004aa  2d03              CMP      r5,#3                 ;4163
0004ac  d014              BEQ      |L23.1240|
0004ae  2d01              CMP      r5,#1                 ;4164
0004b0  d101              BNE      |L23.1206|
0004b2  4862              LDR      r0,|L23.1596|
0004b4  e001              B        |L23.1210|
                  |L23.1206|
0004b6  f06f00ff          MVN      r0,#0xff              ;4164
                  |L23.1210|
0004ba  9909              LDR      r1,[sp,#0x24]         ;4164
0004bc  4308              ORRS     r0,r0,r1              ;4164
0004be  9009              STR      r0,[sp,#0x24]         ;4164
0004c0  9809              LDR      r0,[sp,#0x24]         ;4165
0004c2  7020              STRB     r0,[r4,#0]            ;4165
0004c4  9809              LDR      r0,[sp,#0x24]         ;4165
0004c6  0a00              LSRS     r0,r0,#8              ;4165
0004c8  7060              STRB     r0,[r4,#1]            ;4165
0004ca  9809              LDR      r0,[sp,#0x24]         ;4165
0004cc  0c00              LSRS     r0,r0,#16             ;4165
0004ce  70a0              STRB     r0,[r4,#2]            ;4165
0004d0  9809              LDR      r0,[sp,#0x24]         ;4165
0004d2  0e00              LSRS     r0,r0,#24             ;4165
0004d4  70e0              STRB     r0,[r4,#3]            ;4165
0004d6  e019              B        |L23.1292|
                  |L23.1240|
0004d8  9809              LDR      r0,[sp,#0x24]         ;4167
0004da  f06000ff          ORN      r0,r0,#0xff           ;4167
0004de  9009              STR      r0,[sp,#0x24]         ;4167
0004e0  9809              LDR      r0,[sp,#0x24]         ;4168
0004e2  7020              STRB     r0,[r4,#0]            ;4168
0004e4  9809              LDR      r0,[sp,#0x24]         ;4168
0004e6  0a00              LSRS     r0,r0,#8              ;4168
0004e8  7060              STRB     r0,[r4,#1]            ;4168
0004ea  9809              LDR      r0,[sp,#0x24]         ;4168
0004ec  0c00              LSRS     r0,r0,#16             ;4168
0004ee  70a0              STRB     r0,[r4,#2]            ;4168
0004f0  9809              LDR      r0,[sp,#0x24]         ;4168
0004f2  0e00              LSRS     r0,r0,#24             ;4168
0004f4  70e0              STRB     r0,[r4,#3]            ;4168
0004f6  20ff              MOVS     r0,#0xff              ;4169
0004f8  7120              STRB     r0,[r4,#4]            ;4169
0004fa  21ff              MOVS     r1,#0xff              ;4169
0004fc  7161              STRB     r1,[r4,#5]            ;4169
0004fe  71a1              STRB     r1,[r4,#6]            ;4169
000500  71e1              STRB     r1,[r4,#7]            ;4169
000502  7220              STRB     r0,[r4,#8]            ;4170
000504  7261              STRB     r1,[r4,#9]            ;4170
000506  72a1              STRB     r1,[r4,#0xa]          ;4170
000508  210f              MOVS     r1,#0xf               ;4170
00050a  72e1              STRB     r1,[r4,#0xb]          ;4170
                  |L23.1292|
00050c  9808              LDR      r0,[sp,#0x20]         ;4172
00050e  1c41              ADDS     r1,r0,#1              ;4172
000510  4602              MOV      r2,r0                 ;4172
000512  2301              MOVS     r3,#1                 ;4172
000514  9108              STR      r1,[sp,#0x20]         ;4172
000516  4621              MOV      r1,r4                 ;4172
000518  980c              LDR      r0,[sp,#0x30]         ;4172
00051a  f7fffffe          BL       disk_write
00051e  b108              CBZ      r0,|L23.1316|
000520  2001              MOVS     r0,#1                 ;4173
000522  e579              B        |L23.24|
                  |L23.1316|
000524  f44f7200          MOV      r2,#0x200             ;4174
000528  2100              MOVS     r1,#0                 ;4174
00052a  4620              MOV      r0,r4                 ;4174
00052c  f7fffffe          BL       mem_set
000530  2001              MOVS     r0,#1                 ;4175
000532  9009              STR      r0,[sp,#0x24]         ;4175
000534  e00e              B        |L23.1364|
                  |L23.1334|
000536  9808              LDR      r0,[sp,#0x20]         ;4176
000538  1c41              ADDS     r1,r0,#1              ;4176
00053a  4602              MOV      r2,r0                 ;4176
00053c  2301              MOVS     r3,#1                 ;4176
00053e  9108              STR      r1,[sp,#0x20]         ;4176
000540  4621              MOV      r1,r4                 ;4176
000542  980c              LDR      r0,[sp,#0x30]         ;4176
000544  f7fffffe          BL       disk_write
000548  b108              CBZ      r0,|L23.1358|
00054a  2001              MOVS     r0,#1                 ;4177
00054c  e564              B        |L23.24|
                  |L23.1358|
00054e  9809              LDR      r0,[sp,#0x24]         ;4175
000550  1c40              ADDS     r0,r0,#1              ;4175
000552  9009              STR      r0,[sp,#0x24]         ;4175
                  |L23.1364|
000554  9809              LDR      r0,[sp,#0x24]         ;4175
000556  42b0              CMP      r0,r6                 ;4175
000558  d3ed              BCC      |L23.1334|
00055a  f10a0a01          ADD      r10,r10,#1            ;4160
                  |L23.1374|
00055e  f1ba0f00          CMP      r10,#0                ;4160
000562  d09a              BEQ      |L23.1178|
000564  2d03              CMP      r5,#3                 ;4182
000566  d101              BNE      |L23.1388|
000568  4648              MOV      r0,r9                 ;4182
00056a  e000              B        |L23.1390|
                  |L23.1388|
00056c  9802              LDR      r0,[sp,#8]            ;4182
                  |L23.1390|
00056e  4682              MOV      r10,r0                ;4182
000570  bf00              NOP                            ;4183
                  |L23.1394|
000572  9808              LDR      r0,[sp,#0x20]         ;4184
000574  1c41              ADDS     r1,r0,#1              ;4184
000576  4602              MOV      r2,r0                 ;4184
000578  2301              MOVS     r3,#1                 ;4184
00057a  9108              STR      r1,[sp,#0x20]         ;4184
00057c  4621              MOV      r1,r4                 ;4184
00057e  980c              LDR      r0,[sp,#0x30]         ;4184
000580  f7fffffe          BL       disk_write
000584  b108              CBZ      r0,|L23.1418|
000586  2001              MOVS     r0,#1                 ;4185
000588  e546              B        |L23.24|
                  |L23.1418|
00058a  f1aa0001          SUB      r0,r10,#1             ;4186
00058e  ea5f0a00          MOVS     r10,r0                ;4186
000592  d1ee              BNE      |L23.1394|
000594  2d03              CMP      r5,#3                 ;4198
000596  d146              BNE      |L23.1574|
000598  2052              MOVS     r0,#0x52              ;4199
00059a  7020              STRB     r0,[r4,#0]            ;4199
00059c  7060              STRB     r0,[r4,#1]            ;4199
00059e  2061              MOVS     r0,#0x61              ;4199
0005a0  70a0              STRB     r0,[r4,#2]            ;4199
0005a2  2041              MOVS     r0,#0x41              ;4199
0005a4  70e0              STRB     r0,[r4,#3]            ;4199
0005a6  2072              MOVS     r0,#0x72              ;4200
0005a8  f88401e4          STRB     r0,[r4,#0x1e4]        ;4200
0005ac  2172              MOVS     r1,#0x72              ;4200
0005ae  f24010e5          MOV      r0,#0x1e5             ;4200
0005b2  5501              STRB     r1,[r0,r4]            ;4200
0005b4  2141              MOVS     r1,#0x41              ;4200
0005b6  1c40              ADDS     r0,r0,#1              ;4200
0005b8  5501              STRB     r1,[r0,r4]            ;4200
0005ba  2161              MOVS     r1,#0x61              ;4200
0005bc  1c40              ADDS     r0,r0,#1              ;4200
0005be  5501              STRB     r1,[r0,r4]            ;4200
0005c0  1e78              SUBS     r0,r7,#1              ;4201
0005c2  f88401e8          STRB     r0,[r4,#0x1e8]        ;4201
0005c6  f3c02107          UBFX     r1,r0,#8,#8           ;4201
0005ca  f24010e9          MOV      r0,#0x1e9             ;4201
0005ce  5501              STRB     r1,[r0,r4]            ;4201
0005d0  1e78              SUBS     r0,r7,#1              ;4201
0005d2  f3c04107          UBFX     r1,r0,#16,#8          ;4201
0005d6  f44f70f5          MOV      r0,#0x1ea             ;4201
0005da  5501              STRB     r1,[r0,r4]            ;4201
0005dc  1e78              SUBS     r0,r7,#1              ;4201
0005de  0e01              LSRS     r1,r0,#24             ;4201
0005e0  f24010eb          MOV      r0,#0x1eb             ;4201
0005e4  5501              STRB     r1,[r0,r4]            ;4201
0005e6  2002              MOVS     r0,#2                 ;4202
0005e8  f88401ec          STRB     r0,[r4,#0x1ec]        ;4202
0005ec  2100              MOVS     r1,#0                 ;4202
0005ee  f24010ed          MOV      r0,#0x1ed             ;4202
0005f2  5501              STRB     r1,[r0,r4]            ;4202
0005f4  1c40              ADDS     r0,r0,#1              ;4202
0005f6  5501              STRB     r1,[r0,r4]            ;4202
0005f8  1c40              ADDS     r0,r0,#1              ;4202
0005fa  5501              STRB     r1,[r0,r4]            ;4202
0005fc  2055              MOVS     r0,#0x55              ;4203
0005fe  f88401fe          STRB     r0,[r4,#0x1fe]        ;4203
000602  21aa              MOVS     r1,#0xaa              ;4203
000604  f24010ff          MOV      r0,#0x1ff             ;4203
000608  5501              STRB     r1,[r0,r4]            ;4203
00060a  2301              MOVS     r3,#1                 ;4204
00060c  f1080201          ADD      r2,r8,#1              ;4204
000610  4621              MOV      r1,r4                 ;4204
000612  980c              LDR      r0,[sp,#0x30]         ;4204
000614  f7fffffe          BL       disk_write
000618  2301              MOVS     r3,#1                 ;4205
00061a  f1080207          ADD      r2,r8,#7              ;4205
00061e  4621              MOV      r1,r4                 ;4205
000620  980c              LDR      r0,[sp,#0x30]         ;4205
000622  f7fffffe          BL       disk_write
                  |L23.1574|
000626  2200              MOVS     r2,#0                 ;4208
000628  4611              MOV      r1,r2                 ;4208
00062a  980c              LDR      r0,[sp,#0x30]         ;4208
00062c  f7fffffe          BL       disk_ioctl
000630  b108              CBZ      r0,|L23.1590|
000632  2001              MOVS     r0,#1                 ;4208
000634  e4f0              B        |L23.24|
                  |L23.1590|
000636  2000              MOVS     r0,#0                 ;4208
000638  e4ee              B        |L23.24|
;;;4210   
                          ENDP

00063a  0000              DCW      0x0000
                  |L23.1596|
                          DCD      0x00ffff00

                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;2365   
;;;2366   FRESULT f_mount (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2367   	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
;;;2368   	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
;;;2369   	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
;;;2370   )
;;;2371   {
000002  b082              SUB      sp,sp,#8
000004  4616              MOV      r6,r2
;;;2372   	FATFS *cfs;
;;;2373   	int vol;
;;;2374   	FRESULT res;
;;;2375   	const TCHAR *rp = path;
000006  9803              LDR      r0,[sp,#0xc]
000008  9001              STR      r0,[sp,#4]
;;;2376   
;;;2377   
;;;2378   	vol = get_ldnumber(&rp);
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       get_ldnumber
000010  4605              MOV      r5,r0
;;;2379   	if (vol < 0) return FR_INVALID_DRIVE;
000012  2d00              CMP      r5,#0
000014  da02              BGE      |L24.28|
000016  200b              MOVS     r0,#0xb
                  |L24.24|
;;;2380   	cfs = FatFs[vol];					/* Pointer to fs object */
;;;2381   
;;;2382   	if (cfs) {
;;;2383   #if _FS_LOCK
;;;2384   		clear_lock(cfs);
;;;2385   #endif
;;;2386   #if _FS_REENTRANT						/* Discard sync object of the current volume */
;;;2387   		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
;;;2388   #endif
;;;2389   		cfs->fs_type = 0;				/* Clear old fs object */
;;;2390   	}
;;;2391   
;;;2392   	if (fs) {
;;;2393   		fs->fs_type = 0;				/* Clear new fs object */
;;;2394   #if _FS_REENTRANT						/* Create sync object for the new volume */
;;;2395   		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
;;;2396   #endif
;;;2397   	}
;;;2398   	FatFs[vol] = fs;					/* Register new fs object */
;;;2399   
;;;2400   	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
;;;2401   
;;;2402   	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
;;;2403   	LEAVE_FF(fs, res);
;;;2404   }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L24.28|
00001c  480e              LDR      r0,|L24.88|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]     ;2380
000022  b10c              CBZ      r4,|L24.40|
000024  2000              MOVS     r0,#0                 ;2389
000026  7020              STRB     r0,[r4,#0]            ;2389
                  |L24.40|
000028  9802              LDR      r0,[sp,#8]            ;2392
00002a  b110              CBZ      r0,|L24.50|
00002c  2000              MOVS     r0,#0                 ;2393
00002e  9902              LDR      r1,[sp,#8]            ;2393
000030  7008              STRB     r0,[r1,#0]            ;2393
                  |L24.50|
000032  4909              LDR      r1,|L24.88|
000034  9802              LDR      r0,[sp,#8]            ;2398
000036  f8410025          STR      r0,[r1,r5,LSL #2]     ;2398
00003a  9802              LDR      r0,[sp,#8]            ;2400
00003c  b108              CBZ      r0,|L24.66|
00003e  2e01              CMP      r6,#1                 ;2400
000040  d001              BEQ      |L24.70|
                  |L24.66|
000042  2000              MOVS     r0,#0                 ;2400
000044  e7e8              B        |L24.24|
                  |L24.70|
000046  2200              MOVS     r2,#0                 ;2402
000048  a903              ADD      r1,sp,#0xc            ;2402
00004a  a802              ADD      r0,sp,#8              ;2402
00004c  f7fffffe          BL       find_volume
000050  4607              MOV      r7,r0                 ;2402
000052  4638              MOV      r0,r7                 ;2403
000054  e7e0              B        |L24.24|
;;;2405   
                          ENDP

000056  0000              DCW      0x0000
                  |L24.88|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=2

                  f_open PROC
;;;2412   
;;;2413   FRESULT f_open (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2414   	FIL* fp,			/* Pointer to the blank file object */
;;;2415   	const TCHAR* path,	/* Pointer to the file name */
;;;2416   	BYTE mode			/* Access mode and file open mode flags */
;;;2417   )
;;;2418   {
000004  b08c              SUB      sp,sp,#0x30
000006  4605              MOV      r5,r0
000008  4616              MOV      r6,r2
;;;2419   	FRESULT res;
;;;2420   	DIR dj;
;;;2421   	BYTE *dir;
;;;2422   	DEF_NAMEBUF;
;;;2423   
;;;2424   
;;;2425   	if (!fp) return FR_INVALID_OBJECT;
00000a  b91d              CBNZ     r5,|L25.20|
00000c  2009              MOVS     r0,#9
                  |L25.14|
;;;2426   	fp->fs = 0;			/* Clear file object */
;;;2427   
;;;2428   	/* Get logical drive number */
;;;2429   #if !_FS_READONLY
;;;2430   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2431   	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
;;;2432   #else
;;;2433   	mode &= FA_READ;
;;;2434   	res = find_volume(&dj.fs, &path, 0);
;;;2435   #endif
;;;2436   	if (res == FR_OK) {
;;;2437   		INIT_BUF(dj);
;;;2438   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2439   		dir = dj.dir;
;;;2440   #if !_FS_READONLY	/* R/W configuration */
;;;2441   		if (res == FR_OK) {
;;;2442   			if (!dir)	/* Default directory itself */
;;;2443   				res = FR_INVALID_NAME;
;;;2444   #if _FS_LOCK
;;;2445   			else
;;;2446   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2447   #endif
;;;2448   		}
;;;2449   		/* Create or Open a file */
;;;2450   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2451   			DWORD dw, cl;
;;;2452   
;;;2453   			if (res != FR_OK) {					/* No file, create new */
;;;2454   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2455   #if _FS_LOCK
;;;2456   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2457   #else
;;;2458   					res = dir_register(&dj);
;;;2459   #endif
;;;2460   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2461   				dir = dj.dir;					/* New entry */
;;;2462   			}
;;;2463   			else {								/* Any object is already existing */
;;;2464   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2465   					res = FR_DENIED;
;;;2466   				} else {
;;;2467   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2468   						res = FR_EXIST;
;;;2469   				}
;;;2470   			}
;;;2471   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2472   				dw = get_fattime();				/* Created time */
;;;2473   				ST_DWORD(dir+DIR_CrtTime, dw);
;;;2474   				dir[DIR_Attr] = 0;				/* Reset attribute */
;;;2475   				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
;;;2476   				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
;;;2477   				st_clust(dir, 0);				/* cluster = 0 */
;;;2478   				dj.fs->wflag = 1;
;;;2479   				if (cl) {						/* Remove the cluster chain if exist */
;;;2480   					dw = dj.fs->winsect;
;;;2481   					res = remove_chain(dj.fs, cl);
;;;2482   					if (res == FR_OK) {
;;;2483   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2484   						res = move_window(dj.fs, dw);
;;;2485   					}
;;;2486   				}
;;;2487   			}
;;;2488   		}
;;;2489   		else {	/* Open an existing file */
;;;2490   			if (res == FR_OK) {					/* Follow succeeded */
;;;2491   				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
;;;2492   					res = FR_NO_FILE;
;;;2493   				} else {
;;;2494   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2495   						res = FR_DENIED;
;;;2496   				}
;;;2497   			}
;;;2498   		}
;;;2499   		if (res == FR_OK) {
;;;2500   			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
;;;2501   				mode |= FA__WRITTEN;
;;;2502   			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;2503   			fp->dir_ptr = dir;
;;;2504   #if _FS_LOCK
;;;2505   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2506   			if (!fp->lockid) res = FR_INT_ERR;
;;;2507   #endif
;;;2508   		}
;;;2509   
;;;2510   #else				/* R/O configuration */
;;;2511   		if (res == FR_OK) {					/* Follow succeeded */
;;;2512   			dir = dj.dir;
;;;2513   			if (!dir) {						/* Current directory itself */
;;;2514   				res = FR_INVALID_NAME;
;;;2515   			} else {
;;;2516   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2517   					res = FR_NO_FILE;
;;;2518   			}
;;;2519   		}
;;;2520   #endif
;;;2521   		FREE_BUF();
;;;2522   
;;;2523   		if (res == FR_OK) {
;;;2524   			fp->flag = mode;					/* File access mode */
;;;2525   			fp->err = 0;						/* Clear error flag */
;;;2526   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2527   			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;2528   			fp->fptr = 0;						/* File pointer */
;;;2529   			fp->dsect = 0;
;;;2530   #if _USE_FASTSEEK
;;;2531   			fp->cltbl = 0;						/* Normal seek mode */
;;;2532   #endif
;;;2533   			fp->fs = dj.fs;	 					/* Validate file object */
;;;2534   			fp->id = fp->fs->id;
;;;2535   		}
;;;2536   	}
;;;2537   
;;;2538   	LEAVE_FF(dj.fs, res);
;;;2539   }
00000e  b00f              ADD      sp,sp,#0x3c
000010  e8bd83f0          POP      {r4-r9,pc}
                  |L25.20|
000014  2000              MOVS     r0,#0                 ;2426
000016  6028              STR      r0,[r5,#0]            ;2426
000018  f006061f          AND      r6,r6,#0x1f           ;2430
00001c  f0260201          BIC      r2,r6,#1              ;2431
000020  a90d              ADD      r1,sp,#0x34           ;2431
000022  a803              ADD      r0,sp,#0xc            ;2431
000024  f7fffffe          BL       find_volume
000028  4607              MOV      r7,r0                 ;2431
00002a  2f00              CMP      r7,#0                 ;2436
00002c  d17e              BNE      |L25.300|
00002e  f8cdd024          STR      sp,[sp,#0x24]         ;2437
000032  484c              LDR      r0,|L25.356|
000034  900a              STR      r0,[sp,#0x28]         ;2437
000036  a803              ADD      r0,sp,#0xc            ;2438
000038  990d              LDR      r1,[sp,#0x34]         ;2438
00003a  f7fffffe          BL       follow_path
00003e  4607              MOV      r7,r0                 ;2438
000040  9c08              LDR      r4,[sp,#0x20]         ;2439
000042  b90f              CBNZ     r7,|L25.72|
000044  b904              CBNZ     r4,|L25.72|
000046  2706              MOVS     r7,#6                 ;2443
                  |L25.72|
000048  f0160f1c          TST      r6,#0x1c              ;2450
00004c  d050              BEQ      |L25.240|
00004e  b14f              CBZ      r7,|L25.100|
000050  2f04              CMP      r7,#4                 ;2454
000052  d103              BNE      |L25.92|
000054  a803              ADD      r0,sp,#0xc            ;2458
000056  f7fffffe          BL       dir_register
00005a  4607              MOV      r7,r0                 ;2458
                  |L25.92|
00005c  f0460608          ORR      r6,r6,#8              ;2460
000060  9c08              LDR      r4,[sp,#0x20]         ;2461
000062  e009              B        |L25.120|
                  |L25.100|
000064  7ae0              LDRB     r0,[r4,#0xb]          ;2464
000066  f0100f11          TST      r0,#0x11              ;2464
00006a  d001              BEQ      |L25.112|
00006c  2707              MOVS     r7,#7                 ;2465
00006e  e003              B        |L25.120|
                  |L25.112|
000070  f0160f04          TST      r6,#4                 ;2467
000074  d000              BEQ      |L25.120|
000076  2708              MOVS     r7,#8                 ;2468
                  |L25.120|
000078  2f00              CMP      r7,#0                 ;2471
00007a  d138              BNE      |L25.238|
00007c  f0160f08          TST      r6,#8                 ;2471
000080  d035              BEQ      |L25.238|
000082  f7fffffe          BL       get_fattime
000086  4680              MOV      r8,r0                 ;2472
000088  f884800e          STRB     r8,[r4,#0xe]          ;2473
00008c  ea4f2118          LSR      r1,r8,#8              ;2473
000090  73e1              STRB     r1,[r4,#0xf]          ;2473
000092  ea4f4118          LSR      r1,r8,#16             ;2473
000096  7421              STRB     r1,[r4,#0x10]         ;2473
000098  ea4f6118          LSR      r1,r8,#24             ;2473
00009c  7461              STRB     r1,[r4,#0x11]         ;2473
00009e  2000              MOVS     r0,#0                 ;2474
0000a0  72e0              STRB     r0,[r4,#0xb]          ;2474
0000a2  7720              STRB     r0,[r4,#0x1c]         ;2475
0000a4  2100              MOVS     r1,#0                 ;2475
0000a6  7761              STRB     r1,[r4,#0x1d]         ;2475
0000a8  77a1              STRB     r1,[r4,#0x1e]         ;2475
0000aa  77e1              STRB     r1,[r4,#0x1f]         ;2475
0000ac  4621              MOV      r1,r4                 ;2476
0000ae  9803              LDR      r0,[sp,#0xc]          ;2476
0000b0  f7fffffe          BL       ld_clust
0000b4  4681              MOV      r9,r0                 ;2476
0000b6  2100              MOVS     r1,#0                 ;2477
0000b8  4620              MOV      r0,r4                 ;2477
0000ba  f7fffffe          BL       st_clust
0000be  2001              MOVS     r0,#1                 ;2478
0000c0  9903              LDR      r1,[sp,#0xc]          ;2478
0000c2  7108              STRB     r0,[r1,#4]            ;2478
0000c4  f1b90f00          CMP      r9,#0                 ;2479
0000c8  d011              BEQ      |L25.238|
0000ca  9803              LDR      r0,[sp,#0xc]          ;2480
0000cc  f8d0802c          LDR      r8,[r0,#0x2c]         ;2480
0000d0  4649              MOV      r1,r9                 ;2481
0000d2  9803              LDR      r0,[sp,#0xc]          ;2481
0000d4  f7fffffe          BL       remove_chain
0000d8  4607              MOV      r7,r0                 ;2481
0000da  b947              CBNZ     r7,|L25.238|
0000dc  f1a90001          SUB      r0,r9,#1              ;2483
0000e0  9903              LDR      r1,[sp,#0xc]          ;2483
0000e2  60c8              STR      r0,[r1,#0xc]          ;2483
0000e4  4641              MOV      r1,r8                 ;2484
0000e6  9803              LDR      r0,[sp,#0xc]          ;2484
0000e8  f7fffffe          BL       move_window
0000ec  4607              MOV      r7,r0                 ;2484
                  |L25.238|
0000ee  e00e              B        |L25.270|
                  |L25.240|
0000f0  b96f              CBNZ     r7,|L25.270|
0000f2  7ae0              LDRB     r0,[r4,#0xb]          ;2491
0000f4  f0100f10          TST      r0,#0x10              ;2491
0000f8  d001              BEQ      |L25.254|
0000fa  2704              MOVS     r7,#4                 ;2492
0000fc  e007              B        |L25.270|
                  |L25.254|
0000fe  f0160f02          TST      r6,#2                 ;2494
000102  d004              BEQ      |L25.270|
000104  7ae0              LDRB     r0,[r4,#0xb]          ;2494
000106  f0100f01          TST      r0,#1                 ;2494
00010a  d000              BEQ      |L25.270|
00010c  2707              MOVS     r7,#7                 ;2495
                  |L25.270|
00010e  b947              CBNZ     r7,|L25.290|
000110  f0160f08          TST      r6,#8                 ;2500
000114  d001              BEQ      |L25.282|
000116  f0460620          ORR      r6,r6,#0x20           ;2501
                  |L25.282|
00011a  9803              LDR      r0,[sp,#0xc]          ;2502
00011c  6ac0              LDR      r0,[r0,#0x2c]         ;2502
00011e  61e8              STR      r0,[r5,#0x1c]         ;2502
000120  622c              STR      r4,[r5,#0x20]         ;2503
                  |L25.290|
000122  b91f              CBNZ     r7,|L25.300|
000124  71ae              STRB     r6,[r5,#6]            ;2524
000126  2000              MOVS     r0,#0                 ;2525
000128  71e8              STRB     r0,[r5,#7]            ;2525
00012a  e000              B        |L25.302|
                  |L25.300|
00012c  e018              B        |L25.352|
                  |L25.302|
00012e  4621              MOV      r1,r4                 ;2526
000130  9803              LDR      r0,[sp,#0xc]          ;2526
000132  f7fffffe          BL       ld_clust
000136  6128              STR      r0,[r5,#0x10]         ;2526
000138  7fe0              LDRB     r0,[r4,#0x1f]         ;2527
00013a  0601              LSLS     r1,r0,#24             ;2527
00013c  7fa0              LDRB     r0,[r4,#0x1e]         ;2527
00013e  ea414100          ORR      r1,r1,r0,LSL #16      ;2527
000142  7f60              LDRB     r0,[r4,#0x1d]         ;2527
000144  ea412000          ORR      r0,r1,r0,LSL #8       ;2527
000148  7f21              LDRB     r1,[r4,#0x1c]         ;2527
00014a  4308              ORRS     r0,r0,r1              ;2527
00014c  60e8              STR      r0,[r5,#0xc]          ;2527
00014e  2000              MOVS     r0,#0                 ;2528
000150  60a8              STR      r0,[r5,#8]            ;2528
000152  61a8              STR      r0,[r5,#0x18]         ;2529
000154  6268              STR      r0,[r5,#0x24]         ;2531
000156  9803              LDR      r0,[sp,#0xc]          ;2533
000158  6028              STR      r0,[r5,#0]            ;2533
00015a  6828              LDR      r0,[r5,#0]            ;2534
00015c  88c0              LDRH     r0,[r0,#6]            ;2534
00015e  80a8              STRH     r0,[r5,#4]            ;2534
                  |L25.352|
000160  4638              MOV      r0,r7                 ;2538
000162  e754              B        |L25.14|
;;;2540   
                          ENDP

                  |L25.356|
                          DCD      LfnBuf

                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=2

                  f_opendir PROC
;;;3148   
;;;3149   FRESULT f_opendir (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3150   	DIR* dp,			/* Pointer to directory object to create */
;;;3151   	const TCHAR* path	/* Pointer to the directory path */
;;;3152   )
;;;3153   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;3154   	FRESULT res;
;;;3155   	FATFS* fs;
;;;3156   	DEF_NAMEBUF;
;;;3157   
;;;3158   
;;;3159   	if (!dp) return FR_INVALID_OBJECT;
000006  b914              CBNZ     r4,|L26.14|
000008  2009              MOVS     r0,#9
                  |L26.10|
;;;3160   
;;;3161   	/* Get logical drive number */
;;;3162   	res = find_volume(&fs, &path, 0);
;;;3163   	if (res == FR_OK) {
;;;3164   		dp->fs = fs;
;;;3165   		INIT_BUF(*dp);
;;;3166   		res = follow_path(dp, path);			/* Follow the path to the directory */
;;;3167   		FREE_BUF();
;;;3168   		if (res == FR_OK) {						/* Follow completed */
;;;3169   			if (dp->dir) {						/* It is not the origin directory itself */
;;;3170   				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
;;;3171   					dp->sclust = ld_clust(fs, dp->dir);
;;;3172   				else							/* The object is a file */
;;;3173   					res = FR_NO_PATH;
;;;3174   			}
;;;3175   			if (res == FR_OK) {
;;;3176   				dp->id = fs->id;
;;;3177   				res = dir_sdi(dp, 0);			/* Rewind directory */
;;;3178   #if _FS_LOCK
;;;3179   				if (res == FR_OK) {
;;;3180   					if (dp->sclust) {
;;;3181   						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
;;;3182   						if (!dp->lockid)
;;;3183   							res = FR_TOO_MANY_OPEN_FILES;
;;;3184   					} else {
;;;3185   						dp->lockid = 0;	/* Root directory need not to be locked */
;;;3186   					}
;;;3187   				}
;;;3188   #endif
;;;3189   			}
;;;3190   		}
;;;3191   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3192   	}
;;;3193   	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
;;;3194   
;;;3195   	LEAVE_FF(fs, res);
;;;3196   }
00000a  b007              ADD      sp,sp,#0x1c
00000c  bd30              POP      {r4,r5,pc}
                  |L26.14|
00000e  2200              MOVS     r2,#0                 ;3162
000010  a906              ADD      r1,sp,#0x18           ;3162
000012  a804              ADD      r0,sp,#0x10           ;3162
000014  f7fffffe          BL       find_volume
000018  4605              MOV      r5,r0                 ;3162
00001a  bb2d              CBNZ     r5,|L26.104|
00001c  9804              LDR      r0,[sp,#0x10]         ;3164
00001e  6020              STR      r0,[r4,#0]            ;3164
000020  a801              ADD      r0,sp,#4              ;3165
000022  61a0              STR      r0,[r4,#0x18]         ;3165
000024  4813              LDR      r0,|L26.116|
000026  61e0              STR      r0,[r4,#0x1c]         ;3165
000028  4620              MOV      r0,r4                 ;3166
00002a  9906              LDR      r1,[sp,#0x18]         ;3166
00002c  f7fffffe          BL       follow_path
000030  4605              MOV      r5,r0                 ;3166
000032  b9b5              CBNZ     r5,|L26.98|
000034  6960              LDR      r0,[r4,#0x14]         ;3169
000036  b158              CBZ      r0,|L26.80|
000038  6960              LDR      r0,[r4,#0x14]         ;3170
00003a  7ac0              LDRB     r0,[r0,#0xb]          ;3170
00003c  f0100f10          TST      r0,#0x10              ;3170
000040  d005              BEQ      |L26.78|
000042  6961              LDR      r1,[r4,#0x14]         ;3171
000044  9804              LDR      r0,[sp,#0x10]         ;3171
000046  f7fffffe          BL       ld_clust
00004a  60a0              STR      r0,[r4,#8]            ;3171
00004c  e000              B        |L26.80|
                  |L26.78|
00004e  2505              MOVS     r5,#5                 ;3173
                  |L26.80|
000050  b93d              CBNZ     r5,|L26.98|
000052  9804              LDR      r0,[sp,#0x10]         ;3176
000054  88c0              LDRH     r0,[r0,#6]            ;3176
000056  80a0              STRH     r0,[r4,#4]            ;3176
000058  2100              MOVS     r1,#0                 ;3177
00005a  4620              MOV      r0,r4                 ;3177
00005c  f7fffffe          BL       dir_sdi
000060  4605              MOV      r5,r0                 ;3177
                  |L26.98|
000062  2d04              CMP      r5,#4                 ;3191
000064  d100              BNE      |L26.104|
000066  2505              MOVS     r5,#5                 ;3191
                  |L26.104|
000068  b10d              CBZ      r5,|L26.110|
00006a  2000              MOVS     r0,#0                 ;3193
00006c  6020              STR      r0,[r4,#0]            ;3193
                  |L26.110|
00006e  4628              MOV      r0,r5                 ;3195
000070  e7cb              B        |L26.10|
;;;3197   
                          ENDP

000072  0000              DCW      0x0000
                  |L26.116|
                          DCD      LfnBuf

                          AREA ||i.f_printf||, CODE, READONLY, ALIGN=1

                  f_printf PROC
;;;4486   
;;;4487   int f_printf (
000000  b40f              PUSH     {r0-r3}
;;;4488   	FIL* fp,			/* Pointer to the file object */
;;;4489   	const TCHAR* fmt,	/* Pointer to the format string */
;;;4490   	...					/* Optional arguments... */
;;;4491   )
;;;4492   {
000002  e92d4ff0          PUSH     {r4-r11,lr}
000006  b09b              SUB      sp,sp,#0x6c
;;;4493   	va_list arp;
;;;4494   	BYTE f, r;
;;;4495   	UINT nw, i, j, w;
;;;4496   	DWORD v;
;;;4497   	TCHAR c, d, s[16], *p;
;;;4498   	putbuff pb;
;;;4499   
;;;4500   
;;;4501   	pb.fp = fp;				/* Initialize output buffer */
000008  9824              LDR      r0,[sp,#0x90]
00000a  9001              STR      r0,[sp,#4]
;;;4502   	pb.nchr = pb.idx = 0;
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;4503   
;;;4504   	va_start(arp, fmt);
000012  a826              ADD      r0,sp,#0x98
000014  901a              STR      r0,[sp,#0x68]
;;;4505   
;;;4506   	for (;;) {
000016  bf00              NOP      
                  |L27.24|
;;;4507   		c = *fmt++;
000018  9825              LDR      r0,[sp,#0x94]
00001a  f8104b01          LDRB     r4,[r0],#1
00001e  9025              STR      r0,[sp,#0x94]
;;;4508   		if (c == 0) break;			/* End of string */
000020  b904              CBNZ     r4,|L27.36|
000022  e10d              B        |L27.576|
                  |L27.36|
;;;4509   		if (c != '%') {				/* Non escape character */
000024  2c25              CMP      r4,#0x25
000026  d004              BEQ      |L27.50|
;;;4510   			putc_bfd(&pb, c);
000028  4621              MOV      r1,r4
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       putc_bfd
;;;4511   			continue;
000030  e7f2              B        |L27.24|
                  |L27.50|
;;;4512   		}
;;;4513   		w = f = 0;
000032  2000              MOVS     r0,#0
000034  4606              MOV      r6,r0
000036  4681              MOV      r9,r0
;;;4514   		c = *fmt++;
000038  9825              LDR      r0,[sp,#0x94]
00003a  f8104b01          LDRB     r4,[r0],#1
00003e  9025              STR      r0,[sp,#0x94]
;;;4515   		if (c == '0') {				/* Flag: '0' padding */
000040  2c30              CMP      r4,#0x30
000042  d105              BNE      |L27.80|
;;;4516   			f = 1; c = *fmt++;
000044  2601              MOVS     r6,#1
000046  9825              LDR      r0,[sp,#0x94]
000048  f8104b01          LDRB     r4,[r0],#1
00004c  9025              STR      r0,[sp,#0x94]
00004e  e006              B        |L27.94|
                  |L27.80|
;;;4517   		} else {
;;;4518   			if (c == '-') {			/* Flag: left justified */
000050  2c2d              CMP      r4,#0x2d
000052  d104              BNE      |L27.94|
;;;4519   				f = 2; c = *fmt++;
000054  2602              MOVS     r6,#2
000056  9825              LDR      r0,[sp,#0x94]
000058  f8104b01          LDRB     r4,[r0],#1
00005c  9025              STR      r0,[sp,#0x94]
                  |L27.94|
;;;4520   			}
;;;4521   		}
;;;4522   		while (IsDigit(c)) {		/* Precision */
00005e  e009              B        |L27.116|
                  |L27.96|
;;;4523   			w = w * 10 + c - '0';
000060  eb090089          ADD      r0,r9,r9,LSL #2
000064  eb040040          ADD      r0,r4,r0,LSL #1
000068  f1a00930          SUB      r9,r0,#0x30
;;;4524   			c = *fmt++;
00006c  9825              LDR      r0,[sp,#0x94]
00006e  f8104b01          LDRB     r4,[r0],#1
000072  9025              STR      r0,[sp,#0x94]
                  |L27.116|
000074  2c30              CMP      r4,#0x30              ;4522
000076  db01              BLT      |L27.124|
000078  2c39              CMP      r4,#0x39              ;4522
00007a  ddf1              BLE      |L27.96|
                  |L27.124|
;;;4525   		}
;;;4526   		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
00007c  2c6c              CMP      r4,#0x6c
00007e  d001              BEQ      |L27.132|
000080  2c4c              CMP      r4,#0x4c
000082  d105              BNE      |L27.144|
                  |L27.132|
;;;4527   			f |= 4; c = *fmt++;
000084  f0460604          ORR      r6,r6,#4
000088  9825              LDR      r0,[sp,#0x94]
00008a  f8104b01          LDRB     r4,[r0],#1
00008e  9025              STR      r0,[sp,#0x94]
                  |L27.144|
;;;4528   		}
;;;4529   		if (!c) break;
000090  b904              CBNZ     r4,|L27.148|
000092  e0d5              B        |L27.576|
                  |L27.148|
;;;4530   		d = c;
000094  4625              MOV      r5,r4
;;;4531   		if (IsLower(d)) d -= 0x20;
000096  2d61              CMP      r5,#0x61
000098  db04              BLT      |L27.164|
00009a  2d7a              CMP      r5,#0x7a
00009c  dc02              BGT      |L27.164|
00009e  f1a50020          SUB      r0,r5,#0x20
0000a2  b2c5              UXTB     r5,r0
                  |L27.164|
;;;4532   		switch (d) {				/* Type is... */
0000a4  2d4f              CMP      r5,#0x4f
0000a6  d049              BEQ      |L27.316|
0000a8  dc06              BGT      |L27.184|
0000aa  2d42              CMP      r5,#0x42
0000ac  d043              BEQ      |L27.310|
0000ae  2d43              CMP      r5,#0x43
0000b0  d038              BEQ      |L27.292|
0000b2  2d44              CMP      r5,#0x44
0000b4  d14c              BNE      |L27.336|
0000b6  e044              B        |L27.322|
                  |L27.184|
0000b8  2d53              CMP      r5,#0x53
0000ba  d004              BEQ      |L27.198|
0000bc  2d55              CMP      r5,#0x55
0000be  d041              BEQ      |L27.324|
0000c0  2d58              CMP      r5,#0x58
0000c2  d145              BNE      |L27.336|
0000c4  e041              B        |L27.330|
                  |L27.198|
;;;4533   		case 'S' :					/* String */
;;;4534   			p = va_arg(arp, TCHAR*);
0000c6  981a              LDR      r0,[sp,#0x68]
0000c8  f850bb04          LDR      r11,[r0],#4
0000cc  901a              STR      r0,[sp,#0x68]
;;;4535   			for (j = 0; p[j]; j++) ;
0000ce  f04f0800          MOV      r8,#0
0000d2  e001              B        |L27.216|
                  |L27.212|
0000d4  f1080801          ADD      r8,r8,#1
                  |L27.216|
0000d8  f81b0008          LDRB     r0,[r11,r8]
0000dc  2800              CMP      r0,#0
0000de  d1f9              BNE      |L27.212|
;;;4536   			if (!(f & 2)) {
0000e0  f0160f02          TST      r6,#2
0000e4  d109              BNE      |L27.250|
;;;4537   				while (j++ < w) putc_bfd(&pb, ' ');
0000e6  e003              B        |L27.240|
                  |L27.232|
0000e8  2120              MOVS     r1,#0x20
0000ea  a801              ADD      r0,sp,#4
0000ec  f7fffffe          BL       putc_bfd
                  |L27.240|
0000f0  4640              MOV      r0,r8
0000f2  f1080801          ADD      r8,r8,#1
0000f6  4548              CMP      r0,r9
0000f8  d3f6              BCC      |L27.232|
                  |L27.250|
;;;4538   			}
;;;4539   			while (*p) putc_bfd(&pb, *p++);
0000fa  e004              B        |L27.262|
                  |L27.252|
0000fc  f81b1b01          LDRB     r1,[r11],#1
000100  a801              ADD      r0,sp,#4
000102  f7fffffe          BL       putc_bfd
                  |L27.262|
000106  f89b0000          LDRB     r0,[r11,#0]
00010a  2800              CMP      r0,#0
00010c  d1f6              BNE      |L27.252|
;;;4540   			while (j++ < w) putc_bfd(&pb, ' ');
00010e  e003              B        |L27.280|
                  |L27.272|
000110  2120              MOVS     r1,#0x20
000112  a801              ADD      r0,sp,#4
000114  f7fffffe          BL       putc_bfd
                  |L27.280|
000118  4640              MOV      r0,r8
00011a  f1080801          ADD      r8,r8,#1
00011e  4548              CMP      r0,r9
000120  d3f6              BCC      |L27.272|
;;;4541   			continue;
000122  e779              B        |L27.24|
                  |L27.292|
;;;4542   		case 'C' :					/* Character */
;;;4543   			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
000124  981a              LDR      r0,[sp,#0x68]
000126  f8102b04          LDRB     r2,[r0],#4
00012a  b2d1              UXTB     r1,r2
00012c  901a              STR      r0,[sp,#0x68]
00012e  a801              ADD      r0,sp,#4
000130  f7fffffe          BL       putc_bfd
000134  e770              B        |L27.24|
                  |L27.310|
;;;4544   		case 'B' :					/* Binary */
;;;4545   			r = 2; break;
000136  2002              MOVS     r0,#2
000138  9019              STR      r0,[sp,#0x64]
00013a  e00e              B        |L27.346|
                  |L27.316|
;;;4546   		case 'O' :					/* Octal */
;;;4547   			r = 8; break;
00013c  2008              MOVS     r0,#8
00013e  9019              STR      r0,[sp,#0x64]
000140  e00b              B        |L27.346|
                  |L27.322|
;;;4548   		case 'D' :					/* Signed decimal */
;;;4549   		case 'U' :					/* Unsigned decimal */
000142  bf00              NOP      
                  |L27.324|
;;;4550   			r = 10; break;
000144  200a              MOVS     r0,#0xa
000146  9019              STR      r0,[sp,#0x64]
000148  e007              B        |L27.346|
                  |L27.330|
;;;4551   		case 'X' :					/* Hexdecimal */
;;;4552   			r = 16; break;
00014a  2010              MOVS     r0,#0x10
00014c  9019              STR      r0,[sp,#0x64]
00014e  e004              B        |L27.346|
                  |L27.336|
;;;4553   		default:					/* Unknown type (pass-through) */
;;;4554   			putc_bfd(&pb, c); continue;
000150  4621              MOV      r1,r4
000152  a801              ADD      r0,sp,#4
000154  f7fffffe          BL       putc_bfd
000158  e75e              B        |L27.24|
                  |L27.346|
00015a  bf00              NOP                            ;4545
;;;4555   		}
;;;4556   
;;;4557   		/* Get an argument and put it in numeral */
;;;4558   		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
00015c  f0160f04          TST      r6,#4
000160  d005              BEQ      |L27.366|
000162  981a              LDR      r0,[sp,#0x68]
000164  6800              LDR      r0,[r0,#0]
000166  991a              LDR      r1,[sp,#0x68]
000168  1d09              ADDS     r1,r1,#4
00016a  911a              STR      r1,[sp,#0x68]
00016c  e00c              B        |L27.392|
                  |L27.366|
00016e  2d44              CMP      r5,#0x44
000170  d105              BNE      |L27.382|
000172  981a              LDR      r0,[sp,#0x68]
000174  6800              LDR      r0,[r0,#0]
000176  991a              LDR      r1,[sp,#0x68]
000178  1d09              ADDS     r1,r1,#4
00017a  911a              STR      r1,[sp,#0x68]
00017c  e004              B        |L27.392|
                  |L27.382|
00017e  981a              LDR      r0,[sp,#0x68]
000180  6800              LDR      r0,[r0,#0]
000182  991a              LDR      r1,[sp,#0x68]
000184  1d09              ADDS     r1,r1,#4
000186  911a              STR      r1,[sp,#0x68]
                  |L27.392|
000188  4682              MOV      r10,r0
;;;4559   		if (d == 'D' && (v & 0x80000000)) {
00018a  2d44              CMP      r5,#0x44
00018c  d106              BNE      |L27.412|
00018e  f01a4f00          TST      r10,#0x80000000
000192  d003              BEQ      |L27.412|
;;;4560   			v = 0 - v;
000194  f1ca0a00          RSB      r10,r10,#0
;;;4561   			f |= 8;
000198  f0460608          ORR      r6,r6,#8
                  |L27.412|
;;;4562   		}
;;;4563   		i = 0;
00019c  2700              MOVS     r7,#0
;;;4564   		do {
00019e  bf00              NOP      
                  |L27.416|
;;;4565   			d = (TCHAR)(v % r); v /= r;
0001a0  9819              LDR      r0,[sp,#0x64]
0001a2  fbbaf1f0          UDIV     r1,r10,r0
0001a6  fb00a011          MLS      r0,r0,r1,r10
0001aa  b2c5              UXTB     r5,r0
0001ac  9819              LDR      r0,[sp,#0x64]
0001ae  fbbafaf0          UDIV     r10,r10,r0
;;;4566   			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
0001b2  2d09              CMP      r5,#9
0001b4  dd06              BLE      |L27.452|
0001b6  2c78              CMP      r4,#0x78
0001b8  d101              BNE      |L27.446|
0001ba  2027              MOVS     r0,#0x27
0001bc  e000              B        |L27.448|
                  |L27.446|
0001be  2007              MOVS     r0,#7
                  |L27.448|
0001c0  4428              ADD      r0,r0,r5
0001c2  b2c5              UXTB     r5,r0
                  |L27.452|
;;;4567   			s[i++] = d + '0';
0001c4  f1050030          ADD      r0,r5,#0x30
0001c8  b2c2              UXTB     r2,r0
0001ca  4638              MOV      r0,r7
0001cc  1c7f              ADDS     r7,r7,#1
0001ce  a914              ADD      r1,sp,#0x50
0001d0  540a              STRB     r2,[r1,r0]
;;;4568   		} while (v && i < sizeof s / sizeof s[0]);
0001d2  f1ba0f00          CMP      r10,#0
0001d6  d001              BEQ      |L27.476|
0001d8  2f10              CMP      r7,#0x10
0001da  d3e1              BCC      |L27.416|
                  |L27.476|
;;;4569   		if (f & 8) s[i++] = '-';
0001dc  f0160f08          TST      r6,#8
0001e0  d004              BEQ      |L27.492|
0001e2  222d              MOVS     r2,#0x2d
0001e4  4638              MOV      r0,r7
0001e6  1c7f              ADDS     r7,r7,#1
0001e8  a914              ADD      r1,sp,#0x50
0001ea  540a              STRB     r2,[r1,r0]
                  |L27.492|
;;;4570   		j = i; d = (f & 1) ? '0' : ' ';
0001ec  46b8              MOV      r8,r7
0001ee  f0160f01          TST      r6,#1
0001f2  d001              BEQ      |L27.504|
0001f4  2030              MOVS     r0,#0x30
0001f6  e000              B        |L27.506|
                  |L27.504|
0001f8  2020              MOVS     r0,#0x20
                  |L27.506|
0001fa  4605              MOV      r5,r0
;;;4571   		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
0001fc  e003              B        |L27.518|
                  |L27.510|
0001fe  4629              MOV      r1,r5
000200  a801              ADD      r0,sp,#4
000202  f7fffffe          BL       putc_bfd
                  |L27.518|
000206  f0160f02          TST      r6,#2
00020a  d104              BNE      |L27.534|
00020c  4640              MOV      r0,r8
00020e  f1080801          ADD      r8,r8,#1
000212  4548              CMP      r0,r9
000214  d3f3              BCC      |L27.510|
                  |L27.534|
;;;4572   		do putc_bfd(&pb, s[--i]); while (i);
000216  bf00              NOP      
                  |L27.536|
000218  1e78              SUBS     r0,r7,#1
00021a  4607              MOV      r7,r0
00021c  aa14              ADD      r2,sp,#0x50
00021e  5c11              LDRB     r1,[r2,r0]
000220  a801              ADD      r0,sp,#4
000222  f7fffffe          BL       putc_bfd
000226  2f00              CMP      r7,#0
000228  d1f6              BNE      |L27.536|
;;;4573   		while (j++ < w) putc_bfd(&pb, d);
00022a  e003              B        |L27.564|
                  |L27.556|
00022c  4629              MOV      r1,r5
00022e  a801              ADD      r0,sp,#4
000230  f7fffffe          BL       putc_bfd
                  |L27.564|
000234  4640              MOV      r0,r8
000236  f1080801          ADD      r8,r8,#1
00023a  4548              CMP      r0,r9
00023c  d3f6              BCC      |L27.556|
00023e  e6eb              B        |L27.24|
                  |L27.576|
000240  bf00              NOP                            ;4508
;;;4574   	}
;;;4575   
;;;4576   	va_end(arp);
000242  2000              MOVS     r0,#0
000244  901a              STR      r0,[sp,#0x68]
;;;4577   
;;;4578   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
000246  9802              LDR      r0,[sp,#8]
000248  2800              CMP      r0,#0
00024a  db10              BLT      |L27.622|
;;;4579   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
00024c  ab18              ADD      r3,sp,#0x60
00024e  a904              ADD      r1,sp,#0x10
000250  e9dd0201          LDRD     r0,r2,[sp,#4]
000254  f7fffffe          BL       f_write
000258  b948              CBNZ     r0,|L27.622|
;;;4580   		&& (UINT)pb.idx == nw) return pb.nchr;
00025a  9918              LDR      r1,[sp,#0x60]
00025c  9802              LDR      r0,[sp,#8]
00025e  4288              CMP      r0,r1
000260  d105              BNE      |L27.622|
000262  9803              LDR      r0,[sp,#0xc]
                  |L27.612|
;;;4581   	return EOF;
;;;4582   }
000264  b01b              ADD      sp,sp,#0x6c
000266  e8bd0ff0          POP      {r4-r11}
00026a  f85dfb14          LDR      pc,[sp],#0x14
                  |L27.622|
00026e  f04f30ff          MOV      r0,#0xffffffff        ;4581
000272  e7f7              B        |L27.612|
;;;4583   
                          ENDP


                          AREA ||i.f_putc||, CODE, READONLY, ALIGN=1

                  f_putc PROC
;;;4431   
;;;4432   int f_putc (
000000  b530              PUSH     {r4,r5,lr}
;;;4433   	TCHAR c,	/* A character to be output */
;;;4434   	FIL* fp		/* Pointer to the file object */
;;;4435   )
;;;4436   {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;4437   	putbuff pb;
;;;4438   	UINT nw;
;;;4439   
;;;4440   
;;;4441   	pb.fp = fp;			/* Initialize output buffer */
000008  9502              STR      r5,[sp,#8]
;;;4442   	pb.nchr = pb.idx = 0;
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  9004              STR      r0,[sp,#0x10]
;;;4443   
;;;4444   	putc_bfd(&pb, c);	/* Put a character */
000010  4621              MOV      r1,r4
000012  a802              ADD      r0,sp,#8
000014  f7fffffe          BL       putc_bfd
;;;4445   
;;;4446   	if (   pb.idx >= 0	/* Flush buffered characters to the file */
000018  9803              LDR      r0,[sp,#0xc]
00001a  2800              CMP      r0,#0
00001c  db0d              BLT      |L28.58|
;;;4447   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
00001e  ab01              ADD      r3,sp,#4
000020  a905              ADD      r1,sp,#0x14
000022  e9dd0202          LDRD     r0,r2,[sp,#8]
000026  f7fffffe          BL       f_write
00002a  b930              CBNZ     r0,|L28.58|
;;;4448   		&& (UINT)pb.idx == nw) return pb.nchr;
00002c  9901              LDR      r1,[sp,#4]
00002e  9803              LDR      r0,[sp,#0xc]
000030  4288              CMP      r0,r1
000032  d102              BNE      |L28.58|
000034  9804              LDR      r0,[sp,#0x10]
                  |L28.54|
;;;4449   	return EOF;
;;;4450   }
000036  b015              ADD      sp,sp,#0x54
000038  bd30              POP      {r4,r5,pc}
                  |L28.58|
00003a  f04f30ff          MOV      r0,#0xffffffff        ;4449
00003e  e7fa              B        |L28.54|
;;;4451   
                          ENDP


                          AREA ||i.f_puts||, CODE, READONLY, ALIGN=1

                  f_puts PROC
;;;4458   
;;;4459   int f_puts (
000000  b530              PUSH     {r4,r5,lr}
;;;4460   	const TCHAR* str,	/* Pointer to the string to be output */
;;;4461   	FIL* fp				/* Pointer to the file object */
;;;4462   )
;;;4463   {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;4464   	putbuff pb;
;;;4465   	UINT nw;
;;;4466   
;;;4467   
;;;4468   	pb.fp = fp;				/* Initialize output buffer */
000008  9502              STR      r5,[sp,#8]
;;;4469   	pb.nchr = pb.idx = 0;
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  9004              STR      r0,[sp,#0x10]
;;;4470   
;;;4471   	while (*str)			/* Put the string */
000010  e004              B        |L29.28|
                  |L29.18|
;;;4472   		putc_bfd(&pb, *str++);
000012  f8141b01          LDRB     r1,[r4],#1
000016  a802              ADD      r0,sp,#8
000018  f7fffffe          BL       putc_bfd
                  |L29.28|
00001c  7820              LDRB     r0,[r4,#0]            ;4471
00001e  2800              CMP      r0,#0                 ;4471
000020  d1f7              BNE      |L29.18|
;;;4473   
;;;4474   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
000022  9803              LDR      r0,[sp,#0xc]
000024  2800              CMP      r0,#0
000026  db0d              BLT      |L29.68|
;;;4475   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
000028  ab01              ADD      r3,sp,#4
00002a  a905              ADD      r1,sp,#0x14
00002c  e9dd0202          LDRD     r0,r2,[sp,#8]
000030  f7fffffe          BL       f_write
000034  b930              CBNZ     r0,|L29.68|
;;;4476   		&& (UINT)pb.idx == nw) return pb.nchr;
000036  9901              LDR      r1,[sp,#4]
000038  9803              LDR      r0,[sp,#0xc]
00003a  4288              CMP      r0,r1
00003c  d102              BNE      |L29.68|
00003e  9804              LDR      r0,[sp,#0x10]
                  |L29.64|
;;;4477   	return EOF;
;;;4478   }
000040  b015              ADD      sp,sp,#0x54
000042  bd30              POP      {r4,r5,pc}
                  |L29.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;4477
000048  e7fa              B        |L29.64|
;;;4479   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;2547   
;;;2548   FRESULT f_read (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2549   	FIL* fp, 		/* Pointer to the file object */
;;;2550   	void* buff,		/* Pointer to data buffer */
;;;2551   	UINT btr,		/* Number of bytes to read */
;;;2552   	UINT* br		/* Pointer to number of bytes read */
;;;2553   )
;;;2554   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;2555   	FRESULT res;
;;;2556   	DWORD clst, sect, remain;
;;;2557   	UINT rcnt, cc;
;;;2558   	BYTE csect, *rbuff = (BYTE*)buff;
00000c  f8ddb010          LDR      r11,[sp,#0x10]
;;;2559   
;;;2560   
;;;2561   	*br = 0;	/* Clear read byte counter */
000010  2000              MOVS     r0,#0
000012  f8ca0000          STR      r0,[r10,#0]
;;;2562   
;;;2563   	res = validate(fp);							/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2564   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L30.42|
000022  9802              LDR      r0,[sp,#8]
                  |L30.36|
;;;2565   	if (fp->err)								/* Check error */
;;;2566   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2567   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2568   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2569   	remain = fp->fsize - fp->fptr;
;;;2570   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2571   
;;;2572   	for ( ;  btr;								/* Repeat until all data read */
;;;2573   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2574   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2575   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2576   			if (!csect) {						/* On the cluster boundary? */
;;;2577   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2578   					clst = fp->sclust;			/* Follow from the origin */
;;;2579   				} else {						/* Middle or end of the file */
;;;2580   #if _USE_FASTSEEK
;;;2581   					if (fp->cltbl)
;;;2582   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2583   					else
;;;2584   #endif
;;;2585   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2586   				}
;;;2587   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2588   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2589   				fp->clust = clst;				/* Update current cluster */
;;;2590   			}
;;;2591   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2592   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2593   			sect += csect;
;;;2594   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2595   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2596   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2597   					cc = fp->fs->csize - csect;
;;;2598   				if (disk_read(fp->fs->drv, rbuff, sect, cc))
;;;2599   					ABORT(fp->fs, FR_DISK_ERR);
;;;2600   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2601   #if _FS_TINY
;;;2602   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2603   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2604   #else
;;;2605   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2606   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2607   #endif
;;;2608   #endif
;;;2609   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2610   				continue;
;;;2611   			}
;;;2612   #if !_FS_TINY
;;;2613   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2614   #if !_FS_READONLY
;;;2615   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2616   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;2617   						ABORT(fp->fs, FR_DISK_ERR);
;;;2618   					fp->flag &= ~FA__DIRTY;
;;;2619   				}
;;;2620   #endif
;;;2621   				if (disk_read(fp->fs->drv, fp->buf, sect, 1))	/* Fill sector cache */
;;;2622   					ABORT(fp->fs, FR_DISK_ERR);
;;;2623   			}
;;;2624   #endif
;;;2625   			fp->dsect = sect;
;;;2626   		}
;;;2627   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2628   		if (rcnt > btr) rcnt = btr;
;;;2629   #if _FS_TINY
;;;2630   		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
;;;2631   			ABORT(fp->fs, FR_DISK_ERR);
;;;2632   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2633   #else
;;;2634   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2635   #endif
;;;2636   	}
;;;2637   
;;;2638   	LEAVE_FF(fp->fs, FR_OK);
;;;2639   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L30.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2565
00002c  b108              CBZ      r0,|L30.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2566
000030  e7f8              B        |L30.36|
                  |L30.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2567
000034  f0100f01          TST      r0,#1                 ;2567
000038  d101              BNE      |L30.62|
00003a  2007              MOVS     r0,#7                 ;2568
00003c  e7f2              B        |L30.36|
                  |L30.62|
00003e  e9d41002          LDRD     r1,r0,[r4,#8]         ;2569
000042  1a40              SUBS     r0,r0,r1              ;2569
000044  9000              STR      r0,[sp,#0]            ;2569
000046  9800              LDR      r0,[sp,#0]            ;2570
000048  4285              CMP      r5,r0                 ;2570
00004a  d900              BLS      |L30.78|
00004c  9d00              LDR      r5,[sp,#0]            ;2570
                  |L30.78|
00004e  e0a9              B        |L30.420|
                  |L30.80|
000050  8920              LDRH     r0,[r4,#8]            ;2574
000052  05c0              LSLS     r0,r0,#23             ;2574
000054  0dc0              LSRS     r0,r0,#23             ;2574
000056  d176              BNE      |L30.326|
000058  6820              LDR      r0,[r4,#0]            ;2575
00005a  7880              LDRB     r0,[r0,#2]            ;2575
00005c  1e40              SUBS     r0,r0,#1              ;2575
00005e  68a1              LDR      r1,[r4,#8]            ;2575
000060  ea002051          AND      r0,r0,r1,LSR #9       ;2575
000064  f00009ff          AND      r9,r0,#0xff           ;2575
000068  f1b90f00          CMP      r9,#0                 ;2576
00006c  d11f              BNE      |L30.174|
00006e  68a0              LDR      r0,[r4,#8]            ;2577
000070  b910              CBNZ     r0,|L30.120|
000072  6920              LDR      r0,[r4,#0x10]         ;2578
000074  9001              STR      r0,[sp,#4]            ;2578
000076  e00c              B        |L30.146|
                  |L30.120|
000078  6a60              LDR      r0,[r4,#0x24]         ;2581
00007a  b128              CBZ      r0,|L30.136|
00007c  4620              MOV      r0,r4                 ;2582
00007e  68a1              LDR      r1,[r4,#8]            ;2582
000080  f7fffffe          BL       clmt_clust
000084  9001              STR      r0,[sp,#4]            ;2582
000086  e004              B        |L30.146|
                  |L30.136|
000088  6961              LDR      r1,[r4,#0x14]         ;2585
00008a  6820              LDR      r0,[r4,#0]            ;2585
00008c  f7fffffe          BL       get_fat
000090  9001              STR      r0,[sp,#4]            ;2585
                  |L30.146|
000092  9801              LDR      r0,[sp,#4]            ;2587
000094  2802              CMP      r0,#2                 ;2587
000096  d202              BCS      |L30.158|
000098  2002              MOVS     r0,#2                 ;2587
00009a  71e0              STRB     r0,[r4,#7]            ;2587
00009c  e7c2              B        |L30.36|
                  |L30.158|
00009e  9801              LDR      r0,[sp,#4]            ;2588
0000a0  1c40              ADDS     r0,r0,#1              ;2588
0000a2  d102              BNE      |L30.170|
0000a4  2001              MOVS     r0,#1                 ;2588
0000a6  71e0              STRB     r0,[r4,#7]            ;2588
0000a8  e7bc              B        |L30.36|
                  |L30.170|
0000aa  9801              LDR      r0,[sp,#4]            ;2589
0000ac  6160              STR      r0,[r4,#0x14]         ;2589
                  |L30.174|
0000ae  6961              LDR      r1,[r4,#0x14]         ;2591
0000b0  6820              LDR      r0,[r4,#0]            ;2591
0000b2  f7fffffe          BL       clust2sect
0000b6  4606              MOV      r6,r0                 ;2591
0000b8  b916              CBNZ     r6,|L30.192|
0000ba  2002              MOVS     r0,#2                 ;2592
0000bc  71e0              STRB     r0,[r4,#7]            ;2592
0000be  e7b1              B        |L30.36|
                  |L30.192|
0000c0  444e              ADD      r6,r6,r9              ;2593
0000c2  ea4f2855          LSR      r8,r5,#9              ;2594
0000c6  f1b80f00          CMP      r8,#0                 ;2595
0000ca  d029              BEQ      |L30.288|
0000cc  eb090008          ADD      r0,r9,r8              ;2596
0000d0  6821              LDR      r1,[r4,#0]            ;2596
0000d2  7889              LDRB     r1,[r1,#2]            ;2596
0000d4  4288              CMP      r0,r1                 ;2596
0000d6  d903              BLS      |L30.224|
0000d8  6820              LDR      r0,[r4,#0]            ;2597
0000da  7880              LDRB     r0,[r0,#2]            ;2597
0000dc  eba00809          SUB      r8,r0,r9              ;2597
                  |L30.224|
0000e0  6821              LDR      r1,[r4,#0]            ;2598
0000e2  7848              LDRB     r0,[r1,#1]            ;2598
0000e4  4643              MOV      r3,r8                 ;2598
0000e6  4632              MOV      r2,r6                 ;2598
0000e8  4659              MOV      r1,r11                ;2598
0000ea  f7fffffe          BL       disk_read
0000ee  b110              CBZ      r0,|L30.246|
0000f0  2001              MOVS     r0,#1                 ;2599
0000f2  71e0              STRB     r0,[r4,#7]            ;2599
0000f4  e796              B        |L30.36|
                  |L30.246|
0000f6  79a0              LDRB     r0,[r4,#6]            ;2605
0000f8  f0100f40          TST      r0,#0x40              ;2605
0000fc  d00d              BEQ      |L30.282|
0000fe  69a0              LDR      r0,[r4,#0x18]         ;2605
000100  1b80              SUBS     r0,r0,r6              ;2605
000102  4540              CMP      r0,r8                 ;2605
000104  d209              BCS      |L30.282|
000106  69a1              LDR      r1,[r4,#0x18]         ;2606
000108  1b89              SUBS     r1,r1,r6              ;2606
00010a  eb0b2041          ADD      r0,r11,r1,LSL #9      ;2606
00010e  f44f7200          MOV      r2,#0x200             ;2606
000112  f1040128          ADD      r1,r4,#0x28           ;2606
000116  f7fffffe          BL       mem_cpy
                  |L30.282|
00011a  ea4f2748          LSL      r7,r8,#9              ;2609
00011e  e037              B        |L30.400|
                  |L30.288|
000120  69a0              LDR      r0,[r4,#0x18]         ;2613
000122  42b0              CMP      r0,r6                 ;2613
000124  d020              BEQ      |L30.360|
000126  79a0              LDRB     r0,[r4,#6]            ;2615
000128  f0100f40          TST      r0,#0x40              ;2615
00012c  d010              BEQ      |L30.336|
00012e  6821              LDR      r1,[r4,#0]            ;2616
000130  7848              LDRB     r0,[r1,#1]            ;2616
000132  2301              MOVS     r3,#1                 ;2616
000134  f1040128          ADD      r1,r4,#0x28           ;2616
000138  69a2              LDR      r2,[r4,#0x18]         ;2616
00013a  f7fffffe          BL       disk_write
00013e  b118              CBZ      r0,|L30.328|
000140  2001              MOVS     r0,#1                 ;2617
000142  71e0              STRB     r0,[r4,#7]            ;2617
000144  e76e              B        |L30.36|
                  |L30.326|
000146  e010              B        |L30.362|
                  |L30.328|
000148  79a0              LDRB     r0,[r4,#6]            ;2618
00014a  f0200040          BIC      r0,r0,#0x40           ;2618
00014e  71a0              STRB     r0,[r4,#6]            ;2618
                  |L30.336|
000150  6821              LDR      r1,[r4,#0]            ;2621
000152  7848              LDRB     r0,[r1,#1]            ;2621
000154  2301              MOVS     r3,#1                 ;2621
000156  4632              MOV      r2,r6                 ;2621
000158  f1040128          ADD      r1,r4,#0x28           ;2621
00015c  f7fffffe          BL       disk_read
000160  b110              CBZ      r0,|L30.360|
000162  2001              MOVS     r0,#1                 ;2622
000164  71e0              STRB     r0,[r4,#7]            ;2622
000166  e75d              B        |L30.36|
                  |L30.360|
000168  61a6              STR      r6,[r4,#0x18]         ;2625
                  |L30.362|
00016a  8920              LDRH     r0,[r4,#8]            ;2627
00016c  f3c00008          UBFX     r0,r0,#0,#9           ;2627
000170  f5c07700          RSB      r7,r0,#0x200          ;2627
000174  42af              CMP      r7,r5                 ;2628
000176  d900              BLS      |L30.378|
000178  462f              MOV      r7,r5                 ;2628
                  |L30.378|
00017a  8920              LDRH     r0,[r4,#8]            ;2634
00017c  f3c00208          UBFX     r2,r0,#0,#9           ;2634
000180  f1040028          ADD      r0,r4,#0x28           ;2634
000184  1811              ADDS     r1,r2,r0              ;2634
000186  463a              MOV      r2,r7                 ;2634
000188  4658              MOV      r0,r11                ;2634
00018a  f7fffffe          BL       mem_cpy
00018e  bf00              NOP                            ;2610
                  |L30.400|
000190  44bb              ADD      r11,r11,r7            ;2573
000192  68a0              LDR      r0,[r4,#8]            ;2573
000194  4438              ADD      r0,r0,r7              ;2573
000196  60a0              STR      r0,[r4,#8]            ;2573
000198  f8da0000          LDR      r0,[r10,#0]           ;2573
00019c  4438              ADD      r0,r0,r7              ;2573
00019e  f8ca0000          STR      r0,[r10,#0]           ;2573
0001a2  1bed              SUBS     r5,r5,r7              ;2573
                  |L30.420|
0001a4  2d00              CMP      r5,#0                 ;2572
0001a6  f47faf53          BNE      |L30.80|
0001aa  2000              MOVS     r0,#0                 ;2638
0001ac  e73a              B        |L30.36|
;;;2640   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=2

                  f_readdir PROC
;;;3236   
;;;3237   FRESULT f_readdir (
000000  b5fe              PUSH     {r1-r7,lr}
;;;3238   	DIR* dp,			/* Pointer to the open directory object */
;;;3239   	FILINFO* fno		/* Pointer to file information to return */
;;;3240   )
;;;3241   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;3242   	FRESULT res;
;;;3243   	DEF_NAMEBUF;
;;;3244   
;;;3245   
;;;3246   	res = validate(dp);						/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4605              MOV      r5,r0
;;;3247   	if (res == FR_OK) {
00000e  bb1d              CBNZ     r5,|L31.88|
;;;3248   		if (!fno) {
000010  b92e              CBNZ     r6,|L31.30|
;;;3249   			res = dir_sdi(dp, 0);			/* Rewind the directory object */
000012  2100              MOVS     r1,#0
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       dir_sdi
00001a  4605              MOV      r5,r0
00001c  e01c              B        |L31.88|
                  |L31.30|
;;;3250   		} else {
;;;3251   			INIT_BUF(*dp);
00001e  f8c4d018          STR      sp,[r4,#0x18]
000022  480e              LDR      r0,|L31.92|
000024  61e0              STR      r0,[r4,#0x1c]
;;;3252   			res = dir_read(dp, 0);			/* Read an item */
000026  2100              MOVS     r1,#0
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dir_read
00002e  4605              MOV      r5,r0
;;;3253   			if (res == FR_NO_FILE) {		/* Reached end of directory */
000030  2d04              CMP      r5,#4
000032  d102              BNE      |L31.58|
;;;3254   				dp->sect = 0;
000034  2000              MOVS     r0,#0
000036  6120              STR      r0,[r4,#0x10]
;;;3255   				res = FR_OK;
000038  2500              MOVS     r5,#0
                  |L31.58|
;;;3256   			}
;;;3257   			if (res == FR_OK) {				/* A valid entry is found */
00003a  b96d              CBNZ     r5,|L31.88|
;;;3258   				get_fileinfo(dp, fno);		/* Get the object information */
00003c  4631              MOV      r1,r6
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       get_fileinfo
;;;3259   				res = dir_next(dp, 0);		/* Increment index for next */
000044  2100              MOVS     r1,#0
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       dir_next
00004c  4605              MOV      r5,r0
;;;3260   				if (res == FR_NO_FILE) {
00004e  2d04              CMP      r5,#4
000050  d102              BNE      |L31.88|
;;;3261   					dp->sect = 0;
000052  2000              MOVS     r0,#0
000054  6120              STR      r0,[r4,#0x10]
;;;3262   					res = FR_OK;
000056  2500              MOVS     r5,#0
                  |L31.88|
;;;3263   				}
;;;3264   			}
;;;3265   			FREE_BUF();
;;;3266   		}
;;;3267   	}
;;;3268   
;;;3269   	LEAVE_FF(dp->fs, res);
000058  4628              MOV      r0,r5
;;;3270   }
00005a  bdfe              POP      {r1-r7,pc}
;;;3271   
                          ENDP

                  |L31.92|
                          DCD      LfnBuf

                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=2

                  f_rename PROC
;;;3665   
;;;3666   FRESULT f_rename (
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;3667   	const TCHAR* path_old,	/* Pointer to the object to be renamed */
;;;3668   	const TCHAR* path_new	/* Pointer to the new name */
;;;3669   )
;;;3670   {
000002  b09b              SUB      sp,sp,#0x6c
;;;3671   	FRESULT res;
;;;3672   	DIR djo, djn;
;;;3673   	BYTE buf[21], *dir;
;;;3674   	DWORD dw;
;;;3675   	DEF_NAMEBUF;
;;;3676   
;;;3677   
;;;3678   	/* Get logical drive number of the source object */
;;;3679   	res = find_volume(&djo.fs, &path_old, 1);
000004  2201              MOVS     r2,#1
000006  a91b              ADD      r1,sp,#0x6c
000008  a812              ADD      r0,sp,#0x48
00000a  f7fffffe          BL       find_volume
00000e  4604              MOV      r4,r0
;;;3680   	if (res == FR_OK) {
000010  2c00              CMP      r4,#0
000012  d110              BNE      |L32.54|
;;;3681   		djn.fs = djo.fs;
000014  9812              LDR      r0,[sp,#0x48]
000016  9009              STR      r0,[sp,#0x24]
;;;3682   		INIT_BUF(djo);
000018  f8cdd060          STR      sp,[sp,#0x60]
00001c  4840              LDR      r0,|L32.288|
00001e  9019              STR      r0,[sp,#0x64]
;;;3683   		res = follow_path(&djo, path_old);		/* Check old object */
000020  a812              ADD      r0,sp,#0x48
000022  991b              LDR      r1,[sp,#0x6c]
000024  f7fffffe          BL       follow_path
000028  4604              MOV      r4,r0
;;;3684   		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
00002a  bf00              NOP      
;;;3685   			res = FR_INVALID_NAME;
;;;3686   #if _FS_LOCK
;;;3687   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3688   #endif
;;;3689   		if (res == FR_OK) {						/* Old object is found */
00002c  2c00              CMP      r4,#0
00002e  d174              BNE      |L32.282|
;;;3690   			if (!djo.dir) {						/* Is root dir? */
000030  9817              LDR      r0,[sp,#0x5c]
000032  b908              CBNZ     r0,|L32.56|
;;;3691   				res = FR_NO_FILE;
000034  2404              MOVS     r4,#4
                  |L32.54|
000036  e070              B        |L32.282|
                  |L32.56|
;;;3692   			} else {
;;;3693   				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except name */
000038  9817              LDR      r0,[sp,#0x5c]
00003a  f100010b          ADD      r1,r0,#0xb
00003e  2215              MOVS     r2,#0x15
000040  a803              ADD      r0,sp,#0xc
000042  f7fffffe          BL       mem_cpy
;;;3694   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
000046  2224              MOVS     r2,#0x24
000048  a912              ADD      r1,sp,#0x48
00004a  a809              ADD      r0,sp,#0x24
00004c  f7fffffe          BL       mem_cpy
;;;3695   				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
000050  a81c              ADD      r0,sp,#0x70
000052  f7fffffe          BL       get_ldnumber
000056  2800              CMP      r0,#0
000058  db05              BLT      |L32.102|
;;;3696   					res = follow_path(&djn, path_new);	/* and check if new object is exist */
00005a  a809              ADD      r0,sp,#0x24
00005c  991c              LDR      r1,[sp,#0x70]
00005e  f7fffffe          BL       follow_path
000062  4604              MOV      r4,r0
000064  e000              B        |L32.104|
                  |L32.102|
;;;3697   				else
;;;3698   					res = FR_INVALID_DRIVE;
000066  240b              MOVS     r4,#0xb
                  |L32.104|
;;;3699   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
000068  b904              CBNZ     r4,|L32.108|
00006a  2408              MOVS     r4,#8
                  |L32.108|
;;;3700   				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
00006c  2c04              CMP      r4,#4
00006e  d154              BNE      |L32.282|
;;;3701   /* Start critical section that any interruption can cause a cross-link */
;;;3702   					res = dir_register(&djn);			/* Register the new entry */
000070  a809              ADD      r0,sp,#0x24
000072  f7fffffe          BL       dir_register
000076  4604              MOV      r4,r0
;;;3703   					if (res == FR_OK) {
000078  2c00              CMP      r4,#0
00007a  d14e              BNE      |L32.282|
;;;3704   						dir = djn.dir;					/* Copy object information except name */
00007c  9d0e              LDR      r5,[sp,#0x38]
;;;3705   						mem_cpy(dir+13, buf+2, 19);
00007e  2213              MOVS     r2,#0x13
000080  f10d010e          ADD      r1,sp,#0xe
000084  f105000d          ADD      r0,r5,#0xd
000088  f7fffffe          BL       mem_cpy
;;;3706   						dir[DIR_Attr] = buf[0] | AM_ARC;
00008c  f89d000c          LDRB     r0,[sp,#0xc]
000090  f0400020          ORR      r0,r0,#0x20
000094  72e8              STRB     r0,[r5,#0xb]
;;;3707   						djo.fs->wflag = 1;
000096  2001              MOVS     r0,#1
000098  9912              LDR      r1,[sp,#0x48]
00009a  7108              STRB     r0,[r1,#4]
;;;3708   						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
00009c  990b              LDR      r1,[sp,#0x2c]
00009e  9814              LDR      r0,[sp,#0x50]
0000a0  4288              CMP      r0,r1
0000a2  d030              BEQ      |L32.262|
0000a4  7ae8              LDRB     r0,[r5,#0xb]
0000a6  f0100f10          TST      r0,#0x10
0000aa  d02c              BEQ      |L32.262|
;;;3709   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
0000ac  4629              MOV      r1,r5
0000ae  9812              LDR      r0,[sp,#0x48]
0000b0  f7fffffe          BL       ld_clust
0000b4  4607              MOV      r7,r0
0000b6  4639              MOV      r1,r7
0000b8  9812              LDR      r0,[sp,#0x48]
0000ba  f7fffffe          BL       clust2sect
0000be  4606              MOV      r6,r0
;;;3710   							if (!dw) {
0000c0  b90e              CBNZ     r6,|L32.198|
;;;3711   								res = FR_INT_ERR;
0000c2  2402              MOVS     r4,#2
0000c4  e01f              B        |L32.262|
                  |L32.198|
;;;3712   							} else {
;;;3713   								res = move_window(djo.fs, dw);
0000c6  4631              MOV      r1,r6
0000c8  9812              LDR      r0,[sp,#0x48]
0000ca  f7fffffe          BL       move_window
0000ce  4604              MOV      r4,r0
;;;3714   								dir = djo.fs->win+SZ_DIR;	/* .. entry */
0000d0  9812              LDR      r0,[sp,#0x48]
0000d2  f1000550          ADD      r5,r0,#0x50
;;;3715   								if (res == FR_OK && dir[1] == '.') {
0000d6  b9b4              CBNZ     r4,|L32.262|
0000d8  7868              LDRB     r0,[r5,#1]
0000da  282e              CMP      r0,#0x2e
0000dc  d113              BNE      |L32.262|
;;;3716   									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
0000de  9812              LDR      r0,[sp,#0x48]
0000e0  7800              LDRB     r0,[r0,#0]
0000e2  2803              CMP      r0,#3
0000e4  d106              BNE      |L32.244|
0000e6  9912              LDR      r1,[sp,#0x48]
0000e8  980b              LDR      r0,[sp,#0x2c]
0000ea  6a49              LDR      r1,[r1,#0x24]
0000ec  4288              CMP      r0,r1
0000ee  d101              BNE      |L32.244|
0000f0  2000              MOVS     r0,#0
0000f2  e000              B        |L32.246|
                  |L32.244|
0000f4  980b              LDR      r0,[sp,#0x2c]
                  |L32.246|
0000f6  4606              MOV      r6,r0
;;;3717   									st_clust(dir, dw);
0000f8  4631              MOV      r1,r6
0000fa  4628              MOV      r0,r5
0000fc  f7fffffe          BL       st_clust
;;;3718   									djo.fs->wflag = 1;
000100  2001              MOVS     r0,#1
000102  9912              LDR      r1,[sp,#0x48]
000104  7108              STRB     r0,[r1,#4]
                  |L32.262|
;;;3719   								}
;;;3720   							}
;;;3721   						}
;;;3722   						if (res == FR_OK) {
000106  b944              CBNZ     r4,|L32.282|
;;;3723   							res = dir_remove(&djo);		/* Remove old entry */
000108  a812              ADD      r0,sp,#0x48
00010a  f7fffffe          BL       dir_remove
00010e  4604              MOV      r4,r0
;;;3724   							if (res == FR_OK)
000110  b91c              CBNZ     r4,|L32.282|
;;;3725   								res = sync_fs(djo.fs);
000112  9812              LDR      r0,[sp,#0x48]
000114  f7fffffe          BL       sync_fs
000118  4604              MOV      r4,r0
                  |L32.282|
;;;3726   						}
;;;3727   					}
;;;3728   /* End critical section */
;;;3729   				}
;;;3730   			}
;;;3731   		}
;;;3732   		FREE_BUF();
;;;3733   	}
;;;3734   
;;;3735   	LEAVE_FF(djo.fs, res);
00011a  4620              MOV      r0,r4
;;;3736   }
00011c  b01d              ADD      sp,sp,#0x74
00011e  bdf0              POP      {r4-r7,pc}
;;;3737   
                          ENDP

                  |L32.288|
                          DCD      LfnBuf

                          AREA ||i.f_setlabel||, CODE, READONLY, ALIGN=2

                  f_setlabel PROC
;;;3814   
;;;3815   FRESULT f_setlabel (
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;3816   	const TCHAR* label	/* Pointer to the volume label to set */
;;;3817   )
;;;3818   {
000004  b08c              SUB      sp,sp,#0x30
;;;3819   	FRESULT res;
;;;3820   	DIR dj;
;;;3821   	BYTE vn[11];
;;;3822   	UINT i, j, sl;
;;;3823   	WCHAR w;
;;;3824   	DWORD tm;
;;;3825   
;;;3826   
;;;3827   	/* Get logical drive number */
;;;3828   	res = find_volume(&dj.fs, &label, 1);
000006  2201              MOVS     r2,#1
000008  a90c              ADD      r1,sp,#0x30
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       find_volume
000010  4607              MOV      r7,r0
;;;3829   	if (res) LEAVE_FF(dj.fs, res);
000012  b11f              CBZ      r7,|L33.28|
000014  4638              MOV      r0,r7
                  |L33.22|
;;;3830   
;;;3831   	/* Create a volume label in directory form */
;;;3832   	vn[0] = 0;
;;;3833   	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
;;;3834   	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
;;;3835   	if (sl) {	/* Create volume label in directory form */
;;;3836   		i = j = 0;
;;;3837   		do {
;;;3838   #if _USE_LFN && _LFN_UNICODE
;;;3839   			w = ff_convert(ff_wtoupper(label[i++]), 0);
;;;3840   #else
;;;3841   			w = (BYTE)label[i++];
;;;3842   			if (IsDBCS1(w))
;;;3843   				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
;;;3844   #if _USE_LFN
;;;3845   			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
;;;3846   #else
;;;3847   			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
;;;3848   #ifdef _EXCVT
;;;3849   			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
;;;3850   #else
;;;3851   			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
;;;3852   #endif
;;;3853   #endif
;;;3854   #endif
;;;3855   			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
;;;3856   				LEAVE_FF(dj.fs, FR_INVALID_NAME);
;;;3857   			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
;;;3858   			vn[j++] = (BYTE)w;
;;;3859   		} while (i < sl);
;;;3860   		while (j < 11) vn[j++] = ' ';
;;;3861   	}
;;;3862   
;;;3863   	/* Set volume label */
;;;3864   	dj.sclust = 0;					/* Open root directory */
;;;3865   	res = dir_sdi(&dj, 0);
;;;3866   	if (res == FR_OK) {
;;;3867   		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
;;;3868   		if (res == FR_OK) {			/* A volume label is found */
;;;3869   			if (vn[0]) {
;;;3870   				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
;;;3871   				tm = get_fattime();
;;;3872   				ST_DWORD(dj.dir+DIR_WrtTime, tm);
;;;3873   			} else {
;;;3874   				dj.dir[0] = DDE;			/* Remove the volume label */
;;;3875   			}
;;;3876   			dj.fs->wflag = 1;
;;;3877   			res = sync_fs(dj.fs);
;;;3878   		} else {					/* No volume label is found or error */
;;;3879   			if (res == FR_NO_FILE) {
;;;3880   				res = FR_OK;
;;;3881   				if (vn[0]) {				/* Create volume label as new */
;;;3882   					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
;;;3883   					if (res == FR_OK) {
;;;3884   						mem_set(dj.dir, 0, SZ_DIR);	/* Set volume label */
;;;3885   						mem_cpy(dj.dir, vn, 11);
;;;3886   						dj.dir[DIR_Attr] = AM_VOL;
;;;3887   						tm = get_fattime();
;;;3888   						ST_DWORD(dj.dir+DIR_WrtTime, tm);
;;;3889   						dj.fs->wflag = 1;
;;;3890   						res = sync_fs(dj.fs);
;;;3891   					}
;;;3892   				}
;;;3893   			}
;;;3894   		}
;;;3895   	}
;;;3896   
;;;3897   	LEAVE_FF(dj.fs, res);
;;;3898   }
000016  b00d              ADD      sp,sp,#0x34
000018  e8bd8ff0          POP      {r4-r11,pc}
                  |L33.28|
00001c  2000              MOVS     r0,#0                 ;3832
00001e  f88d0000          STRB     r0,[sp,#0]            ;3832
000022  2500              MOVS     r5,#0                 ;3833
000024  e000              B        |L33.40|
                  |L33.38|
000026  1c6d              ADDS     r5,r5,#1              ;3833
                  |L33.40|
000028  980c              LDR      r0,[sp,#0x30]         ;3833
00002a  5d40              LDRB     r0,[r0,r5]            ;3833
00002c  2800              CMP      r0,#0                 ;3833
00002e  d1fa              BNE      |L33.38|
000030  e000              B        |L33.52|
                  |L33.50|
000032  1e6d              SUBS     r5,r5,#1              ;3834
                  |L33.52|
000034  b125              CBZ      r5,|L33.64|
000036  1e68              SUBS     r0,r5,#1              ;3834
000038  990c              LDR      r1,[sp,#0x30]         ;3834
00003a  5c08              LDRB     r0,[r1,r0]            ;3834
00003c  2820              CMP      r0,#0x20              ;3834
00003e  d0f8              BEQ      |L33.50|
                  |L33.64|
000040  2d00              CMP      r5,#0                 ;3835
000042  d03d              BEQ      |L33.192|
000044  f04f0800          MOV      r8,#0                 ;3836
000048  46c1              MOV      r9,r8                 ;3836
00004a  bf00              NOP                            ;3837
                  |L33.76|
00004c  4648              MOV      r0,r9                 ;3841
00004e  f1090901          ADD      r9,r9,#1              ;3841
000052  990c              LDR      r1,[sp,#0x30]         ;3841
000054  5c0e              LDRB     r6,[r1,r0]            ;3841
000056  2101              MOVS     r1,#1                 ;3845
000058  4630              MOV      r0,r6                 ;3845
00005a  f7fffffe          BL       ff_convert
00005e  4683              MOV      r11,r0                ;3845
000060  f7fffffe          BL       ff_wtoupper
000064  4682              MOV      r10,r0                ;3845
000066  2100              MOVS     r1,#0                 ;3845
000068  f7fffffe          BL       ff_convert
00006c  4606              MOV      r6,r0                 ;3845
00006e  b15e              CBZ      r6,|L33.136|
000070  4631              MOV      r1,r6                 ;3855
000072  a044              ADR      r0,|L33.388|
000074  f7fffffe          BL       chk_chr
000078  b930              CBNZ     r0,|L33.136|
00007a  2eff              CMP      r6,#0xff              ;3855
00007c  dd01              BLE      |L33.130|
00007e  200a              MOVS     r0,#0xa               ;3855
000080  e000              B        |L33.132|
                  |L33.130|
000082  200b              MOVS     r0,#0xb               ;3855
                  |L33.132|
000084  4540              CMP      r0,r8                 ;3855
000086  d801              BHI      |L33.140|
                  |L33.136|
000088  2006              MOVS     r0,#6                 ;3856
00008a  e7c4              B        |L33.22|
                  |L33.140|
00008c  2eff              CMP      r6,#0xff              ;3857
00008e  dd05              BLE      |L33.156|
000090  1232              ASRS     r2,r6,#8              ;3857
000092  4640              MOV      r0,r8                 ;3857
000094  f1080801          ADD      r8,r8,#1              ;3857
000098  f80d2000          STRB     r2,[sp,r0]            ;3857
                  |L33.156|
00009c  b2f2              UXTB     r2,r6                 ;3858
00009e  4640              MOV      r0,r8                 ;3858
0000a0  f1080801          ADD      r8,r8,#1              ;3858
0000a4  f80d2000          STRB     r2,[sp,r0]            ;3858
0000a8  45a9              CMP      r9,r5                 ;3859
0000aa  d3cf              BCC      |L33.76|
0000ac  e005              B        |L33.186|
                  |L33.174|
0000ae  2220              MOVS     r2,#0x20              ;3860
0000b0  4640              MOV      r0,r8                 ;3860
0000b2  f1080801          ADD      r8,r8,#1              ;3860
0000b6  f80d2000          STRB     r2,[sp,r0]            ;3860
                  |L33.186|
0000ba  f1b80f0b          CMP      r8,#0xb               ;3860
0000be  d3f6              BCC      |L33.174|
                  |L33.192|
0000c0  2000              MOVS     r0,#0                 ;3864
0000c2  9005              STR      r0,[sp,#0x14]         ;3864
0000c4  2100              MOVS     r1,#0                 ;3865
0000c6  a803              ADD      r0,sp,#0xc            ;3865
0000c8  f7fffffe          BL       dir_sdi
0000cc  4607              MOV      r7,r0                 ;3865
0000ce  2f00              CMP      r7,#0                 ;3866
0000d0  d155              BNE      |L33.382|
0000d2  2101              MOVS     r1,#1                 ;3867
0000d4  a803              ADD      r0,sp,#0xc            ;3867
0000d6  f7fffffe          BL       dir_read
0000da  4607              MOV      r7,r0                 ;3867
0000dc  bb0f              CBNZ     r7,|L33.290|
0000de  f89d0000          LDRB     r0,[sp,#0]            ;3869
0000e2  b198              CBZ      r0,|L33.268|
0000e4  220b              MOVS     r2,#0xb               ;3870
0000e6  4669              MOV      r1,sp                 ;3870
0000e8  9808              LDR      r0,[sp,#0x20]         ;3870
0000ea  f7fffffe          BL       mem_cpy
0000ee  f7fffffe          BL       get_fattime
0000f2  4604              MOV      r4,r0                 ;3871
0000f4  9908              LDR      r1,[sp,#0x20]         ;3872
0000f6  758c              STRB     r4,[r1,#0x16]         ;3872
0000f8  0a21              LSRS     r1,r4,#8              ;3872
0000fa  9808              LDR      r0,[sp,#0x20]         ;3872
0000fc  75c1              STRB     r1,[r0,#0x17]         ;3872
0000fe  0c21              LSRS     r1,r4,#16             ;3872
000100  9808              LDR      r0,[sp,#0x20]         ;3872
000102  7601              STRB     r1,[r0,#0x18]         ;3872
000104  0e21              LSRS     r1,r4,#24             ;3872
000106  9808              LDR      r0,[sp,#0x20]         ;3872
000108  7641              STRB     r1,[r0,#0x19]         ;3872
00010a  e002              B        |L33.274|
                  |L33.268|
00010c  20e5              MOVS     r0,#0xe5              ;3874
00010e  9908              LDR      r1,[sp,#0x20]         ;3874
000110  7008              STRB     r0,[r1,#0]            ;3874
                  |L33.274|
000112  2001              MOVS     r0,#1                 ;3876
000114  9903              LDR      r1,[sp,#0xc]          ;3876
000116  7108              STRB     r0,[r1,#4]            ;3876
000118  9803              LDR      r0,[sp,#0xc]          ;3877
00011a  f7fffffe          BL       sync_fs
00011e  4607              MOV      r7,r0                 ;3877
000120  e02d              B        |L33.382|
                  |L33.290|
000122  2f04              CMP      r7,#4                 ;3879
000124  d12b              BNE      |L33.382|
000126  2700              MOVS     r7,#0                 ;3880
000128  f89d0000          LDRB     r0,[sp,#0]            ;3881
00012c  b338              CBZ      r0,|L33.382|
00012e  2101              MOVS     r1,#1                 ;3882
000130  a803              ADD      r0,sp,#0xc            ;3882
000132  f7fffffe          BL       dir_alloc
000136  4607              MOV      r7,r0                 ;3882
000138  bb0f              CBNZ     r7,|L33.382|
00013a  2220              MOVS     r2,#0x20              ;3884
00013c  2100              MOVS     r1,#0                 ;3884
00013e  9808              LDR      r0,[sp,#0x20]         ;3884
000140  f7fffffe          BL       mem_set
000144  220b              MOVS     r2,#0xb               ;3885
000146  4669              MOV      r1,sp                 ;3885
000148  9808              LDR      r0,[sp,#0x20]         ;3885
00014a  f7fffffe          BL       mem_cpy
00014e  2008              MOVS     r0,#8                 ;3886
000150  9908              LDR      r1,[sp,#0x20]         ;3886
000152  72c8              STRB     r0,[r1,#0xb]          ;3886
000154  f7fffffe          BL       get_fattime
000158  4604              MOV      r4,r0                 ;3887
00015a  9908              LDR      r1,[sp,#0x20]         ;3888
00015c  758c              STRB     r4,[r1,#0x16]         ;3888
00015e  0a21              LSRS     r1,r4,#8              ;3888
000160  9808              LDR      r0,[sp,#0x20]         ;3888
000162  75c1              STRB     r1,[r0,#0x17]         ;3888
000164  0c21              LSRS     r1,r4,#16             ;3888
000166  9808              LDR      r0,[sp,#0x20]         ;3888
000168  7601              STRB     r1,[r0,#0x18]         ;3888
00016a  0e21              LSRS     r1,r4,#24             ;3888
00016c  9808              LDR      r0,[sp,#0x20]         ;3888
00016e  7641              STRB     r1,[r0,#0x19]         ;3888
000170  2001              MOVS     r0,#1                 ;3889
000172  9903              LDR      r1,[sp,#0xc]          ;3889
000174  7108              STRB     r0,[r1,#4]            ;3889
000176  9803              LDR      r0,[sp,#0xc]          ;3890
000178  f7fffffe          BL       sync_fs
00017c  4607              MOV      r7,r0                 ;3890
                  |L33.382|
00017e  4638              MOV      r0,r7                 ;3897
000180  e749              B        |L33.22|
;;;3899   
                          ENDP

000182  0000              DCW      0x0000
                  |L33.388|
000184  222a2b2c          DCB      """*+,.:;<=>?[]|",127,0
000188  2e3a3b3c
00018c  3d3e3f5b
000190  5d7c7f00

                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=2

                  f_stat PROC
;;;3278   
;;;3279   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3280   	const TCHAR* path,	/* Pointer to the file path */
;;;3281   	FILINFO* fno		/* Pointer to file information to return */
;;;3282   )
;;;3283   {
000002  b08d              SUB      sp,sp,#0x34
000004  460d              MOV      r5,r1
;;;3284   	FRESULT res;
;;;3285   	DIR dj;
;;;3286   	DEF_NAMEBUF;
;;;3287   
;;;3288   
;;;3289   	/* Get logical drive number */
;;;3290   	res = find_volume(&dj.fs, &path, 0);
000006  2200              MOVS     r2,#0
000008  a90d              ADD      r1,sp,#0x34
00000a  a804              ADD      r0,sp,#0x10
00000c  f7fffffe          BL       find_volume
000010  4604              MOV      r4,r0
;;;3291   	if (res == FR_OK) {
000012  b994              CBNZ     r4,|L34.58|
;;;3292   		INIT_BUF(dj);
000014  a801              ADD      r0,sp,#4
000016  900a              STR      r0,[sp,#0x28]
000018  4809              LDR      r0,|L34.64|
00001a  900b              STR      r0,[sp,#0x2c]
;;;3293   		res = follow_path(&dj, path);	/* Follow the file path */
00001c  a804              ADD      r0,sp,#0x10
00001e  990d              LDR      r1,[sp,#0x34]
000020  f7fffffe          BL       follow_path
000024  4604              MOV      r4,r0
;;;3294   		if (res == FR_OK) {				/* Follow completed */
000026  b944              CBNZ     r4,|L34.58|
;;;3295   			if (dj.dir) {		/* Found an object */
000028  9809              LDR      r0,[sp,#0x24]
00002a  b128              CBZ      r0,|L34.56|
;;;3296   				if (fno) get_fileinfo(&dj, fno);
00002c  b12d              CBZ      r5,|L34.58|
00002e  4629              MOV      r1,r5
000030  a804              ADD      r0,sp,#0x10
000032  f7fffffe          BL       get_fileinfo
000036  e000              B        |L34.58|
                  |L34.56|
;;;3297   			} else {			/* It is root directory */
;;;3298   				res = FR_INVALID_NAME;
000038  2406              MOVS     r4,#6
                  |L34.58|
;;;3299   			}
;;;3300   		}
;;;3301   		FREE_BUF();
;;;3302   	}
;;;3303   
;;;3304   	LEAVE_FF(dj.fs, res);
00003a  4620              MOV      r0,r4
;;;3305   }
00003c  b00f              ADD      sp,sp,#0x3c
00003e  bd30              POP      {r4,r5,pc}
;;;3306   
                          ENDP

                  |L34.64|
                          DCD      LfnBuf

                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;2769   
;;;2770   FRESULT f_sync (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2771   	FIL* fp		/* Pointer to the file object */
;;;2772   )
;;;2773   {
000004  4604              MOV      r4,r0
;;;2774   	FRESULT res;
;;;2775   	DWORD tm;
;;;2776   	BYTE *dir;
;;;2777   
;;;2778   
;;;2779   	res = validate(fp);					/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4607              MOV      r7,r0
;;;2780   	if (res == FR_OK) {
00000e  2f00              CMP      r7,#0
000010  d14b              BNE      |L35.170|
;;;2781   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000012  79a0              LDRB     r0,[r4,#6]
000014  f0100f20          TST      r0,#0x20
000018  d047              BEQ      |L35.170|
;;;2782   			/* Write-back dirty buffer */
;;;2783   #if !_FS_TINY
;;;2784   			if (fp->flag & FA__DIRTY) {
00001a  79a0              LDRB     r0,[r4,#6]
00001c  f0100f40          TST      r0,#0x40
000020  d00f              BEQ      |L35.66|
;;;2785   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
000022  6821              LDR      r1,[r4,#0]
000024  7848              LDRB     r0,[r1,#1]
000026  2301              MOVS     r3,#1
000028  f1040128          ADD      r1,r4,#0x28
00002c  69a2              LDR      r2,[r4,#0x18]
00002e  f7fffffe          BL       disk_write
000032  b110              CBZ      r0,|L35.58|
;;;2786   					LEAVE_FF(fp->fs, FR_DISK_ERR);
000034  2001              MOVS     r0,#1
                  |L35.54|
;;;2787   				fp->flag &= ~FA__DIRTY;
;;;2788   			}
;;;2789   #endif
;;;2790   			/* Update the directory entry */
;;;2791   			res = move_window(fp->fs, fp->dir_sect);
;;;2792   			if (res == FR_OK) {
;;;2793   				dir = fp->dir_ptr;
;;;2794   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2795   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;2796   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2797   				tm = get_fattime();							/* Update updated time */
;;;2798   				ST_DWORD(dir+DIR_WrtTime, tm);
;;;2799   				ST_WORD(dir+DIR_LstAccDate, 0);
;;;2800   				fp->flag &= ~FA__WRITTEN;
;;;2801   				fp->fs->wflag = 1;
;;;2802   				res = sync_fs(fp->fs);
;;;2803   			}
;;;2804   		}
;;;2805   	}
;;;2806   
;;;2807   	LEAVE_FF(fp->fs, res);
;;;2808   }
000036  e8bd81f0          POP      {r4-r8,pc}
                  |L35.58|
00003a  79a0              LDRB     r0,[r4,#6]            ;2787
00003c  f0200040          BIC      r0,r0,#0x40           ;2787
000040  71a0              STRB     r0,[r4,#6]            ;2787
                  |L35.66|
000042  69e1              LDR      r1,[r4,#0x1c]         ;2791
000044  6820              LDR      r0,[r4,#0]            ;2791
000046  f7fffffe          BL       move_window
00004a  4607              MOV      r7,r0                 ;2791
00004c  2f00              CMP      r7,#0                 ;2792
00004e  d12c              BNE      |L35.170|
000050  6a25              LDR      r5,[r4,#0x20]         ;2793
000052  7ae8              LDRB     r0,[r5,#0xb]          ;2794
000054  f0400020          ORR      r0,r0,#0x20           ;2794
000058  72e8              STRB     r0,[r5,#0xb]          ;2794
00005a  7b20              LDRB     r0,[r4,#0xc]          ;2795
00005c  7728              STRB     r0,[r5,#0x1c]         ;2795
00005e  89a0              LDRH     r0,[r4,#0xc]          ;2795
000060  0a01              LSRS     r1,r0,#8              ;2795
000062  7769              STRB     r1,[r5,#0x1d]         ;2795
000064  68e0              LDR      r0,[r4,#0xc]          ;2795
000066  0c01              LSRS     r1,r0,#16             ;2795
000068  77a9              STRB     r1,[r5,#0x1e]         ;2795
00006a  68e0              LDR      r0,[r4,#0xc]          ;2795
00006c  0e01              LSRS     r1,r0,#24             ;2795
00006e  77e9              STRB     r1,[r5,#0x1f]         ;2795
000070  4628              MOV      r0,r5                 ;2796
000072  6921              LDR      r1,[r4,#0x10]         ;2796
000074  f7fffffe          BL       st_clust
000078  f7fffffe          BL       get_fattime
00007c  4606              MOV      r6,r0                 ;2797
00007e  75ae              STRB     r6,[r5,#0x16]         ;2798
000080  0a31              LSRS     r1,r6,#8              ;2798
000082  75e9              STRB     r1,[r5,#0x17]         ;2798
000084  0c31              LSRS     r1,r6,#16             ;2798
000086  7629              STRB     r1,[r5,#0x18]         ;2798
000088  0e31              LSRS     r1,r6,#24             ;2798
00008a  7669              STRB     r1,[r5,#0x19]         ;2798
00008c  2000              MOVS     r0,#0                 ;2799
00008e  74a8              STRB     r0,[r5,#0x12]         ;2799
000090  2100              MOVS     r1,#0                 ;2799
000092  74e9              STRB     r1,[r5,#0x13]         ;2799
000094  79a0              LDRB     r0,[r4,#6]            ;2800
000096  f0200020          BIC      r0,r0,#0x20           ;2800
00009a  71a0              STRB     r0,[r4,#6]            ;2800
00009c  2001              MOVS     r0,#1                 ;2801
00009e  6821              LDR      r1,[r4,#0]            ;2801
0000a0  7108              STRB     r0,[r1,#4]            ;2801
0000a2  6820              LDR      r0,[r4,#0]            ;2802
0000a4  f7fffffe          BL       sync_fs
0000a8  4607              MOV      r7,r0                 ;2802
                  |L35.170|
0000aa  4638              MOV      r0,r7                 ;2807
0000ac  e7c3              B        |L35.54|
;;;2809   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;3380   
;;;3381   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;3382   	FIL* fp		/* Pointer to the file object */
;;;3383   )
;;;3384   {
000002  4604              MOV      r4,r0
;;;3385   	FRESULT res;
;;;3386   	DWORD ncl;
;;;3387   
;;;3388   
;;;3389   	res = validate(fp);						/* Check validity of the object */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3390   	if (res == FR_OK) {
00000c  b945              CBNZ     r5,|L36.32|
;;;3391   		if (fp->err) {						/* Check error */
00000e  79e0              LDRB     r0,[r4,#7]
000010  b108              CBZ      r0,|L36.22|
;;;3392   			res = (FRESULT)fp->err;
000012  79e5              LDRB     r5,[r4,#7]
000014  e004              B        |L36.32|
                  |L36.22|
;;;3393   		} else {
;;;3394   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
000016  79a0              LDRB     r0,[r4,#6]
000018  f0100f02          TST      r0,#2
00001c  d100              BNE      |L36.32|
;;;3395   				res = FR_DENIED;
00001e  2507              MOVS     r5,#7
                  |L36.32|
;;;3396   		}
;;;3397   	}
;;;3398   	if (res == FR_OK) {
000020  2d00              CMP      r5,#0
000022  d147              BNE      |L36.180|
;;;3399   		if (fp->fsize > fp->fptr) {
000024  e9d41002          LDRD     r1,r0,[r4,#8]
000028  4288              CMP      r0,r1
00002a  d941              BLS      |L36.176|
;;;3400   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
00002c  68a0              LDR      r0,[r4,#8]
00002e  60e0              STR      r0,[r4,#0xc]
;;;3401   			fp->flag |= FA__WRITTEN;
000030  79a0              LDRB     r0,[r4,#6]
000032  f0400020          ORR      r0,r0,#0x20
000036  71a0              STRB     r0,[r4,#6]
;;;3402   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
000038  68a0              LDR      r0,[r4,#8]
00003a  b938              CBNZ     r0,|L36.76|
;;;3403   				res = remove_chain(fp->fs, fp->sclust);
00003c  6921              LDR      r1,[r4,#0x10]
00003e  6820              LDR      r0,[r4,#0]
000040  f7fffffe          BL       remove_chain
000044  4605              MOV      r5,r0
;;;3404   				fp->sclust = 0;
000046  2000              MOVS     r0,#0
000048  6120              STR      r0,[r4,#0x10]
00004a  e01d              B        |L36.136|
                  |L36.76|
;;;3405   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3406   				ncl = get_fat(fp->fs, fp->clust);
00004c  6961              LDR      r1,[r4,#0x14]
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       get_fat
000054  4606              MOV      r6,r0
;;;3407   				res = FR_OK;
000056  2500              MOVS     r5,#0
;;;3408   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
000058  1c70              ADDS     r0,r6,#1
00005a  d100              BNE      |L36.94|
00005c  2501              MOVS     r5,#1
                  |L36.94|
;;;3409   				if (ncl == 1) res = FR_INT_ERR;
00005e  2e01              CMP      r6,#1
000060  d100              BNE      |L36.100|
000062  2502              MOVS     r5,#2
                  |L36.100|
;;;3410   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
000064  b985              CBNZ     r5,|L36.136|
000066  6820              LDR      r0,[r4,#0]
000068  6940              LDR      r0,[r0,#0x14]
00006a  42b0              CMP      r0,r6
00006c  d90c              BLS      |L36.136|
;;;3411   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
00006e  f06f4270          MVN      r2,#0xf0000000
000072  6961              LDR      r1,[r4,#0x14]
000074  6820              LDR      r0,[r4,#0]
000076  f7fffffe          BL       put_fat
00007a  4605              MOV      r5,r0
;;;3412   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
00007c  b925              CBNZ     r5,|L36.136|
00007e  4631              MOV      r1,r6
000080  6820              LDR      r0,[r4,#0]
000082  f7fffffe          BL       remove_chain
000086  4605              MOV      r5,r0
                  |L36.136|
;;;3413   				}
;;;3414   			}
;;;3415   #if !_FS_TINY
;;;3416   			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
000088  b995              CBNZ     r5,|L36.176|
00008a  79a0              LDRB     r0,[r4,#6]
00008c  f0100f40          TST      r0,#0x40
000090  d00e              BEQ      |L36.176|
;;;3417   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
000092  6821              LDR      r1,[r4,#0]
000094  7848              LDRB     r0,[r1,#1]
000096  2301              MOVS     r3,#1
000098  f1040128          ADD      r1,r4,#0x28
00009c  69a2              LDR      r2,[r4,#0x18]
00009e  f7fffffe          BL       disk_write
0000a2  b108              CBZ      r0,|L36.168|
;;;3418   					res = FR_DISK_ERR;
0000a4  2501              MOVS     r5,#1
0000a6  e003              B        |L36.176|
                  |L36.168|
;;;3419   				else
;;;3420   					fp->flag &= ~FA__DIRTY;
0000a8  79a0              LDRB     r0,[r4,#6]
0000aa  f0200040          BIC      r0,r0,#0x40
0000ae  71a0              STRB     r0,[r4,#6]
                  |L36.176|
;;;3421   			}
;;;3422   #endif
;;;3423   		}
;;;3424   		if (res != FR_OK) fp->err = (FRESULT)res;
0000b0  b105              CBZ      r5,|L36.180|
0000b2  71e5              STRB     r5,[r4,#7]
                  |L36.180|
;;;3425   	}
;;;3426   
;;;3427   	LEAVE_FF(fp->fs, res);
0000b4  4628              MOV      r0,r5
;;;3428   }
0000b6  bd70              POP      {r4-r6,pc}
;;;3429   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=2

                  f_unlink PROC
;;;3436   
;;;3437   FRESULT f_unlink (
000000  b571              PUSH     {r0,r4-r6,lr}
;;;3438   	const TCHAR* path		/* Pointer to the file or directory path */
;;;3439   )
;;;3440   {
000002  b095              SUB      sp,sp,#0x54
;;;3441   	FRESULT res;
;;;3442   	DIR dj, sdj;
;;;3443   	BYTE *dir;
;;;3444   	DWORD dclst;
;;;3445   	DEF_NAMEBUF;
;;;3446   
;;;3447   
;;;3448   	/* Get logical drive number */
;;;3449   	res = find_volume(&dj.fs, &path, 1);
000004  2201              MOVS     r2,#1
000006  a915              ADD      r1,sp,#0x54
000008  a80c              ADD      r0,sp,#0x30
00000a  f7fffffe          BL       find_volume
00000e  4604              MOV      r4,r0
;;;3450   	if (res == FR_OK) {
000010  2c00              CMP      r4,#0
000012  d149              BNE      |L37.168|
;;;3451   		INIT_BUF(dj);
000014  f8cdd048          STR      sp,[sp,#0x48]
000018  4825              LDR      r0,|L37.176|
00001a  9013              STR      r0,[sp,#0x4c]
;;;3452   		res = follow_path(&dj, path);		/* Follow the file path */
00001c  a80c              ADD      r0,sp,#0x30
00001e  9915              LDR      r1,[sp,#0x54]
000020  f7fffffe          BL       follow_path
000024  4604              MOV      r4,r0
;;;3453   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000026  bf00              NOP      
;;;3454   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3455   #if _FS_LOCK
;;;3456   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
;;;3457   #endif
;;;3458   		if (res == FR_OK) {					/* The object is accessible */
000028  2c00              CMP      r4,#0
00002a  d13d              BNE      |L37.168|
;;;3459   			dir = dj.dir;
00002c  9e11              LDR      r6,[sp,#0x44]
;;;3460   			if (!dir) {
00002e  b90e              CBNZ     r6,|L37.52|
;;;3461   				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
000030  2406              MOVS     r4,#6
000032  e004              B        |L37.62|
                  |L37.52|
;;;3462   			} else {
;;;3463   				if (dir[DIR_Attr] & AM_RDO)
000034  7af0              LDRB     r0,[r6,#0xb]
000036  f0100f01          TST      r0,#1
00003a  d000              BEQ      |L37.62|
;;;3464   					res = FR_DENIED;		/* Cannot remove R/O object */
00003c  2407              MOVS     r4,#7
                  |L37.62|
;;;3465   			}
;;;3466   			dclst = ld_clust(dj.fs, dir);
00003e  4631              MOV      r1,r6
000040  980c              LDR      r0,[sp,#0x30]
000042  f7fffffe          BL       ld_clust
000046  4605              MOV      r5,r0
;;;3467   			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
000048  b9ec              CBNZ     r4,|L37.134|
00004a  7af0              LDRB     r0,[r6,#0xb]
00004c  f0100f10          TST      r0,#0x10
000050  d019              BEQ      |L37.134|
;;;3468   				if (dclst < 2) {
000052  2d02              CMP      r5,#2
000054  d201              BCS      |L37.90|
;;;3469   					res = FR_INT_ERR;
000056  2402              MOVS     r4,#2
000058  e015              B        |L37.134|
                  |L37.90|
;;;3470   				} else {
;;;3471   					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-directory is empty or not */
00005a  2224              MOVS     r2,#0x24
00005c  a90c              ADD      r1,sp,#0x30
00005e  a803              ADD      r0,sp,#0xc
000060  f7fffffe          BL       mem_cpy
;;;3472   					sdj.sclust = dclst;
000064  9505              STR      r5,[sp,#0x14]
;;;3473   					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
000066  2102              MOVS     r1,#2
000068  a803              ADD      r0,sp,#0xc
00006a  f7fffffe          BL       dir_sdi
00006e  4604              MOV      r4,r0
;;;3474   					if (res == FR_OK) {
000070  b94c              CBNZ     r4,|L37.134|
;;;3475   						res = dir_read(&sdj, 0);	/* Read an item */
000072  2100              MOVS     r1,#0
000074  a803              ADD      r0,sp,#0xc
000076  f7fffffe          BL       dir_read
00007a  4604              MOV      r4,r0
;;;3476   						if (res == FR_OK		/* Not empty directory */
00007c  b904              CBNZ     r4,|L37.128|
;;;3477   #if _FS_RPATH
;;;3478   						|| dclst == dj.fs->cdir	/* Current directory */
;;;3479   #endif
;;;3480   						) res = FR_DENIED;
00007e  2407              MOVS     r4,#7
                  |L37.128|
;;;3481   						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
000080  2c04              CMP      r4,#4
000082  d100              BNE      |L37.134|
000084  2400              MOVS     r4,#0
                  |L37.134|
;;;3482   					}
;;;3483   				}
;;;3484   			}
;;;3485   			if (res == FR_OK) {
000086  b97c              CBNZ     r4,|L37.168|
;;;3486   				res = dir_remove(&dj);		/* Remove the directory entry */
000088  a80c              ADD      r0,sp,#0x30
00008a  f7fffffe          BL       dir_remove
00008e  4604              MOV      r4,r0
;;;3487   				if (res == FR_OK) {
000090  b954              CBNZ     r4,|L37.168|
;;;3488   					if (dclst)				/* Remove the cluster chain if exist */
000092  b125              CBZ      r5,|L37.158|
;;;3489   						res = remove_chain(dj.fs, dclst);
000094  4629              MOV      r1,r5
000096  980c              LDR      r0,[sp,#0x30]
000098  f7fffffe          BL       remove_chain
00009c  4604              MOV      r4,r0
                  |L37.158|
;;;3490   					if (res == FR_OK) res = sync_fs(dj.fs);
00009e  b91c              CBNZ     r4,|L37.168|
0000a0  980c              LDR      r0,[sp,#0x30]
0000a2  f7fffffe          BL       sync_fs
0000a6  4604              MOV      r4,r0
                  |L37.168|
;;;3491   				}
;;;3492   			}
;;;3493   		}
;;;3494   		FREE_BUF();
;;;3495   	}
;;;3496   
;;;3497   	LEAVE_FF(dj.fs, res);
0000a8  4620              MOV      r0,r4
;;;3498   }
0000aa  b016              ADD      sp,sp,#0x58
0000ac  bd70              POP      {r4-r6,pc}
;;;3499   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L37.176|
                          DCD      LfnBuf

                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=2

                  f_utime PROC
;;;3623   
;;;3624   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3625   	const TCHAR* path,	/* Pointer to the file/directory name */
;;;3626   	const FILINFO* fno	/* Pointer to the time stamp to be set */
;;;3627   )
;;;3628   {
000002  b08c              SUB      sp,sp,#0x30
000004  460d              MOV      r5,r1
;;;3629   	FRESULT res;
;;;3630   	DIR dj;
;;;3631   	BYTE *dir;
;;;3632   	DEF_NAMEBUF;
;;;3633   
;;;3634   
;;;3635   	/* Get logical drive number */
;;;3636   	res = find_volume(&dj.fs, &path, 1);
000006  2201              MOVS     r2,#1
000008  a90c              ADD      r1,sp,#0x30
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       find_volume
000010  4606              MOV      r6,r0
;;;3637   	if (res == FR_OK) {
000012  b9fe              CBNZ     r6,|L38.84|
;;;3638   		INIT_BUF(dj);
000014  f8cdd024          STR      sp,[sp,#0x24]
000018  4810              LDR      r0,|L38.92|
00001a  900a              STR      r0,[sp,#0x28]
;;;3639   		res = follow_path(&dj, path);	/* Follow the file path */
00001c  a803              ADD      r0,sp,#0xc
00001e  990c              LDR      r1,[sp,#0x30]
000020  f7fffffe          BL       follow_path
000024  4606              MOV      r6,r0
;;;3640   		FREE_BUF();
;;;3641   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000026  bf00              NOP      
;;;3642   			res = FR_INVALID_NAME;
;;;3643   		if (res == FR_OK) {
000028  b9a6              CBNZ     r6,|L38.84|
;;;3644   			dir = dj.dir;
00002a  9c08              LDR      r4,[sp,#0x20]
;;;3645   			if (!dir) {					/* Root directory */
00002c  b90c              CBNZ     r4,|L38.50|
;;;3646   				res = FR_INVALID_NAME;
00002e  2606              MOVS     r6,#6
000030  e010              B        |L38.84|
                  |L38.50|
;;;3647   			} else {					/* File or sub-directory */
;;;3648   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
000032  79a8              LDRB     r0,[r5,#6]
000034  75a0              STRB     r0,[r4,#0x16]
000036  88e8              LDRH     r0,[r5,#6]
000038  1201              ASRS     r1,r0,#8
00003a  75e1              STRB     r1,[r4,#0x17]
;;;3649   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
00003c  7928              LDRB     r0,[r5,#4]
00003e  7620              STRB     r0,[r4,#0x18]
000040  88a8              LDRH     r0,[r5,#4]
000042  1201              ASRS     r1,r0,#8
000044  7661              STRB     r1,[r4,#0x19]
;;;3650   				dj.fs->wflag = 1;
000046  2001              MOVS     r0,#1
000048  9903              LDR      r1,[sp,#0xc]
00004a  7108              STRB     r0,[r1,#4]
;;;3651   				res = sync_fs(dj.fs);
00004c  9803              LDR      r0,[sp,#0xc]
00004e  f7fffffe          BL       sync_fs
000052  4606              MOV      r6,r0
                  |L38.84|
;;;3652   			}
;;;3653   		}
;;;3654   	}
;;;3655   
;;;3656   	LEAVE_FF(dj.fs, res);
000054  4630              MOV      r0,r6
;;;3657   }
000056  b00e              ADD      sp,sp,#0x38
000058  bd70              POP      {r4-r6,pc}
;;;3658   
                          ENDP

00005a  0000              DCW      0x0000
                  |L38.92|
                          DCD      LfnBuf

                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;2648   
;;;2649   FRESULT f_write (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2650   	FIL* fp,			/* Pointer to the file object */
;;;2651   	const void *buff,	/* Pointer to the data to be written */
;;;2652   	UINT btw,			/* Number of bytes to write */
;;;2653   	UINT* bw			/* Pointer to number of bytes written */
;;;2654   )
;;;2655   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;2656   	FRESULT res;
;;;2657   	DWORD clst, sect;
;;;2658   	UINT wcnt, cc;
;;;2659   	const BYTE *wbuff = (const BYTE*)buff;
00000c  9804              LDR      r0,[sp,#0x10]
00000e  9001              STR      r0,[sp,#4]
;;;2660   	BYTE csect;
;;;2661   
;;;2662   
;;;2663   	*bw = 0;	/* Clear write byte counter */
000010  2000              MOVS     r0,#0
000012  f8cb0000          STR      r0,[r11,#0]
;;;2664   
;;;2665   	res = validate(fp);						/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2666   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L39.42|
000022  9802              LDR      r0,[sp,#8]
                  |L39.36|
;;;2667   	if (fp->err)							/* Check error */
;;;2668   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2669   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2670   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2671   	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
;;;2672   
;;;2673   	for ( ;  btw;							/* Repeat until all data written */
;;;2674   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2675   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2676   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2677   			if (!csect) {					/* On the cluster boundary? */
;;;2678   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2679   					clst = fp->sclust;		/* Follow from the origin */
;;;2680   					if (clst == 0)			/* When no cluster is allocated, */
;;;2681   						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2682   				} else {					/* Middle or end of the file */
;;;2683   #if _USE_FASTSEEK
;;;2684   					if (fp->cltbl)
;;;2685   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2686   					else
;;;2687   #endif
;;;2688   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2689   				}
;;;2690   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2691   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2692   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2693   				fp->clust = clst;			/* Update current cluster */
;;;2694   			}
;;;2695   #if _FS_TINY
;;;2696   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2697   				ABORT(fp->fs, FR_DISK_ERR);
;;;2698   #else
;;;2699   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2700   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;2701   					ABORT(fp->fs, FR_DISK_ERR);
;;;2702   				fp->flag &= ~FA__DIRTY;
;;;2703   			}
;;;2704   #endif
;;;2705   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2706   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2707   			sect += csect;
;;;2708   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2709   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2710   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2711   					cc = fp->fs->csize - csect;
;;;2712   				if (disk_write(fp->fs->drv, wbuff, sect, cc))
;;;2713   					ABORT(fp->fs, FR_DISK_ERR);
;;;2714   #if _FS_MINIMIZE <= 2
;;;2715   #if _FS_TINY
;;;2716   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2717   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2718   					fp->fs->wflag = 0;
;;;2719   				}
;;;2720   #else
;;;2721   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2722   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2723   					fp->flag &= ~FA__DIRTY;
;;;2724   				}
;;;2725   #endif
;;;2726   #endif
;;;2727   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2728   				continue;
;;;2729   			}
;;;2730   #if _FS_TINY
;;;2731   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2732   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2733   				fp->fs->winsect = sect;
;;;2734   			}
;;;2735   #else
;;;2736   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2737   				if (fp->fptr < fp->fsize &&
;;;2738   					disk_read(fp->fs->drv, fp->buf, sect, 1))
;;;2739   						ABORT(fp->fs, FR_DISK_ERR);
;;;2740   			}
;;;2741   #endif
;;;2742   			fp->dsect = sect;
;;;2743   		}
;;;2744   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2745   		if (wcnt > btw) wcnt = btw;
;;;2746   #if _FS_TINY
;;;2747   		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
;;;2748   			ABORT(fp->fs, FR_DISK_ERR);
;;;2749   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2750   		fp->fs->wflag = 1;
;;;2751   #else
;;;2752   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2753   		fp->flag |= FA__DIRTY;
;;;2754   #endif
;;;2755   	}
;;;2756   
;;;2757   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2758   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2759   
;;;2760   	LEAVE_FF(fp->fs, FR_OK);
;;;2761   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L39.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2667
00002c  b108              CBZ      r0,|L39.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2668
000030  e7f8              B        |L39.36|
                  |L39.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2669
000034  f0100f02          TST      r0,#2                 ;2669
000038  d101              BNE      |L39.62|
00003a  2007              MOVS     r0,#7                 ;2670
00003c  e7f2              B        |L39.36|
                  |L39.62|
00003e  68a0              LDR      r0,[r4,#8]            ;2671
000040  4428              ADD      r0,r0,r5              ;2671
000042  68a1              LDR      r1,[r4,#8]            ;2671
000044  4288              CMP      r0,r1                 ;2671
000046  d200              BCS      |L39.74|
000048  2500              MOVS     r5,#0                 ;2671
                  |L39.74|
00004a  e0c1              B        |L39.464|
                  |L39.76|
00004c  8920              LDRH     r0,[r4,#8]            ;2675
00004e  05c0              LSLS     r0,r0,#23             ;2675
000050  0dc0              LSRS     r0,r0,#23             ;2675
000052  d16f              BNE      |L39.308|
000054  6820              LDR      r0,[r4,#0]            ;2676
000056  7880              LDRB     r0,[r0,#2]            ;2676
000058  1e40              SUBS     r0,r0,#1              ;2676
00005a  68a1              LDR      r1,[r4,#8]            ;2676
00005c  ea002051          AND      r0,r0,r1,LSR #9       ;2676
000060  f0000aff          AND      r10,r0,#0xff          ;2676
000064  f1ba0f00          CMP      r10,#0                ;2677
000068  d12c              BNE      |L39.196|
00006a  68a0              LDR      r0,[r4,#8]            ;2678
00006c  b958              CBNZ     r0,|L39.134|
00006e  f8d48010          LDR      r8,[r4,#0x10]         ;2679
000072  f1b80f00          CMP      r8,#0                 ;2680
000076  d113              BNE      |L39.160|
000078  2100              MOVS     r1,#0                 ;2681
00007a  6820              LDR      r0,[r4,#0]            ;2681
00007c  f7fffffe          BL       create_chain
000080  4680              MOV      r8,r0                 ;2681
000082  6120              STR      r0,[r4,#0x10]         ;2681
000084  e00c              B        |L39.160|
                  |L39.134|
000086  6a60              LDR      r0,[r4,#0x24]         ;2684
000088  b128              CBZ      r0,|L39.150|
00008a  4620              MOV      r0,r4                 ;2685
00008c  68a1              LDR      r1,[r4,#8]            ;2685
00008e  f7fffffe          BL       clmt_clust
000092  4680              MOV      r8,r0                 ;2685
000094  e004              B        |L39.160|
                  |L39.150|
000096  6961              LDR      r1,[r4,#0x14]         ;2688
000098  6820              LDR      r0,[r4,#0]            ;2688
00009a  f7fffffe          BL       create_chain
00009e  4680              MOV      r8,r0                 ;2688
                  |L39.160|
0000a0  f1b80f00          CMP      r8,#0                 ;2690
0000a4  d100              BNE      |L39.168|
0000a6  e096              B        |L39.470|
                  |L39.168|
0000a8  f1b80f01          CMP      r8,#1                 ;2691
0000ac  d102              BNE      |L39.180|
0000ae  2002              MOVS     r0,#2                 ;2691
0000b0  71e0              STRB     r0,[r4,#7]            ;2691
0000b2  e7b7              B        |L39.36|
                  |L39.180|
0000b4  f1180001          ADDS     r0,r8,#1              ;2692
0000b8  d102              BNE      |L39.192|
0000ba  2001              MOVS     r0,#1                 ;2692
0000bc  71e0              STRB     r0,[r4,#7]            ;2692
0000be  e7b1              B        |L39.36|
                  |L39.192|
0000c0  f8c48014          STR      r8,[r4,#0x14]         ;2693
                  |L39.196|
0000c4  79a0              LDRB     r0,[r4,#6]            ;2699
0000c6  f0100f40          TST      r0,#0x40              ;2699
0000ca  d00f              BEQ      |L39.236|
0000cc  6821              LDR      r1,[r4,#0]            ;2700
0000ce  7848              LDRB     r0,[r1,#1]            ;2700
0000d0  2301              MOVS     r3,#1                 ;2700
0000d2  f1040128          ADD      r1,r4,#0x28           ;2700
0000d6  69a2              LDR      r2,[r4,#0x18]         ;2700
0000d8  f7fffffe          BL       disk_write
0000dc  b110              CBZ      r0,|L39.228|
0000de  2001              MOVS     r0,#1                 ;2701
0000e0  71e0              STRB     r0,[r4,#7]            ;2701
0000e2  e79f              B        |L39.36|
                  |L39.228|
0000e4  79a0              LDRB     r0,[r4,#6]            ;2702
0000e6  f0200040          BIC      r0,r0,#0x40           ;2702
0000ea  71a0              STRB     r0,[r4,#6]            ;2702
                  |L39.236|
0000ec  6961              LDR      r1,[r4,#0x14]         ;2705
0000ee  6820              LDR      r0,[r4,#0]            ;2705
0000f0  f7fffffe          BL       clust2sect
0000f4  4606              MOV      r6,r0                 ;2705
0000f6  b916              CBNZ     r6,|L39.254|
0000f8  2002              MOVS     r0,#2                 ;2706
0000fa  71e0              STRB     r0,[r4,#7]            ;2706
0000fc  e792              B        |L39.36|
                  |L39.254|
0000fe  4456              ADD      r6,r6,r10             ;2707
000100  ea4f2955          LSR      r9,r5,#9              ;2708
000104  f1b90f00          CMP      r9,#0                 ;2709
000108  d02b              BEQ      |L39.354|
00010a  eb0a0009          ADD      r0,r10,r9             ;2710
00010e  6821              LDR      r1,[r4,#0]            ;2710
000110  7889              LDRB     r1,[r1,#2]            ;2710
000112  4288              CMP      r0,r1                 ;2710
000114  d903              BLS      |L39.286|
000116  6820              LDR      r0,[r4,#0]            ;2711
000118  7880              LDRB     r0,[r0,#2]            ;2711
00011a  eba0090a          SUB      r9,r0,r10             ;2711
                  |L39.286|
00011e  6821              LDR      r1,[r4,#0]            ;2712
000120  7848              LDRB     r0,[r1,#1]            ;2712
000122  464b              MOV      r3,r9                 ;2712
000124  4632              MOV      r2,r6                 ;2712
000126  9901              LDR      r1,[sp,#4]            ;2712
000128  f7fffffe          BL       disk_write
00012c  b118              CBZ      r0,|L39.310|
00012e  2001              MOVS     r0,#1                 ;2713
000130  71e0              STRB     r0,[r4,#7]            ;2713
000132  e777              B        |L39.36|
                  |L39.308|
000134  e029              B        |L39.394|
                  |L39.310|
000136  69a0              LDR      r0,[r4,#0x18]         ;2721
000138  1b80              SUBS     r0,r0,r6              ;2721
00013a  4548              CMP      r0,r9                 ;2721
00013c  d20e              BCS      |L39.348|
00013e  69a0              LDR      r0,[r4,#0x18]         ;2722
000140  1b80              SUBS     r0,r0,r6              ;2722
000142  9a01              LDR      r2,[sp,#4]            ;2722
000144  eb022140          ADD      r1,r2,r0,LSL #9       ;2722
000148  f44f7200          MOV      r2,#0x200             ;2722
00014c  f1040028          ADD      r0,r4,#0x28           ;2722
000150  f7fffffe          BL       mem_cpy
000154  79a0              LDRB     r0,[r4,#6]            ;2723
000156  f0200040          BIC      r0,r0,#0x40           ;2723
00015a  71a0              STRB     r0,[r4,#6]            ;2723
                  |L39.348|
00015c  ea4f2749          LSL      r7,r9,#9              ;2727
000160  e02a              B        |L39.440|
                  |L39.354|
000162  69a0              LDR      r0,[r4,#0x18]         ;2736
000164  42b0              CMP      r0,r6                 ;2736
000166  d00f              BEQ      |L39.392|
000168  e9d40102          LDRD     r0,r1,[r4,#8]         ;2737
00016c  4288              CMP      r0,r1                 ;2737
00016e  d20b              BCS      |L39.392|
000170  6821              LDR      r1,[r4,#0]            ;2738
000172  7848              LDRB     r0,[r1,#1]            ;2738
000174  2301              MOVS     r3,#1                 ;2738
000176  4632              MOV      r2,r6                 ;2738
000178  f1040128          ADD      r1,r4,#0x28           ;2738
00017c  f7fffffe          BL       disk_read
000180  b110              CBZ      r0,|L39.392|
000182  2001              MOVS     r0,#1                 ;2739
000184  71e0              STRB     r0,[r4,#7]            ;2739
000186  e74d              B        |L39.36|
                  |L39.392|
000188  61a6              STR      r6,[r4,#0x18]         ;2742
                  |L39.394|
00018a  8920              LDRH     r0,[r4,#8]            ;2744
00018c  f3c00008          UBFX     r0,r0,#0,#9           ;2744
000190  f5c07700          RSB      r7,r0,#0x200          ;2744
000194  42af              CMP      r7,r5                 ;2745
000196  d900              BLS      |L39.410|
000198  462f              MOV      r7,r5                 ;2745
                  |L39.410|
00019a  8921              LDRH     r1,[r4,#8]            ;2752
00019c  f3c10208          UBFX     r2,r1,#0,#9           ;2752
0001a0  f1040128          ADD      r1,r4,#0x28           ;2752
0001a4  1850              ADDS     r0,r2,r1              ;2752
0001a6  463a              MOV      r2,r7                 ;2752
0001a8  9901              LDR      r1,[sp,#4]            ;2752
0001aa  f7fffffe          BL       mem_cpy
0001ae  79a0              LDRB     r0,[r4,#6]            ;2753
0001b0  f0400040          ORR      r0,r0,#0x40           ;2753
0001b4  71a0              STRB     r0,[r4,#6]            ;2753
0001b6  bf00              NOP                            ;2728
                  |L39.440|
0001b8  9801              LDR      r0,[sp,#4]            ;2674
0001ba  4438              ADD      r0,r0,r7              ;2674
0001bc  9001              STR      r0,[sp,#4]            ;2674
0001be  68a0              LDR      r0,[r4,#8]            ;2674
0001c0  4438              ADD      r0,r0,r7              ;2674
0001c2  60a0              STR      r0,[r4,#8]            ;2674
0001c4  f8db0000          LDR      r0,[r11,#0]           ;2674
0001c8  4438              ADD      r0,r0,r7              ;2674
0001ca  f8cb0000          STR      r0,[r11,#0]           ;2674
0001ce  1bed              SUBS     r5,r5,r7              ;2674
                  |L39.464|
0001d0  2d00              CMP      r5,#0                 ;2673
0001d2  f47faf3b          BNE      |L39.76|
                  |L39.470|
0001d6  bf00              NOP                            ;2690
0001d8  e9d40102          LDRD     r0,r1,[r4,#8]         ;2757
0001dc  4288              CMP      r0,r1                 ;2757
0001de  d901              BLS      |L39.484|
0001e0  68a0              LDR      r0,[r4,#8]            ;2757
0001e2  60e0              STR      r0,[r4,#0xc]          ;2757
                  |L39.484|
0001e4  79a0              LDRB     r0,[r4,#6]            ;2758
0001e6  f0400020          ORR      r0,r0,#0x20           ;2758
0001ea  71a0              STRB     r0,[r4,#6]            ;2758
0001ec  2000              MOVS     r0,#0                 ;2760
0001ee  e719              B        |L39.36|
;;;2762   
                          ENDP


                          AREA ||i.find_volume||, CODE, READONLY, ALIGN=2

                  find_volume PROC
;;;2161   static
;;;2162   FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2163   	FATFS** rfs,		/* Pointer to pointer to the found file system object */
;;;2164   	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
;;;2165   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2166   )
;;;2167   {
000004  b088              SUB      sp,sp,#0x20
;;;2168   	BYTE fmt;
;;;2169   	int vol;
;;;2170   	DSTATUS stat;
;;;2171   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;2172   	WORD nrsv;
;;;2173   	FATFS *fs;
;;;2174   
;;;2175   
;;;2176   	/* Get logical drive number from the path name */
;;;2177   	*rfs = 0;
000006  2100              MOVS     r1,#0
000008  9808              LDR      r0,[sp,#0x20]
00000a  6001              STR      r1,[r0,#0]
;;;2178   	vol = get_ldnumber(path);
00000c  9809              LDR      r0,[sp,#0x24]
00000e  f7fffffe          BL       get_ldnumber
000012  9007              STR      r0,[sp,#0x1c]
;;;2179   	if (vol < 0) return FR_INVALID_DRIVE;
000014  9807              LDR      r0,[sp,#0x1c]
000016  2800              CMP      r0,#0
000018  da03              BGE      |L40.34|
00001a  200b              MOVS     r0,#0xb
                  |L40.28|
;;;2180   
;;;2181   	/* Check if the file system object is valid or not */
;;;2182   	fs = FatFs[vol];					/* Get pointer to the file system object */
;;;2183   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2184   
;;;2185   	ENTER_FF(fs);						/* Lock the volume */
;;;2186   	*rfs = fs;							/* Return pointer to the file system object */
;;;2187   
;;;2188   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2189   		stat = disk_status(fs->drv);
;;;2190   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
;;;2191   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2192   				return FR_WRITE_PROTECTED;
;;;2193   			return FR_OK;				/* The file system object is valid */
;;;2194   		}
;;;2195   	}
;;;2196   
;;;2197   	/* The file system object is not valid. */
;;;2198   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2199   
;;;2200   	fs->fs_type = 0;					/* Clear the file system object */
;;;2201   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2202   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2203   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2204   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2205   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2206   		return FR_WRITE_PROTECTED;
;;;2207   #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
;;;2208   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2209   		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
;;;2210   #endif
;;;2211   	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
;;;2212   	bsect = 0;
;;;2213   	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
;;;2214   	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
;;;2215   		UINT i;
;;;2216   		DWORD br[4];
;;;2217   
;;;2218   		for (i = 0; i < 4; i++) {			/* Get partition offset */
;;;2219   			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
;;;2220   			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
;;;2221   		}
;;;2222   		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
;;;2223   		if (i) i--;
;;;2224   		do {								/* Find an FAT volume */
;;;2225   			bsect = br[i];
;;;2226   			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
;;;2227   		} while (!LD2PT(vol) && fmt && ++i < 4);
;;;2228   	}
;;;2229   	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
;;;2230   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2231   
;;;2232   	/* An FAT volume is found. Following code initializes the file system object */
;;;2233   
;;;2234   	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2235   		return FR_NO_FILESYSTEM;
;;;2236   
;;;2237   	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;2238   	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;2239   	fs->fsize = fasize;
;;;2240   
;;;2241   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;2242   	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
;;;2243   		return FR_NO_FILESYSTEM;
;;;2244   	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
;;;2245   
;;;2246   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;2247   	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
;;;2248   		return FR_NO_FILESYSTEM;
;;;2249   
;;;2250   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;2251   	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
;;;2252   		return FR_NO_FILESYSTEM;
;;;2253   
;;;2254   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;2255   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;2256   
;;;2257   	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
;;;2258   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
;;;2259   
;;;2260   	/* Determine the FAT sub type */
;;;2261   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
;;;2262   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2263   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2264   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2265   	fmt = FS_FAT12;
;;;2266   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2267   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2268   
;;;2269   	/* Boundaries and Limits */
;;;2270   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2271   	fs->volbase = bsect;								/* Volume start sector */
;;;2272   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2273   	fs->database = bsect + sysect;						/* Data start sector */
;;;2274   	if (fmt == FS_FAT32) {
;;;2275   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2276   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;2277   		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
;;;2278   	} else {
;;;2279   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2280   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2281   		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
;;;2282   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2283   	}
;;;2284   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
;;;2285   		return FR_NO_FILESYSTEM;
;;;2286   
;;;2287   #if !_FS_READONLY
;;;2288   	/* Initialize cluster allocation information */
;;;2289   	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
;;;2290   
;;;2291   	/* Get fsinfo if available */
;;;2292   	fs->fsi_flag = 0x80;
;;;2293   #if (_FS_NOFSINFO & 3) != 3
;;;2294   	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
;;;2295   		&& LD_WORD(fs->win+BPB_FSInfo) == 1
;;;2296   		&& move_window(fs, bsect + 1) == FR_OK)
;;;2297   	{
;;;2298   		fs->fsi_flag = 0;
;;;2299   		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
;;;2300   			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
;;;2301   			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
;;;2302   		{
;;;2303   #if (_FS_NOFSINFO & 1) == 0
;;;2304   			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;2305   #endif
;;;2306   #if (_FS_NOFSINFO & 2) == 0
;;;2307   			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;2308   #endif
;;;2309   		}
;;;2310   	}
;;;2311   #endif
;;;2312   #endif
;;;2313   	fs->fs_type = fmt;	/* FAT sub-type */
;;;2314   	fs->id = ++Fsid;	/* File system mount ID */
;;;2315   #if _FS_RPATH
;;;2316   	fs->cdir = 0;		/* Set current directory to root */
;;;2317   #endif
;;;2318   #if _FS_LOCK			/* Clear file lock semaphores */
;;;2319   	clear_lock(fs);
;;;2320   #endif
;;;2321   
;;;2322   	return FR_OK;
;;;2323   }
00001c  b00b              ADD      sp,sp,#0x2c
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L40.34|
000022  49d5              LDR      r1,|L40.888|
000024  9807              LDR      r0,[sp,#0x1c]         ;2182
000026  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2182
00002a  b90c              CBNZ     r4,|L40.48|
00002c  200c              MOVS     r0,#0xc               ;2183
00002e  e7f5              B        |L40.28|
                  |L40.48|
000030  9808              LDR      r0,[sp,#0x20]         ;2186
000032  6004              STR      r4,[r0,#0]            ;2186
000034  7820              LDRB     r0,[r4,#0]            ;2188
000036  b178              CBZ      r0,|L40.88|
000038  7860              LDRB     r0,[r4,#1]            ;2189
00003a  f7fffffe          BL       disk_status
00003e  4680              MOV      r8,r0                 ;2189
000040  f0180f01          TST      r8,#1                 ;2190
000044  d108              BNE      |L40.88|
000046  980a              LDR      r0,[sp,#0x28]         ;2191
000048  b120              CBZ      r0,|L40.84|
00004a  f0180f04          TST      r8,#4                 ;2191
00004e  d001              BEQ      |L40.84|
000050  200a              MOVS     r0,#0xa               ;2192
000052  e7e3              B        |L40.28|
                  |L40.84|
000054  2000              MOVS     r0,#0                 ;2193
000056  e7e1              B        |L40.28|
                  |L40.88|
000058  2000              MOVS     r0,#0                 ;2200
00005a  7020              STRB     r0,[r4,#0]            ;2200
00005c  9807              LDR      r0,[sp,#0x1c]         ;2201
00005e  7060              STRB     r0,[r4,#1]            ;2201
000060  7860              LDRB     r0,[r4,#1]            ;2202
000062  f7fffffe          BL       disk_initialize
000066  4680              MOV      r8,r0                 ;2202
000068  f0180f01          TST      r8,#1                 ;2203
00006c  d001              BEQ      |L40.114|
00006e  2003              MOVS     r0,#3                 ;2204
000070  e7d4              B        |L40.28|
                  |L40.114|
000072  980a              LDR      r0,[sp,#0x28]         ;2205
000074  b120              CBZ      r0,|L40.128|
000076  f0180f04          TST      r8,#4                 ;2205
00007a  d001              BEQ      |L40.128|
00007c  200a              MOVS     r0,#0xa               ;2206
00007e  e7cd              B        |L40.28|
                  |L40.128|
000080  2700              MOVS     r7,#0                 ;2212
000082  4639              MOV      r1,r7                 ;2213
000084  4620              MOV      r0,r4                 ;2213
000086  f7fffffe          BL       check_fs
00008a  4605              MOV      r5,r0                 ;2213
00008c  2d01              CMP      r5,#1                 ;2214
00008e  d001              BEQ      |L40.148|
000090  bb6d              CBNZ     r5,|L40.238|
000092  e02c              B        |L40.238|
                  |L40.148|
000094  2600              MOVS     r6,#0                 ;2218
000096  e014              B        |L40.194|
                  |L40.152|
000098  f50471f7          ADD      r1,r4,#0x1ee          ;2219
00009c  eb011006          ADD      r0,r1,r6,LSL #4       ;2219
0000a0  7901              LDRB     r1,[r0,#4]            ;2220
0000a2  b151              CBZ      r1,|L40.186|
0000a4  7ac1              LDRB     r1,[r0,#0xb]          ;2220
0000a6  060a              LSLS     r2,r1,#24             ;2220
0000a8  7a81              LDRB     r1,[r0,#0xa]          ;2220
0000aa  ea424201          ORR      r2,r2,r1,LSL #16      ;2220
0000ae  7a41              LDRB     r1,[r0,#9]            ;2220
0000b0  ea422101          ORR      r1,r2,r1,LSL #8       ;2220
0000b4  7a02              LDRB     r2,[r0,#8]            ;2220
0000b6  4311              ORRS     r1,r1,r2              ;2220
0000b8  e000              B        |L40.188|
                  |L40.186|
0000ba  2100              MOVS     r1,#0                 ;2220
                  |L40.188|
0000bc  f84d1026          STR      r1,[sp,r6,LSL #2]     ;2220
0000c0  1c76              ADDS     r6,r6,#1              ;2218
                  |L40.194|
0000c2  2e04              CMP      r6,#4                 ;2218
0000c4  d3e8              BCC      |L40.152|
0000c6  2600              MOVS     r6,#0                 ;2222
0000c8  b106              CBZ      r6,|L40.204|
0000ca  1e76              SUBS     r6,r6,#1              ;2223
                  |L40.204|
0000cc  bf00              NOP                            ;2224
                  |L40.206|
0000ce  f85d7026          LDR      r7,[sp,r6,LSL #2]     ;2225
0000d2  b127              CBZ      r7,|L40.222|
0000d4  4639              MOV      r1,r7                 ;2226
0000d6  4620              MOV      r0,r4                 ;2226
0000d8  f7fffffe          BL       check_fs
0000dc  e000              B        |L40.224|
                  |L40.222|
0000de  2002              MOVS     r0,#2                 ;2226
                  |L40.224|
0000e0  4605              MOV      r5,r0                 ;2226
0000e2  b11d              CBZ      r5,|L40.236|
0000e4  1c70              ADDS     r0,r6,#1              ;2227
0000e6  4606              MOV      r6,r0                 ;2227
0000e8  2804              CMP      r0,#4                 ;2227
0000ea  d3f0              BCC      |L40.206|
                  |L40.236|
0000ec  bf00              NOP                            ;2228
                  |L40.238|
0000ee  2d03              CMP      r5,#3                 ;2229
0000f0  d101              BNE      |L40.246|
0000f2  2001              MOVS     r0,#1                 ;2229
0000f4  e792              B        |L40.28|
                  |L40.246|
0000f6  b10d              CBZ      r5,|L40.252|
0000f8  200d              MOVS     r0,#0xd               ;2230
0000fa  e78f              B        |L40.28|
                  |L40.252|
0000fc  203b              MOVS     r0,#0x3b              ;2234
0000fe  5d01              LDRB     r1,[r0,r4]            ;2234
000100  f894003c          LDRB     r0,[r4,#0x3c]         ;2234
000104  ea412000          ORR      r0,r1,r0,LSL #8       ;2234
000108  f5b07f00          CMP      r0,#0x200             ;2234
00010c  d001              BEQ      |L40.274|
00010e  200d              MOVS     r0,#0xd               ;2235
000110  e784              B        |L40.28|
                  |L40.274|
000112  2046              MOVS     r0,#0x46              ;2237
000114  5d01              LDRB     r1,[r0,r4]            ;2237
000116  f8940047          LDRB     r0,[r4,#0x47]         ;2237
00011a  ea412900          ORR      r9,r1,r0,LSL #8       ;2237
00011e  f1b90f00          CMP      r9,#0                 ;2238
000122  d10e              BNE      |L40.322|
000124  f8940057          LDRB     r0,[r4,#0x57]         ;2238
000128  0601              LSLS     r1,r0,#24             ;2238
00012a  f8940056          LDRB     r0,[r4,#0x56]         ;2238
00012e  ea414100          ORR      r1,r1,r0,LSL #16      ;2238
000132  f8940055          LDRB     r0,[r4,#0x55]         ;2238
000136  ea412000          ORR      r0,r1,r0,LSL #8       ;2238
00013a  f8941054          LDRB     r1,[r4,#0x54]         ;2238
00013e  ea400901          ORR      r9,r0,r1              ;2238
                  |L40.322|
000142  f8c49018          STR      r9,[r4,#0x18]         ;2239
000146  2040              MOVS     r0,#0x40              ;2241
000148  5d00              LDRB     r0,[r0,r4]            ;2241
00014a  70e0              STRB     r0,[r4,#3]            ;2241
00014c  78e0              LDRB     r0,[r4,#3]            ;2242
00014e  2801              CMP      r0,#1                 ;2242
000150  d004              BEQ      |L40.348|
000152  78e0              LDRB     r0,[r4,#3]            ;2242
000154  2802              CMP      r0,#2                 ;2242
000156  d001              BEQ      |L40.348|
000158  200d              MOVS     r0,#0xd               ;2243
00015a  e75f              B        |L40.28|
                  |L40.348|
00015c  78e0              LDRB     r0,[r4,#3]            ;2244
00015e  fb09f900          MUL      r9,r9,r0              ;2244
000162  203d              MOVS     r0,#0x3d              ;2246
000164  5d00              LDRB     r0,[r0,r4]            ;2246
000166  70a0              STRB     r0,[r4,#2]            ;2246
000168  78a0              LDRB     r0,[r4,#2]            ;2247
00016a  b118              CBZ      r0,|L40.372|
00016c  78a0              LDRB     r0,[r4,#2]            ;2247
00016e  1e41              SUBS     r1,r0,#1              ;2247
000170  4208              TST      r0,r1                 ;2247
000172  d001              BEQ      |L40.376|
                  |L40.372|
000174  200d              MOVS     r0,#0xd               ;2248
000176  e751              B        |L40.28|
                  |L40.376|
000178  2041              MOVS     r0,#0x41              ;2250
00017a  5d01              LDRB     r1,[r0,r4]            ;2250
00017c  f8940042          LDRB     r0,[r4,#0x42]         ;2250
000180  ea412000          ORR      r0,r1,r0,LSL #8       ;2250
000184  8120              STRH     r0,[r4,#8]            ;2250
000186  7a20              LDRB     r0,[r4,#8]            ;2251
000188  f0100f0f          TST      r0,#0xf               ;2251
00018c  d001              BEQ      |L40.402|
00018e  200d              MOVS     r0,#0xd               ;2252
000190  e744              B        |L40.28|
                  |L40.402|
000192  2043              MOVS     r0,#0x43              ;2254
000194  5d01              LDRB     r1,[r0,r4]            ;2254
000196  f8940044          LDRB     r0,[r4,#0x44]         ;2254
00019a  ea412b00          ORR      r11,r1,r0,LSL #8      ;2254
00019e  f1bb0f00          CMP      r11,#0                ;2255
0001a2  d10e              BNE      |L40.450|
0001a4  f8940053          LDRB     r0,[r4,#0x53]         ;2255
0001a8  0601              LSLS     r1,r0,#24             ;2255
0001aa  f8940052          LDRB     r0,[r4,#0x52]         ;2255
0001ae  ea414100          ORR      r1,r1,r0,LSL #16      ;2255
0001b2  f8940051          LDRB     r0,[r4,#0x51]         ;2255
0001b6  ea412000          ORR      r0,r1,r0,LSL #8       ;2255
0001ba  f8941050          LDRB     r1,[r4,#0x50]         ;2255
0001be  ea400b01          ORR      r11,r0,r1             ;2255
                  |L40.450|
0001c2  203e              MOVS     r0,#0x3e              ;2257
0001c4  5d01              LDRB     r1,[r0,r4]            ;2257
0001c6  f894003f          LDRB     r0,[r4,#0x3f]         ;2257
0001ca  ea412000          ORR      r0,r1,r0,LSL #8       ;2257
0001ce  9004              STR      r0,[sp,#0x10]         ;2257
0001d0  9804              LDR      r0,[sp,#0x10]         ;2258
0001d2  b908              CBNZ     r0,|L40.472|
0001d4  200d              MOVS     r0,#0xd               ;2258
0001d6  e721              B        |L40.28|
                  |L40.472|
0001d8  9804              LDR      r0,[sp,#0x10]         ;2261
0001da  4448              ADD      r0,r0,r9              ;2261
0001dc  8921              LDRH     r1,[r4,#8]            ;2261
0001de  eb001011          ADD      r0,r0,r1,LSR #4       ;2261
0001e2  9006              STR      r0,[sp,#0x18]         ;2261
0001e4  9806              LDR      r0,[sp,#0x18]         ;2262
0001e6  4583              CMP      r11,r0                ;2262
0001e8  d201              BCS      |L40.494|
0001ea  200d              MOVS     r0,#0xd               ;2262
0001ec  e716              B        |L40.28|
                  |L40.494|
0001ee  9806              LDR      r0,[sp,#0x18]         ;2263
0001f0  ebab0000          SUB      r0,r11,r0             ;2263
0001f4  78a1              LDRB     r1,[r4,#2]            ;2263
0001f6  fbb0faf1          UDIV     r10,r0,r1             ;2263
0001fa  f1ba0f00          CMP      r10,#0                ;2264
0001fe  d101              BNE      |L40.516|
000200  200d              MOVS     r0,#0xd               ;2264
000202  e70b              B        |L40.28|
                  |L40.516|
000204  2501              MOVS     r5,#1                 ;2265
000206  f64070f6          MOV      r0,#0xff6             ;2266
00020a  4582              CMP      r10,r0                ;2266
00020c  d300              BCC      |L40.528|
00020e  2502              MOVS     r5,#2                 ;2266
                  |L40.528|
000210  f64f70f6          MOV      r0,#0xfff6            ;2267
000214  4582              CMP      r10,r0                ;2267
000216  d300              BCC      |L40.538|
000218  2503              MOVS     r5,#3                 ;2267
                  |L40.538|
00021a  f10a0002          ADD      r0,r10,#2             ;2270
00021e  6160              STR      r0,[r4,#0x14]         ;2270
000220  61e7              STR      r7,[r4,#0x1c]         ;2271
000222  9804              LDR      r0,[sp,#0x10]         ;2272
000224  4438              ADD      r0,r0,r7              ;2272
000226  6220              STR      r0,[r4,#0x20]         ;2272
000228  9806              LDR      r0,[sp,#0x18]         ;2273
00022a  4438              ADD      r0,r0,r7              ;2273
00022c  62a0              STR      r0,[r4,#0x28]         ;2273
00022e  2d03              CMP      r5,#3                 ;2274
000230  d116              BNE      |L40.608|
000232  8920              LDRH     r0,[r4,#8]            ;2275
000234  b108              CBZ      r0,|L40.570|
000236  200d              MOVS     r0,#0xd               ;2275
000238  e6f0              B        |L40.28|
                  |L40.570|
00023a  f894005f          LDRB     r0,[r4,#0x5f]         ;2276
00023e  0601              LSLS     r1,r0,#24             ;2276
000240  f894005e          LDRB     r0,[r4,#0x5e]         ;2276
000244  ea414100          ORR      r1,r1,r0,LSL #16      ;2276
000248  f894005d          LDRB     r0,[r4,#0x5d]         ;2276
00024c  ea412000          ORR      r0,r1,r0,LSL #8       ;2276
000250  f894105c          LDRB     r1,[r4,#0x5c]         ;2276
000254  4308              ORRS     r0,r0,r1              ;2276
000256  6260              STR      r0,[r4,#0x24]         ;2276
000258  6960              LDR      r0,[r4,#0x14]         ;2277
00025a  0080              LSLS     r0,r0,#2              ;2277
00025c  9005              STR      r0,[sp,#0x14]         ;2277
00025e  e014              B        |L40.650|
                  |L40.608|
000260  8920              LDRH     r0,[r4,#8]            ;2279
000262  b908              CBNZ     r0,|L40.616|
000264  200d              MOVS     r0,#0xd               ;2279
000266  e6d9              B        |L40.28|
                  |L40.616|
000268  6a20              LDR      r0,[r4,#0x20]         ;2280
00026a  4448              ADD      r0,r0,r9              ;2280
00026c  6260              STR      r0,[r4,#0x24]         ;2280
00026e  2d02              CMP      r5,#2                 ;2281
000270  d102              BNE      |L40.632|
000272  6960              LDR      r0,[r4,#0x14]         ;2282
000274  0040              LSLS     r0,r0,#1              ;2282
000276  e007              B        |L40.648|
                  |L40.632|
000278  7d20              LDRB     r0,[r4,#0x14]         ;2282
00027a  f0000001          AND      r0,r0,#1              ;2282
00027e  6961              LDR      r1,[r4,#0x14]         ;2282
000280  eb010141          ADD      r1,r1,r1,LSL #1       ;2282
000284  eb000051          ADD      r0,r0,r1,LSR #1       ;2282
                  |L40.648|
000288  9005              STR      r0,[sp,#0x14]         ;2282
                  |L40.650|
00028a  69a1              LDR      r1,[r4,#0x18]         ;2284
00028c  9805              LDR      r0,[sp,#0x14]         ;2284
00028e  f20010ff          ADD      r0,r0,#0x1ff          ;2284
000292  ebb12f50          CMP      r1,r0,LSR #9          ;2284
000296  d201              BCS      |L40.668|
000298  200d              MOVS     r0,#0xd               ;2285
00029a  e6bf              B        |L40.28|
                  |L40.668|
00029c  f04f30ff          MOV      r0,#0xffffffff        ;2289
0002a0  6120              STR      r0,[r4,#0x10]         ;2289
0002a2  60e0              STR      r0,[r4,#0xc]          ;2289
0002a4  2080              MOVS     r0,#0x80              ;2292
0002a6  7160              STRB     r0,[r4,#5]            ;2292
0002a8  2d03              CMP      r5,#3                 ;2294
0002aa  d15a              BNE      |L40.866|
0002ac  f8941060          LDRB     r1,[r4,#0x60]         ;2295
0002b0  f8940061          LDRB     r0,[r4,#0x61]         ;2295
0002b4  ea412000          ORR      r0,r1,r0,LSL #8       ;2295
0002b8  2801              CMP      r0,#1                 ;2295
0002ba  d152              BNE      |L40.866|
0002bc  1c79              ADDS     r1,r7,#1              ;2296
0002be  4620              MOV      r0,r4                 ;2296
0002c0  f7fffffe          BL       move_window
0002c4  bbe8              CBNZ     r0,|L40.834|
0002c6  2000              MOVS     r0,#0                 ;2298
0002c8  7160              STRB     r0,[r4,#5]            ;2298
0002ca  f894122e          LDRB     r1,[r4,#0x22e]        ;2299
0002ce  f894022f          LDRB     r0,[r4,#0x22f]        ;2299
0002d2  ea412000          ORR      r0,r1,r0,LSL #8       ;2299
0002d6  f5a0412a          SUB      r1,r0,#0xaa00         ;2299
0002da  3955              SUBS     r1,r1,#0x55           ;2299
0002dc  d141              BNE      |L40.866|
0002de  2033              MOVS     r0,#0x33              ;2300
0002e0  5d00              LDRB     r0,[r0,r4]            ;2300
0002e2  0601              LSLS     r1,r0,#24             ;2300
0002e4  2032              MOVS     r0,#0x32              ;2300
0002e6  5d00              LDRB     r0,[r0,r4]            ;2300
0002e8  ea414100          ORR      r1,r1,r0,LSL #16      ;2300
0002ec  2031              MOVS     r0,#0x31              ;2300
0002ee  5d00              LDRB     r0,[r0,r4]            ;2300
0002f0  ea412000          ORR      r0,r1,r0,LSL #8       ;2300
0002f4  f8941030          LDRB     r1,[r4,#0x30]         ;2300
0002f8  4308              ORRS     r0,r0,r1              ;2300
0002fa  4920              LDR      r1,|L40.892|
0002fc  4288              CMP      r0,r1                 ;2300
0002fe  d130              BNE      |L40.866|
000300  f8940217          LDRB     r0,[r4,#0x217]        ;2301
000304  0601              LSLS     r1,r0,#24             ;2301
000306  f8940216          LDRB     r0,[r4,#0x216]        ;2301
00030a  ea414100          ORR      r1,r1,r0,LSL #16      ;2301
00030e  f8940215          LDRB     r0,[r4,#0x215]        ;2301
000312  ea412000          ORR      r0,r1,r0,LSL #8       ;2301
000316  f8941214          LDRB     r1,[r4,#0x214]        ;2301
00031a  4308              ORRS     r0,r0,r1              ;2301
00031c  4918              LDR      r1,|L40.896|
00031e  4288              CMP      r0,r1                 ;2301
000320  d11f              BNE      |L40.866|
000322  f894021b          LDRB     r0,[r4,#0x21b]        ;2304
000326  0601              LSLS     r1,r0,#24             ;2304
000328  f894021a          LDRB     r0,[r4,#0x21a]        ;2304
00032c  ea414100          ORR      r1,r1,r0,LSL #16      ;2304
000330  f8940219          LDRB     r0,[r4,#0x219]        ;2304
000334  ea412000          ORR      r0,r1,r0,LSL #8       ;2304
000338  f8941218          LDRB     r1,[r4,#0x218]        ;2304
00033c  4308              ORRS     r0,r0,r1              ;2304
00033e  6120              STR      r0,[r4,#0x10]         ;2304
000340  e000              B        |L40.836|
                  |L40.834|
000342  e00e              B        |L40.866|
                  |L40.836|
000344  f894021f          LDRB     r0,[r4,#0x21f]        ;2307
000348  0601              LSLS     r1,r0,#24             ;2307
00034a  f894021e          LDRB     r0,[r4,#0x21e]        ;2307
00034e  ea414100          ORR      r1,r1,r0,LSL #16      ;2307
000352  f894021d          LDRB     r0,[r4,#0x21d]        ;2307
000356  ea412000          ORR      r0,r1,r0,LSL #8       ;2307
00035a  f894121c          LDRB     r1,[r4,#0x21c]        ;2307
00035e  4308              ORRS     r0,r0,r1              ;2307
000360  60e0              STR      r0,[r4,#0xc]          ;2307
                  |L40.866|
000362  7025              STRB     r5,[r4,#0]            ;2313
000364  4807              LDR      r0,|L40.900|
000366  8800              LDRH     r0,[r0,#0]            ;2314  ; Fsid
000368  1c40              ADDS     r0,r0,#1              ;2314
00036a  b280              UXTH     r0,r0                 ;2314
00036c  4905              LDR      r1,|L40.900|
00036e  8008              STRH     r0,[r1,#0]            ;2314
000370  80e0              STRH     r0,[r4,#6]            ;2314
000372  2000              MOVS     r0,#0                 ;2322
000374  e652              B        |L40.28|
;;;2324   
                          ENDP

000376  0000              DCW      0x0000
                  |L40.888|
                          DCD      FatFs
                  |L40.892|
                          DCD      0x41615252
                  |L40.896|
                          DCD      0x61417272
                  |L40.900|
                          DCD      Fsid

                          AREA ||i.fit_lfn||, CODE, READONLY, ALIGN=2

                  fit_lfn PROC
;;;1370   static
;;;1371   void fit_lfn (
000000  b5f0              PUSH     {r4-r7,lr}
;;;1372   	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
;;;1373   	BYTE* dir,				/* Pointer to the directory entry */
;;;1374   	BYTE ord,				/* LFN order (1-20) */
;;;1375   	BYTE sum				/* SFN sum */
;;;1376   )
;;;1377   {
000002  4604              MOV      r4,r0
000004  461d              MOV      r5,r3
;;;1378   	UINT i, s;
;;;1379   	WCHAR wc;
;;;1380   
;;;1381   
;;;1382   	dir[LDIR_Chksum] = sum;			/* Set check sum */
000006  734d              STRB     r5,[r1,#0xd]
;;;1383   	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
000008  270f              MOVS     r7,#0xf
00000a  72cf              STRB     r7,[r1,#0xb]
;;;1384   	dir[LDIR_Type] = 0;
00000c  2700              MOVS     r7,#0
00000e  730f              STRB     r7,[r1,#0xc]
;;;1385   	ST_WORD(dir+LDIR_FstClusLO, 0);
000010  768f              STRB     r7,[r1,#0x1a]
000012  46bc              MOV      r12,r7
000014  f881c01b          STRB     r12,[r1,#0x1b]
;;;1386   
;;;1387   	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
000018  1e57              SUBS     r7,r2,#1
00001a  eb070c87          ADD      r12,r7,r7,LSL #2
00001e  eb0c06c7          ADD      r6,r12,r7,LSL #3
;;;1388   	s = wc = 0;
000022  2700              MOVS     r7,#0
000024  4638              MOV      r0,r7
000026  463b              MOV      r3,r7
;;;1389   	do {
000028  bf00              NOP      
                  |L41.42|
;;;1390   		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
00002a  f5a0477f          SUB      r7,r0,#0xff00
00002e  3fff              SUBS     r7,r7,#0xff
000030  d003              BEQ      |L41.58|
000032  4637              MOV      r7,r6
000034  1c76              ADDS     r6,r6,#1
000036  f8340017          LDRH     r0,[r4,r7,LSL #1]
                  |L41.58|
;;;1391   		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
00003a  f8dfc040          LDR      r12,|L41.124|
00003e  f81cc003          LDRB     r12,[r12,r3]
000042  f801000c          STRB     r0,[r1,r12]
000046  1207              ASRS     r7,r0,#8
000048  f8dfc030          LDR      r12,|L41.124|
00004c  f81cc003          LDRB     r12,[r12,r3]
000050  448c              ADD      r12,r12,r1
000052  f88c7001          STRB     r7,[r12,#1]
;;;1392   		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
000056  b908              CBNZ     r0,|L41.92|
000058  f64f70ff          MOV      r0,#0xffff
                  |L41.92|
;;;1393   	} while (++s < 13);
00005c  1c5f              ADDS     r7,r3,#1
00005e  463b              MOV      r3,r7
000060  2f0d              CMP      r7,#0xd
000062  d3e2              BCC      |L41.42|
;;;1394   	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
000064  f5a0477f          SUB      r7,r0,#0xff00
000068  3fff              SUBS     r7,r7,#0xff
00006a  d002              BEQ      |L41.114|
00006c  f8347016          LDRH     r7,[r4,r6,LSL #1]
000070  b90f              CBNZ     r7,|L41.118|
                  |L41.114|
000072  f0420240          ORR      r2,r2,#0x40
                  |L41.118|
;;;1395   	dir[LDIR_Ord] = ord;			/* Set the LFN order */
000076  700a              STRB     r2,[r1,#0]
;;;1396   }
000078  bdf0              POP      {r4-r7,pc}
;;;1397   
                          ENDP

00007a  0000              DCW      0x0000
                  |L41.124|
                          DCD      LfnOfs

                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;2012   static
;;;2013   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;2014   	DIR* dp,			/* Directory object to return last directory and found object */
;;;2015   	const TCHAR* path	/* Full-path string to find a file or directory */
;;;2016   )
;;;2017   {
000004  4604              MOV      r4,r0
;;;2018   	FRESULT res;
;;;2019   	BYTE *dir, ns;
;;;2020   
;;;2021   
;;;2022   #if _FS_RPATH
;;;2023   	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
;;;2024   		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
;;;2025   	} else {								/* No heading separator */
;;;2026   		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
;;;2027   	}
;;;2028   #else
;;;2029   	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
000006  9801              LDR      r0,[sp,#4]
000008  7800              LDRB     r0,[r0,#0]
00000a  282f              CMP      r0,#0x2f
00000c  d003              BEQ      |L42.22|
00000e  9801              LDR      r0,[sp,#4]
000010  7800              LDRB     r0,[r0,#0]
000012  285c              CMP      r0,#0x5c
000014  d102              BNE      |L42.28|
                  |L42.22|
;;;2030   		path++;
000016  9801              LDR      r0,[sp,#4]
000018  1c40              ADDS     r0,r0,#1
00001a  9001              STR      r0,[sp,#4]
                  |L42.28|
;;;2031   	dp->sclust = 0;							/* Always start from the root directory */
00001c  2000              MOVS     r0,#0
00001e  60a0              STR      r0,[r4,#8]
;;;2032   #endif
;;;2033   
;;;2034   	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
000020  9801              LDR      r0,[sp,#4]
000022  7800              LDRB     r0,[r0,#0]
000024  2820              CMP      r0,#0x20
000026  d207              BCS      |L42.56|
;;;2035   		res = dir_sdi(dp, 0);
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dir_sdi
000030  4605              MOV      r5,r0
;;;2036   		dp->dir = 0;
000032  2000              MOVS     r0,#0
000034  6160              STR      r0,[r4,#0x14]
000036  e028              B        |L42.138|
                  |L42.56|
;;;2037   	} else {								/* Follow path */
;;;2038   		for (;;) {
000038  bf00              NOP      
                  |L42.58|
;;;2039   			res = create_name(dp, &path);	/* Get a segment name of the path */
00003a  a901              ADD      r1,sp,#4
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       create_name
000042  4605              MOV      r5,r0
;;;2040   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L42.72|
000046  e01f              B        |L42.136|
                  |L42.72|
;;;2041   			res = dir_find(dp);				/* Find an object with the sagment name */
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dir_find
00004e  4605              MOV      r5,r0
;;;2042   			ns = dp->fn[NS];
000050  69a0              LDR      r0,[r4,#0x18]
000052  7ac6              LDRB     r6,[r0,#0xb]
;;;2043   			if (res != FR_OK) {				/* Failed to find the object */
000054  b13d              CBZ      r5,|L42.102|
;;;2044   				if (res == FR_NO_FILE) {	/* Object is not found */
000056  2d04              CMP      r5,#4
000058  d104              BNE      |L42.100|
;;;2045   					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
00005a  bf00              NOP      
;;;2046   						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
;;;2047   						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
;;;2048   						res = FR_OK;					/* Ended at the root directroy. Function completed. */
;;;2049   					} else {							/* Could not find the object */
;;;2050   						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
00005c  f0160f04          TST      r6,#4
000060  d100              BNE      |L42.100|
000062  2505              MOVS     r5,#5
                  |L42.100|
;;;2051   					}
;;;2052   				}
;;;2053   				break;
000064  e010              B        |L42.136|
                  |L42.102|
;;;2054   			}
;;;2055   			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
000066  f0160f04          TST      r6,#4
00006a  d000              BEQ      |L42.110|
00006c  e00c              B        |L42.136|
                  |L42.110|
;;;2056   			dir = dp->dir;						/* Follow the sub-directory */
00006e  6967              LDR      r7,[r4,#0x14]
;;;2057   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
000070  7af8              LDRB     r0,[r7,#0xb]
000072  f0100f10          TST      r0,#0x10
000076  d101              BNE      |L42.124|
;;;2058   				res = FR_NO_PATH; break;
000078  2505              MOVS     r5,#5
00007a  e005              B        |L42.136|
                  |L42.124|
;;;2059   			}
;;;2060   			dp->sclust = ld_clust(dp->fs, dir);
00007c  4639              MOV      r1,r7
00007e  6820              LDR      r0,[r4,#0]
000080  f7fffffe          BL       ld_clust
000084  60a0              STR      r0,[r4,#8]
000086  e7d8              B        |L42.58|
                  |L42.136|
000088  bf00              NOP                            ;2040
                  |L42.138|
;;;2061   		}
;;;2062   	}
;;;2063   
;;;2064   	return res;
00008a  4628              MOV      r0,r5
;;;2065   }
00008c  e8bd81fc          POP      {r2-r8,pc}
;;;2066   
                          ENDP


                          AREA ||i.gen_numname||, CODE, READONLY, ALIGN=2

                  gen_numname PROC
;;;1408   static
;;;1409   void gen_numname (
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1410   	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
;;;1411   	const BYTE* src,	/* Pointer to SFN */
;;;1412   	const WCHAR* lfn,	/* Pointer to LFN */
;;;1413   	UINT seq			/* Sequence number */
;;;1414   )
;;;1415   {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;1416   	BYTE ns[8], c;
;;;1417   	UINT i, j;
;;;1418   
;;;1419   
;;;1420   	mem_cpy(dst, src, 11);
00000c  220b              MOVS     r2,#0xb
00000e  4651              MOV      r1,r10
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       mem_cpy
;;;1421   
;;;1422   	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
000016  2d05              CMP      r5,#5
000018  d918              BLS      |L43.76|
;;;1423   		WCHAR wc;
;;;1424   		DWORD sr = seq;
00001a  4628              MOV      r0,r5
;;;1425   
;;;1426   		while (*lfn) {	/* Create a CRC */
00001c  e011              B        |L43.66|
                  |L43.30|
;;;1427   			wc = *lfn++;
00001e  f8371b02          LDRH     r1,[r7],#2
;;;1428   			for (i = 0; i < 16; i++) {
000022  2400              MOVS     r4,#0
000024  e00b              B        |L43.62|
                  |L43.38|
;;;1429   				sr = (sr << 1) + (wc & 1);
000026  460a              MOV      r2,r1
000028  f360025f          BFI      r2,r0,#1,#31
00002c  4610              MOV      r0,r2
;;;1430   				wc >>= 1;
00002e  ea4f0161          ASR      r1,r1,#1
;;;1431   				if (sr & 0x10000) sr ^= 0x11021;
000032  f4103f80          TST      r0,#0x10000
000036  d001              BEQ      |L43.60|
000038  4a1d              LDR      r2,|L43.176|
00003a  4050              EORS     r0,r0,r2
                  |L43.60|
00003c  1c64              ADDS     r4,r4,#1              ;1428
                  |L43.62|
00003e  2c10              CMP      r4,#0x10              ;1428
000040  d3f1              BCC      |L43.38|
                  |L43.66|
000042  883a              LDRH     r2,[r7,#0]            ;1426
000044  2a00              CMP      r2,#0                 ;1426
000046  d1ea              BNE      |L43.30|
;;;1432   			}
;;;1433   		}
;;;1434   		seq = (UINT)sr;
000048  4605              MOV      r5,r0
;;;1435   	}
00004a  bf00              NOP      
                  |L43.76|
;;;1436   
;;;1437   	/* itoa (hexdecimal) */
;;;1438   	i = 7;
00004c  2407              MOVS     r4,#7
;;;1439   	do {
00004e  bf00              NOP      
                  |L43.80|
;;;1440   		c = (seq % 16) + '0';
000050  f005000f          AND      r0,r5,#0xf
000054  f1000930          ADD      r9,r0,#0x30
;;;1441   		if (c > '9') c += 7;
000058  f1b90f39          CMP      r9,#0x39
00005c  dd03              BLE      |L43.102|
00005e  f1090007          ADD      r0,r9,#7
000062  f00009ff          AND      r9,r0,#0xff
                  |L43.102|
;;;1442   		ns[i--] = c;
000066  4620              MOV      r0,r4
000068  1e64              SUBS     r4,r4,#1
00006a  f80d9000          STRB     r9,[sp,r0]
;;;1443   		seq /= 16;
00006e  092d              LSRS     r5,r5,#4
;;;1444   	} while (seq);
000070  2d00              CMP      r5,#0
000072  d1ed              BNE      |L43.80|
;;;1445   	ns[i] = '~';
000074  207e              MOVS     r0,#0x7e
000076  f80d0004          STRB     r0,[sp,r4]
;;;1446   
;;;1447   	/* Append the number */
;;;1448   	for (j = 0; j < i && dst[j] != ' '; j++) {
00007a  2600              MOVS     r6,#0
00007c  e000              B        |L43.128|
                  |L43.126|
00007e  1c76              ADDS     r6,r6,#1
                  |L43.128|
000080  42a6              CMP      r6,r4
000082  d203              BCS      |L43.140|
000084  f8180006          LDRB     r0,[r8,r6]
000088  2820              CMP      r0,#0x20
00008a  d1f8              BNE      |L43.126|
                  |L43.140|
;;;1449   		if (IsDBCS1(dst[j])) {
;;;1450   			if (j == i - 1) break;
;;;1451   			j++;
;;;1452   		}
;;;1453   	}
;;;1454   	do {
00008c  bf00              NOP      
                  |L43.142|
;;;1455   		dst[j++] = (i < 8) ? ns[i++] : ' ';
00008e  2c08              CMP      r4,#8
000090  d204              BCS      |L43.156|
000092  4620              MOV      r0,r4
000094  1c64              ADDS     r4,r4,#1
000096  f81d1000          LDRB     r1,[sp,r0]
00009a  e000              B        |L43.158|
                  |L43.156|
00009c  2120              MOVS     r1,#0x20
                  |L43.158|
00009e  4630              MOV      r0,r6
0000a0  1c76              ADDS     r6,r6,#1
0000a2  f8081000          STRB     r1,[r8,r0]
;;;1456   	} while (j < 8);
0000a6  2e08              CMP      r6,#8
0000a8  d3f1              BCC      |L43.142|
;;;1457   }
0000aa  e8bd87fc          POP      {r2-r10,pc}
;;;1458   #endif
                          ENDP

0000ae  0000              DCW      0x0000
                  |L43.176|
                          DCD      0x00011021

                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;862    
;;;863    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;864    	FATFS* fs,	/* File system object */
;;;865    	DWORD clst	/* Cluster# to get the link information */
;;;866    )
;;;867    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;868    	UINT wc, bc;
;;;869    	BYTE *p;
;;;870    
;;;871    
;;;872    	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
000008  2c02              CMP      r4,#2
00000a  d302              BCC      |L44.18|
00000c  6968              LDR      r0,[r5,#0x14]
00000e  42a0              CMP      r0,r4
000010  d802              BHI      |L44.24|
                  |L44.18|
;;;873    		return 1;
000012  2001              MOVS     r0,#1
                  |L44.20|
;;;874    
;;;875    	switch (fs->fs_type) {
;;;876    	case FS_FAT12 :
;;;877    		bc = (UINT)clst; bc += bc / 2;
;;;878    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;879    		wc = fs->win[bc % SS(fs)]; bc++;
;;;880    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;881    		wc |= fs->win[bc % SS(fs)] << 8;
;;;882    		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
;;;883    
;;;884    	case FS_FAT16 :
;;;885    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;886    		p = &fs->win[clst * 2 % SS(fs)];
;;;887    		return LD_WORD(p);
;;;888    
;;;889    	case FS_FAT32 :
;;;890    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;891    		p = &fs->win[clst * 4 % SS(fs)];
;;;892    		return LD_DWORD(p) & 0x0FFFFFFF;
;;;893    
;;;894    	default:
;;;895    		return 1;
;;;896    	}
;;;897    
;;;898    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;899    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L44.24|
000018  7828              LDRB     r0,[r5,#0]            ;875
00001a  2801              CMP      r0,#1                 ;875
00001c  d004              BEQ      |L44.40|
00001e  2802              CMP      r0,#2                 ;875
000020  d02c              BEQ      |L44.124|
000022  2803              CMP      r0,#3                 ;875
000024  d15a              BNE      |L44.220|
000026  e03d              B        |L44.164|
                  |L44.40|
000028  4627              MOV      r7,r4                 ;877
00002a  eb070757          ADD      r7,r7,r7,LSR #1       ;877
00002e  6a28              LDR      r0,[r5,#0x20]         ;878
000030  eb002157          ADD      r1,r0,r7,LSR #9       ;878
000034  4628              MOV      r0,r5                 ;878
000036  f7fffffe          BL       move_window
00003a  b100              CBZ      r0,|L44.62|
00003c  e050              B        |L44.224|
                  |L44.62|
00003e  f3c70108          UBFX     r1,r7,#0,#9           ;879
000042  f1050030          ADD      r0,r5,#0x30           ;879
000046  f8108001          LDRB     r8,[r0,r1]            ;879
00004a  1c7f              ADDS     r7,r7,#1              ;879
00004c  6a28              LDR      r0,[r5,#0x20]         ;880
00004e  eb002157          ADD      r1,r0,r7,LSR #9       ;880
000052  4628              MOV      r0,r5                 ;880
000054  f7fffffe          BL       move_window
000058  b100              CBZ      r0,|L44.92|
00005a  e041              B        |L44.224|
                  |L44.92|
00005c  f3c70108          UBFX     r1,r7,#0,#9           ;881
000060  f1050030          ADD      r0,r5,#0x30           ;881
000064  5c40              LDRB     r0,[r0,r1]            ;881
000066  ea482800          ORR      r8,r8,r0,LSL #8       ;881
00006a  f0140f01          TST      r4,#1                 ;882
00006e  d002              BEQ      |L44.118|
000070  ea4f1018          LSR      r0,r8,#4              ;882
000074  e7ce              B        |L44.20|
                  |L44.118|
000076  f3c8000b          UBFX     r0,r8,#0,#12          ;882
00007a  e7cb              B        |L44.20|
                  |L44.124|
00007c  6a28              LDR      r0,[r5,#0x20]         ;885
00007e  eb002114          ADD      r1,r0,r4,LSR #8       ;885
000082  4628              MOV      r0,r5                 ;885
000084  f7fffffe          BL       move_window
000088  b100              CBZ      r0,|L44.140|
00008a  e029              B        |L44.224|
                  |L44.140|
00008c  f24010ff          MOV      r0,#0x1ff             ;886
000090  ea000144          AND      r1,r0,r4,LSL #1       ;886
000094  f1050030          ADD      r0,r5,#0x30           ;886
000098  180e              ADDS     r6,r1,r0              ;886
00009a  7830              LDRB     r0,[r6,#0]            ;887
00009c  7871              LDRB     r1,[r6,#1]            ;887
00009e  ea402001          ORR      r0,r0,r1,LSL #8       ;887
0000a2  e7b7              B        |L44.20|
                  |L44.164|
0000a4  6a28              LDR      r0,[r5,#0x20]         ;890
0000a6  eb0011d4          ADD      r1,r0,r4,LSR #7       ;890
0000aa  4628              MOV      r0,r5                 ;890
0000ac  f7fffffe          BL       move_window
0000b0  b100              CBZ      r0,|L44.180|
0000b2  e015              B        |L44.224|
                  |L44.180|
0000b4  f24010ff          MOV      r0,#0x1ff             ;891
0000b8  ea000184          AND      r1,r0,r4,LSL #2       ;891
0000bc  f1050030          ADD      r0,r5,#0x30           ;891
0000c0  180e              ADDS     r6,r1,r0              ;891
0000c2  78f0              LDRB     r0,[r6,#3]            ;892
0000c4  0600              LSLS     r0,r0,#24             ;892
0000c6  78b1              LDRB     r1,[r6,#2]            ;892
0000c8  ea404001          ORR      r0,r0,r1,LSL #16      ;892
0000cc  7871              LDRB     r1,[r6,#1]            ;892
0000ce  ea402001          ORR      r0,r0,r1,LSL #8       ;892
0000d2  7831              LDRB     r1,[r6,#0]            ;892
0000d4  4308              ORRS     r0,r0,r1              ;892
0000d6  f0204070          BIC      r0,r0,#0xf0000000     ;892
0000da  e79b              B        |L44.20|
                  |L44.220|
0000dc  2001              MOVS     r0,#1                 ;895
0000de  e799              B        |L44.20|
                  |L44.224|
0000e0  bf00              NOP                            ;878
0000e2  f04f30ff          MOV      r0,#0xffffffff        ;898
0000e6  e795              B        |L44.20|
;;;900    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1732   static
;;;1733   void get_fileinfo (		/* No return code */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1734   	DIR* dp,			/* Pointer to the directory object */
;;;1735   	FILINFO* fno	 	/* Pointer to the file information to be filled */
;;;1736   )
;;;1737   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;1738   	UINT i;
;;;1739   	TCHAR *p, c;
;;;1740   
;;;1741   
;;;1742   	p = fno->fname;
000008  f1040609          ADD      r6,r4,#9
;;;1743   	if (dp->sect) {		/* Get SFN */
00000c  6938              LDR      r0,[r7,#0x10]
00000e  2800              CMP      r0,#0
000010  d043              BEQ      |L45.154|
;;;1744   		BYTE *dir = dp->dir;
000012  6978              LDR      r0,[r7,#0x14]
;;;1745   
;;;1746   		i = 0;
000014  2500              MOVS     r5,#0
;;;1747   		while (i < 11) {		/* Copy name body and extension */
000016  e026              B        |L45.102|
                  |L45.24|
;;;1748   			c = (TCHAR)dir[i++];
000018  4629              MOV      r1,r5
00001a  1c6d              ADDS     r5,r5,#1
00001c  f8108001          LDRB     r8,[r0,r1]
;;;1749   			if (c == ' ') continue;			/* Skip padding spaces */
000020  f1b80f20          CMP      r8,#0x20
000024  d100              BNE      |L45.40|
000026  e01e              B        |L45.102|
                  |L45.40|
;;;1750   			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
000028  f1b80f05          CMP      r8,#5
00002c  d101              BNE      |L45.50|
00002e  f04f08e5          MOV      r8,#0xe5
                  |L45.50|
;;;1751   			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
000032  2d09              CMP      r5,#9
000034  d102              BNE      |L45.60|
000036  212e              MOVS     r1,#0x2e
000038  f8061b01          STRB     r1,[r6],#1
                  |L45.60|
;;;1752   #if _USE_LFN
;;;1753   			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
00003c  f1b80f41          CMP      r8,#0x41
000040  db0e              BLT      |L45.96|
000042  f1b80f5a          CMP      r8,#0x5a
000046  dc0b              BGT      |L45.96|
000048  7b01              LDRB     r1,[r0,#0xc]
00004a  2d09              CMP      r5,#9
00004c  d301              BCC      |L45.82|
00004e  2210              MOVS     r2,#0x10
000050  e000              B        |L45.84|
                  |L45.82|
000052  2208              MOVS     r2,#8
                  |L45.84|
000054  4211              TST      r1,r2
000056  d003              BEQ      |L45.96|
;;;1754   				c += 0x20;			/* To lower */
000058  f1080120          ADD      r1,r8,#0x20
00005c  f00108ff          AND      r8,r1,#0xff
                  |L45.96|
;;;1755   #if _LFN_UNICODE
;;;1756   			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
;;;1757   				c = c << 8 | dir[i++];
;;;1758   			c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;1759   			if (!c) c = '?';
;;;1760   #endif
;;;1761   #endif
;;;1762   			*p++ = c;
000060  f8068b01          STRB     r8,[r6],#1
000064  bf00              NOP                            ;1749
                  |L45.102|
000066  2d0b              CMP      r5,#0xb               ;1747
000068  d3d6              BCC      |L45.24|
;;;1763   		}
;;;1764   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00006a  7ac1              LDRB     r1,[r0,#0xb]
00006c  7221              STRB     r1,[r4,#8]
;;;1765   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
00006e  7fc1              LDRB     r1,[r0,#0x1f]
000070  060a              LSLS     r2,r1,#24
000072  7f81              LDRB     r1,[r0,#0x1e]
000074  ea424201          ORR      r2,r2,r1,LSL #16
000078  7f41              LDRB     r1,[r0,#0x1d]
00007a  ea422101          ORR      r1,r2,r1,LSL #8
00007e  7f02              LDRB     r2,[r0,#0x1c]
000080  4311              ORRS     r1,r1,r2
000082  6021              STR      r1,[r4,#0]
;;;1766   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
000084  7e02              LDRB     r2,[r0,#0x18]
000086  7e41              LDRB     r1,[r0,#0x19]
000088  ea422101          ORR      r1,r2,r1,LSL #8
00008c  80a1              STRH     r1,[r4,#4]
;;;1767   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
00008e  7d82              LDRB     r2,[r0,#0x16]
000090  7dc1              LDRB     r1,[r0,#0x17]
000092  ea422101          ORR      r1,r2,r1,LSL #8
000096  80e1              STRH     r1,[r4,#6]
;;;1768   	}
000098  bf00              NOP      
                  |L45.154|
;;;1769   	*p = 0;		/* Terminate SFN string by a \0 */
00009a  2000              MOVS     r0,#0
00009c  7030              STRB     r0,[r6,#0]
;;;1770   
;;;1771   #if _USE_LFN
;;;1772   	if (fno->lfname) {
00009e  69a0              LDR      r0,[r4,#0x18]
0000a0  b358              CBZ      r0,|L45.250|
;;;1773   		WCHAR w, *lfn;
;;;1774   
;;;1775   		i = 0; p = fno->lfname;
0000a2  2500              MOVS     r5,#0
0000a4  69a6              LDR      r6,[r4,#0x18]
;;;1776   		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
0000a6  6938              LDR      r0,[r7,#0x10]
0000a8  b320              CBZ      r0,|L45.244|
0000aa  69e0              LDR      r0,[r4,#0x1c]
0000ac  b310              CBZ      r0,|L45.244|
0000ae  8c38              LDRH     r0,[r7,#0x20]
0000b0  f5a0417f          SUB      r1,r0,#0xff00
0000b4  39ff              SUBS     r1,r1,#0xff
0000b6  d01d              BEQ      |L45.244|
;;;1777   			lfn = dp->lfn;
0000b8  f8d7a01c          LDR      r10,[r7,#0x1c]
;;;1778   			while ((w = *lfn++) != 0) {		/* Get an LFN character */
0000bc  e014              B        |L45.232|
                  |L45.190|
;;;1779   #if !_LFN_UNICODE
;;;1780   				w = ff_convert(w, 0);		/* Unicode -> OEM */
0000be  2100              MOVS     r1,#0
0000c0  4648              MOV      r0,r9
0000c2  f7fffffe          BL       ff_convert
0000c6  4681              MOV      r9,r0
;;;1781   				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
0000c8  f1b90f00          CMP      r9,#0
0000cc  d101              BNE      |L45.210|
0000ce  2500              MOVS     r5,#0
0000d0  e00f              B        |L45.242|
                  |L45.210|
;;;1782   				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
0000d2  bf00              NOP      
;;;1783   					p[i++] = (TCHAR)(w >> 8);
;;;1784   #endif
;;;1785   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
0000d4  69e0              LDR      r0,[r4,#0x1c]
0000d6  1e40              SUBS     r0,r0,#1
0000d8  42a8              CMP      r0,r5
0000da  d801              BHI      |L45.224|
0000dc  2500              MOVS     r5,#0
0000de  e008              B        |L45.242|
                  |L45.224|
;;;1786   				p[i++] = (TCHAR)w;
0000e0  4628              MOV      r0,r5
0000e2  1c6d              ADDS     r5,r5,#1
0000e4  f8069000          STRB     r9,[r6,r0]
                  |L45.232|
0000e8  f83a1b02          LDRH     r1,[r10],#2           ;1778
0000ec  ea5f0901          MOVS     r9,r1                 ;1778
0000f0  d1e5              BNE      |L45.190|
                  |L45.242|
0000f2  bf00              NOP                            ;1781
                  |L45.244|
;;;1787   			}
;;;1788   		}
;;;1789   		p[i] = 0;	/* Terminate LFN string by a \0 */
0000f4  2000              MOVS     r0,#0
0000f6  5570              STRB     r0,[r6,r5]
;;;1790   	}
0000f8  bf00              NOP      
                  |L45.250|
;;;1791   #endif
;;;1792   }
0000fa  e8bd87f0          POP      {r4-r10,pc}
;;;1793   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2*/
                          ENDP


                          AREA ||i.get_ldnumber||, CODE, READONLY, ALIGN=1

                  get_ldnumber PROC
;;;2074   static
;;;2075   int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
000000  b570              PUSH     {r4-r6,lr}
;;;2076   	const TCHAR** path	/* Pointer to pointer to the path name */
;;;2077   )
;;;2078   {
000002  4602              MOV      r2,r0
;;;2079   	const TCHAR *tp, *tt;
;;;2080   	UINT i;
;;;2081   	int vol = -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;2082   
;;;2083   
;;;2084   	if (*path) {	/* If the pointer is not a null */
000008  6815              LDR      r5,[r2,#0]
00000a  b1e5              CBZ      r5,|L46.70|
;;;2085   		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
00000c  6811              LDR      r1,[r2,#0]
00000e  e000              B        |L46.18|
                  |L46.16|
000010  1c49              ADDS     r1,r1,#1
                  |L46.18|
000012  780d              LDRB     r5,[r1,#0]
000014  2d20              CMP      r5,#0x20
000016  d302              BCC      |L46.30|
000018  780d              LDRB     r5,[r1,#0]
00001a  2d3a              CMP      r5,#0x3a
00001c  d1f8              BNE      |L46.16|
                  |L46.30|
;;;2086   		if (*tt == ':') {	/* If a ':' is exist in the path name */
00001e  780d              LDRB     r5,[r1,#0]
000020  2d3a              CMP      r5,#0x3a
000022  d10f              BNE      |L46.68|
;;;2087   			tp = *path;
000024  6814              LDR      r4,[r2,#0]
;;;2088   			i = *tp++ - '0'; 
000026  f8145b01          LDRB     r5,[r4],#1
00002a  f1a50330          SUB      r3,r5,#0x30
;;;2089   			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
00002e  2b0a              CMP      r3,#0xa
000030  d207              BCS      |L46.66|
000032  428c              CMP      r4,r1
000034  d105              BNE      |L46.66|
;;;2090   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
000036  2b02              CMP      r3,#2
000038  d203              BCS      |L46.66|
;;;2091   					vol = (int)i;
00003a  4618              MOV      r0,r3
;;;2092   					*path = ++tt;
00003c  1c4d              ADDS     r5,r1,#1
00003e  4629              MOV      r1,r5
000040  6015              STR      r5,[r2,#0]
                  |L46.66|
;;;2093   				}
;;;2094   			} else {	/* No numeric drive number */
;;;2095   #if _STR_VOLUME_ID		/* Find string drive id */
;;;2096   				static const char* const str[] = {_VOLUME_STRS};
;;;2097   				const char *sp;
;;;2098   				char c;
;;;2099   				TCHAR tc;
;;;2100   
;;;2101   				i = 0; tt++;
;;;2102   				do {
;;;2103   					sp = str[i]; tp = *path;
;;;2104   					do {	/* Compare a string drive id with path name */
;;;2105   						c = *sp++; tc = *tp++;
;;;2106   						if (IsLower(tc)) tc -= 0x20;
;;;2107   					} while (c && (TCHAR)c == tc);
;;;2108   				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
;;;2109   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
;;;2110   					vol = (int)i;
;;;2111   					*path = tt;
;;;2112   				}
;;;2113   #endif
;;;2114   			}
;;;2115   			return vol;
;;;2116   		}
;;;2117   #if _FS_RPATH && _VOLUMES >= 2
;;;2118   		vol = CurrVol;	/* Current drive */
;;;2119   #else
;;;2120   		vol = 0;		/* Drive 0 */
;;;2121   #endif
;;;2122   	}
;;;2123   	return vol;
;;;2124   }
000042  bd70              POP      {r4-r6,pc}
                  |L46.68|
000044  2000              MOVS     r0,#0                 ;2120
                  |L46.70|
000046  bf00              NOP                            ;2123
000048  e7fb              B        |L46.66|
;;;2125   
                          ENDP


                          AREA ||i.ld_clust||, CODE, READONLY, ALIGN=1

                  ld_clust PROC
;;;1267   static
;;;1268   DWORD ld_clust (
000000  b510              PUSH     {r4,lr}
;;;1269   	FATFS* fs,	/* Pointer to the fs object */
;;;1270   	BYTE* dir	/* Pointer to the directory entry */
;;;1271   )
;;;1272   {
000002  4602              MOV      r2,r0
;;;1273   	DWORD cl;
;;;1274   
;;;1275   	cl = LD_WORD(dir+DIR_FstClusLO);
000004  7e8c              LDRB     r4,[r1,#0x1a]
000006  7ecb              LDRB     r3,[r1,#0x1b]
000008  ea442003          ORR      r0,r4,r3,LSL #8
;;;1276   	if (fs->fs_type == FS_FAT32)
00000c  7813              LDRB     r3,[r2,#0]
00000e  2b03              CMP      r3,#3
000010  d105              BNE      |L47.30|
;;;1277   		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
000012  7d0c              LDRB     r4,[r1,#0x14]
000014  7d4b              LDRB     r3,[r1,#0x15]
000016  ea442303          ORR      r3,r4,r3,LSL #8
00001a  ea404003          ORR      r0,r0,r3,LSL #16
                  |L47.30|
;;;1278   
;;;1279   	return cl;
;;;1280   }
00001e  bd10              POP      {r4,pc}
;;;1281   
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;585    static
;;;586    int mem_cmp (const void* dst, const void* src, UINT cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;587    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;588    	int r = 0;
000008  2000              MOVS     r0,#0
;;;589    
;;;590    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000a  bf00              NOP      
                  |L48.12|
00000c  0016              MOVS     r6,r2
00000e  f1a20201          SUB      r2,r2,#1
000012  d007              BEQ      |L48.36|
000014  f8147b01          LDRB     r7,[r4],#1
000018  f815cb01          LDRB     r12,[r5],#1
00001c  eba7060c          SUB      r6,r7,r12
000020  0030              MOVS     r0,r6
000022  d0f3              BEQ      |L48.12|
                  |L48.36|
;;;591    	return r;
;;;592    }
000024  bdf0              POP      {r4-r7,pc}
;;;593    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;559    static
;;;560    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;561    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;562    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;563    
;;;564    #if _WORD_ACCESS == 1
;;;565    	while (cnt >= sizeof (int)) {
;;;566    		*(int*)d = *(int*)s;
;;;567    		d += sizeof (int); s += sizeof (int);
;;;568    		cnt -= sizeof (int);
;;;569    	}
;;;570    #endif
;;;571    	while (cnt--)
000006  e003              B        |L49.16|
                  |L49.8|
;;;572    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L49.16|
000010  0015              MOVS     r5,r2                 ;571
000012  f1a20201          SUB      r2,r2,#1              ;571
000016  d1f7              BNE      |L49.8|
;;;573    }
000018  bd70              POP      {r4-r6,pc}
;;;574    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;576    static
;;;577    void mem_set (void* dst, int val, UINT cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;578    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;579    
;;;580    	while (cnt--)
000004  e001              B        |L50.10|
                  |L50.6|
;;;581    		*d++ = (BYTE)val;
000006  f8031b01          STRB     r1,[r3],#1
                  |L50.10|
00000a  0014              MOVS     r4,r2                 ;580
00000c  f1a20201          SUB      r2,r2,#1              ;580
000010  d1f9              BNE      |L50.6|
;;;582    }
000012  bd30              POP      {r4,r5,pc}
;;;583    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;778    static
;;;779    FRESULT move_window (
000000  b570              PUSH     {r4-r6,lr}
;;;780    	FATFS* fs,		/* File system object */
;;;781    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;782    )
;;;783    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;784    	if (sector != fs->winsect) {	/* Changed current window */
000006  6ae0              LDR      r0,[r4,#0x2c]
000008  42a8              CMP      r0,r5
00000a  d010              BEQ      |L51.46|
;;;785    #if !_FS_READONLY
;;;786    		if (sync_window(fs) != FR_OK)
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       sync_window
000012  b108              CBZ      r0,|L51.24|
;;;787    			return FR_DISK_ERR;
000014  2001              MOVS     r0,#1
                  |L51.22|
;;;788    #endif
;;;789    		if (disk_read(fs->drv, fs->win, sector, 1))
;;;790    			return FR_DISK_ERR;
;;;791    		fs->winsect = sector;
;;;792    	}
;;;793    
;;;794    	return FR_OK;
;;;795    }
000016  bd70              POP      {r4-r6,pc}
                  |L51.24|
000018  7860              LDRB     r0,[r4,#1]            ;789
00001a  2301              MOVS     r3,#1                 ;789
00001c  462a              MOV      r2,r5                 ;789
00001e  f1040130          ADD      r1,r4,#0x30           ;789
000022  f7fffffe          BL       disk_read
000026  b108              CBZ      r0,|L51.44|
000028  2001              MOVS     r0,#1                 ;790
00002a  e7f4              B        |L51.22|
                  |L51.44|
00002c  62e5              STR      r5,[r4,#0x2c]         ;791
                  |L51.46|
00002e  2000              MOVS     r0,#0                 ;794
000030  e7f1              B        |L51.22|
;;;796    
                          ENDP


                          AREA ||i.pick_lfn||, CODE, READONLY, ALIGN=2

                  pick_lfn PROC
;;;1337   static
;;;1338   int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
000000  b5f0              PUSH     {r4-r7,lr}
;;;1339   	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
;;;1340   	BYTE* dir			/* Pointer to the directory entry */
;;;1341   )
;;;1342   {
000002  4603              MOV      r3,r0
;;;1343   	UINT i, s;
;;;1344   	WCHAR wc, uc;
;;;1345   
;;;1346   
;;;1347   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
000004  7808              LDRB     r0,[r1,#0]
000006  f000003f          AND      r0,r0,#0x3f
00000a  1e40              SUBS     r0,r0,#1
00000c  eb000780          ADD      r7,r0,r0,LSL #2
000010  eb0702c0          ADD      r2,r7,r0,LSL #3
;;;1348   
;;;1349   	s = 0; wc = 1;
000014  2500              MOVS     r5,#0
000016  2601              MOVS     r6,#1
;;;1350   	do {
000018  bf00              NOP      
                  |L52.26|
;;;1351   		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
00001a  4815              LDR      r0,|L52.112|
00001c  5d40              LDRB     r0,[r0,r5]
00001e  5c08              LDRB     r0,[r1,r0]
000020  4f13              LDR      r7,|L52.112|
000022  5d7f              LDRB     r7,[r7,r5]
000024  440f              ADD      r7,r7,r1
000026  787f              LDRB     r7,[r7,#1]
000028  ea402407          ORR      r4,r0,r7,LSL #8
;;;1352   		if (wc) {	/* Last character has not been processed */
00002c  b14e              CBZ      r6,|L52.66|
;;;1353   			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
00002e  2aff              CMP      r2,#0xff
000030  d301              BCC      |L52.54|
000032  2000              MOVS     r0,#0
                  |L52.52|
;;;1354   			lfnbuf[i++] = wc = uc;			/* Store it */
;;;1355   		} else {
;;;1356   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1357   		}
;;;1358   	} while (++s < 13);						/* Read all character in the entry */
;;;1359   
;;;1360   	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
;;;1361   		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
;;;1362   		lfnbuf[i] = 0;
;;;1363   	}
;;;1364   
;;;1365   	return 1;
;;;1366   }
000034  bdf0              POP      {r4-r7,pc}
                  |L52.54|
000036  4626              MOV      r6,r4                 ;1354
000038  4610              MOV      r0,r2                 ;1354
00003a  1c52              ADDS     r2,r2,#1              ;1354
00003c  f8234010          STRH     r4,[r3,r0,LSL #1]     ;1354
000040  e005              B        |L52.78|
                  |L52.66|
000042  f5a4407f          SUB      r0,r4,#0xff00         ;1356
000046  38ff              SUBS     r0,r0,#0xff           ;1356
000048  d001              BEQ      |L52.78|
00004a  2000              MOVS     r0,#0                 ;1356
00004c  e7f2              B        |L52.52|
                  |L52.78|
00004e  1c68              ADDS     r0,r5,#1              ;1358
000050  4605              MOV      r5,r0                 ;1358
000052  280d              CMP      r0,#0xd               ;1358
000054  d3e1              BCC      |L52.26|
000056  7808              LDRB     r0,[r1,#0]            ;1360
000058  f0100f40          TST      r0,#0x40              ;1360
00005c  d006              BEQ      |L52.108|
00005e  2aff              CMP      r2,#0xff              ;1361
000060  d301              BCC      |L52.102|
000062  2000              MOVS     r0,#0                 ;1361
000064  e7e6              B        |L52.52|
                  |L52.102|
000066  2000              MOVS     r0,#0                 ;1362
000068  f8230012          STRH     r0,[r3,r2,LSL #1]     ;1362
                  |L52.108|
00006c  2001              MOVS     r0,#1                 ;1365
00006e  e7e1              B        |L52.52|
;;;1367   
                          ENDP

                  |L52.112|
                          DCD      LfnOfs

                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;908    
;;;909    FRESULT put_fat (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;910    	FATFS* fs,	/* File system object */
;;;911    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;912    	DWORD val	/* New value to mark the cluster */
;;;913    )
;;;914    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;915    	UINT bc;
;;;916    	BYTE *p;
;;;917    	FRESULT res;
;;;918    
;;;919    
;;;920    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
00000a  2e02              CMP      r6,#2
00000c  d302              BCC      |L53.20|
00000e  6968              LDR      r0,[r5,#0x14]
000010  42b0              CMP      r0,r6
000012  d802              BHI      |L53.26|
                  |L53.20|
;;;921    		res = FR_INT_ERR;
000014  f04f0802          MOV      r8,#2
000018  e08d              B        |L53.310|
                  |L53.26|
;;;922    
;;;923    	} else {
;;;924    		switch (fs->fs_type) {
00001a  7828              LDRB     r0,[r5,#0]
00001c  2801              CMP      r0,#1
00001e  d004              BEQ      |L53.42|
000020  2802              CMP      r0,#2
000022  d043              BEQ      |L53.172|
000024  2803              CMP      r0,#3
000026  d17d              BNE      |L53.292|
000028  e056              B        |L53.216|
                  |L53.42|
;;;925    		case FS_FAT12 :
;;;926    			bc = (UINT)clst; bc += bc / 2;
00002a  46b1              MOV      r9,r6
00002c  eb090959          ADD      r9,r9,r9,LSR #1
;;;927    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000030  6a28              LDR      r0,[r5,#0x20]
000032  eb002159          ADD      r1,r0,r9,LSR #9
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       move_window
00003c  4680              MOV      r8,r0
;;;928    			if (res != FR_OK) break;
00003e  f1b80f00          CMP      r8,#0
000042  d000              BEQ      |L53.70|
000044  e074              B        |L53.304|
                  |L53.70|
;;;929    			p = &fs->win[bc % SS(fs)];
000046  f3c90108          UBFX     r1,r9,#0,#9
00004a  f1050030          ADD      r0,r5,#0x30
00004e  180c              ADDS     r4,r1,r0
;;;930    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
000050  f0160f01          TST      r6,#1
000054  d004              BEQ      |L53.96|
000056  b2f9              UXTB     r1,r7
000058  7820              LDRB     r0,[r4,#0]
00005a  f361101f          BFI      r0,r1,#4,#28
00005e  e000              B        |L53.98|
                  |L53.96|
000060  4638              MOV      r0,r7
                  |L53.98|
000062  7020              STRB     r0,[r4,#0]
;;;931    			bc++;
000064  f1090901          ADD      r9,r9,#1
;;;932    			fs->wflag = 1;
000068  2001              MOVS     r0,#1
00006a  7128              STRB     r0,[r5,#4]
;;;933    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00006c  6a28              LDR      r0,[r5,#0x20]
00006e  eb002159          ADD      r1,r0,r9,LSR #9
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       move_window
000078  4680              MOV      r8,r0
;;;934    			if (res != FR_OK) break;
00007a  f1b80f00          CMP      r8,#0
00007e  d000              BEQ      |L53.130|
000080  e056              B        |L53.304|
                  |L53.130|
;;;935    			p = &fs->win[bc % SS(fs)];
000082  f3c90108          UBFX     r1,r9,#0,#9
000086  f1050030          ADD      r0,r5,#0x30
00008a  180c              ADDS     r4,r1,r0
;;;936    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00008c  f0160f01          TST      r6,#1
000090  d002              BEQ      |L53.152|
000092  f3c71007          UBFX     r0,r7,#4,#8
000096  e007              B        |L53.168|
                  |L53.152|
000098  7820              LDRB     r0,[r4,#0]
00009a  f00000f0          AND      r0,r0,#0xf0
00009e  f3c72107          UBFX     r1,r7,#8,#8
0000a2  f001010f          AND      r1,r1,#0xf
0000a6  4308              ORRS     r0,r0,r1
                  |L53.168|
0000a8  7020              STRB     r0,[r4,#0]
;;;937    			break;
0000aa  e041              B        |L53.304|
                  |L53.172|
;;;938    
;;;939    		case FS_FAT16 :
;;;940    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0000ac  6a28              LDR      r0,[r5,#0x20]
0000ae  eb002116          ADD      r1,r0,r6,LSR #8
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       move_window
0000b8  4680              MOV      r8,r0
;;;941    			if (res != FR_OK) break;
0000ba  f1b80f00          CMP      r8,#0
0000be  d000              BEQ      |L53.194|
0000c0  e036              B        |L53.304|
                  |L53.194|
;;;942    			p = &fs->win[clst * 2 % SS(fs)];
0000c2  f24010ff          MOV      r0,#0x1ff
0000c6  ea000146          AND      r1,r0,r6,LSL #1
0000ca  f1050030          ADD      r0,r5,#0x30
0000ce  180c              ADDS     r4,r1,r0
;;;943    			ST_WORD(p, (WORD)val);
0000d0  7027              STRB     r7,[r4,#0]
0000d2  0a38              LSRS     r0,r7,#8
0000d4  7060              STRB     r0,[r4,#1]
;;;944    			break;
0000d6  e02b              B        |L53.304|
                  |L53.216|
;;;945    
;;;946    		case FS_FAT32 :
;;;947    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
0000d8  6a28              LDR      r0,[r5,#0x20]
0000da  eb0011d6          ADD      r1,r0,r6,LSR #7
0000de  4628              MOV      r0,r5
0000e0  f7fffffe          BL       move_window
0000e4  4680              MOV      r8,r0
;;;948    			if (res != FR_OK) break;
0000e6  f1b80f00          CMP      r8,#0
0000ea  d000              BEQ      |L53.238|
0000ec  e020              B        |L53.304|
                  |L53.238|
;;;949    			p = &fs->win[clst * 4 % SS(fs)];
0000ee  f24010ff          MOV      r0,#0x1ff
0000f2  ea000186          AND      r1,r0,r6,LSL #2
0000f6  f1050030          ADD      r0,r5,#0x30
0000fa  180c              ADDS     r4,r1,r0
;;;950    			val |= LD_DWORD(p) & 0xF0000000;
0000fc  78e0              LDRB     r0,[r4,#3]
0000fe  0600              LSLS     r0,r0,#24
000100  78a1              LDRB     r1,[r4,#2]
000102  ea404001          ORR      r0,r0,r1,LSL #16
000106  7861              LDRB     r1,[r4,#1]
000108  ea402001          ORR      r0,r0,r1,LSL #8
00010c  7821              LDRB     r1,[r4,#0]
00010e  4308              ORRS     r0,r0,r1
000110  f0004070          AND      r0,r0,#0xf0000000
000114  4307              ORRS     r7,r7,r0
;;;951    			ST_DWORD(p, val);
000116  7027              STRB     r7,[r4,#0]
000118  0a38              LSRS     r0,r7,#8
00011a  7060              STRB     r0,[r4,#1]
00011c  0c38              LSRS     r0,r7,#16
00011e  70a0              STRB     r0,[r4,#2]
000120  0e38              LSRS     r0,r7,#24
000122  e000              B        |L53.294|
                  |L53.292|
000124  e001              B        |L53.298|
                  |L53.294|
000126  70e0              STRB     r0,[r4,#3]
;;;952    			break;
000128  e002              B        |L53.304|
                  |L53.298|
;;;953    
;;;954    		default :
;;;955    			res = FR_INT_ERR;
00012a  f04f0802          MOV      r8,#2
00012e  bf00              NOP                            ;924
                  |L53.304|
000130  bf00              NOP                            ;928
;;;956    		}
;;;957    		fs->wflag = 1;
000132  2001              MOVS     r0,#1
000134  7128              STRB     r0,[r5,#4]
                  |L53.310|
;;;958    	}
;;;959    
;;;960    	return res;
000136  4640              MOV      r0,r8
;;;961    }
000138  e8bd87f0          POP      {r4-r10,pc}
;;;962    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.putc_bfd||, CODE, READONLY, ALIGN=1

                  putc_bfd PROC
;;;4376   static
;;;4377   void putc_bfd (
000000  b5f8              PUSH     {r3-r7,lr}
;;;4378   	putbuff* pb,
;;;4379   	TCHAR c
;;;4380   )
;;;4381   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;4382   	UINT bw;
;;;4383   	int i;
;;;4384   
;;;4385   
;;;4386   	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
000006  bf00              NOP      
;;;4387   		putc_bfd(pb, '\r');
;;;4388   
;;;4389   	i = pb->idx;	/* Buffer write index (-1:error) */
000008  6865              LDR      r5,[r4,#4]
;;;4390   	if (i < 0) return;
00000a  2d00              CMP      r5,#0
00000c  da00              BGE      |L54.16|
                  |L54.14|
;;;4391   
;;;4392   #if _USE_LFN && _LFN_UNICODE
;;;4393   #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
;;;4394   	if (c < 0x80) {				/* 7-bit */
;;;4395   		pb->buf[i++] = (BYTE)c;
;;;4396   	} else {
;;;4397   		if (c < 0x800) {		/* 11-bit */
;;;4398   			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
;;;4399   		} else {				/* 16-bit */
;;;4400   			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
;;;4401   			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
;;;4402   		}
;;;4403   		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
;;;4404   	}
;;;4405   #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
;;;4406   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4407   	pb->buf[i++] = (BYTE)c;
;;;4408   #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
;;;4409   	pb->buf[i++] = (BYTE)c;
;;;4410   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4411   #else							/* Write a character in ANSI/OEM */
;;;4412   	c = ff_convert(c, 0);	/* Unicode -> OEM */
;;;4413   	if (!c) c = '?';
;;;4414   	if (c >= 0x100)
;;;4415   		pb->buf[i++] = (BYTE)(c >> 8);
;;;4416   	pb->buf[i++] = (BYTE)c;
;;;4417   #endif
;;;4418   #else							/* Write a character without conversion */
;;;4419   	pb->buf[i++] = (BYTE)c;
;;;4420   #endif
;;;4421   
;;;4422   	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
;;;4423   		f_write(pb->fp, pb->buf, (UINT)i, &bw);
;;;4424   		i = (bw == (UINT)i) ? 0 : -1;
;;;4425   	}
;;;4426   	pb->idx = i;
;;;4427   	pb->nchr++;
;;;4428   }
00000e  bdf8              POP      {r3-r7,pc}
                  |L54.16|
000010  4628              MOV      r0,r5                 ;4419
000012  1c6d              ADDS     r5,r5,#1              ;4419
000014  f104010c          ADD      r1,r4,#0xc            ;4419
000018  540e              STRB     r6,[r1,r0]            ;4419
00001a  2d3d              CMP      r5,#0x3d              ;4422
00001c  db0c              BLT      |L54.56|
00001e  466b              MOV      r3,sp                 ;4423
000020  462a              MOV      r2,r5                 ;4423
000022  6820              LDR      r0,[r4,#0]            ;4423
000024  f7fffffe          BL       f_write
000028  9800              LDR      r0,[sp,#0]            ;4424
00002a  42a8              CMP      r0,r5                 ;4424
00002c  d101              BNE      |L54.50|
00002e  2000              MOVS     r0,#0                 ;4424
000030  e001              B        |L54.54|
                  |L54.50|
000032  f04f30ff          MOV      r0,#0xffffffff        ;4424
                  |L54.54|
000036  4605              MOV      r5,r0                 ;4424
                  |L54.56|
000038  6065              STR      r5,[r4,#4]            ;4426
00003a  68a0              LDR      r0,[r4,#8]            ;4427
00003c  1c40              ADDS     r0,r0,#1              ;4427
00003e  60a0              STR      r0,[r4,#8]            ;4427
000040  bf00              NOP      
000042  e7e4              B        |L54.14|
;;;4429   
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;971    static
;;;972    FRESULT remove_chain (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;973    	FATFS* fs,			/* File system object */
;;;974    	DWORD clst			/* Cluster# to remove a chain from */
;;;975    )
;;;976    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;977    	FRESULT res;
;;;978    	DWORD nxt;
;;;979    #if _USE_ERASE
;;;980    	DWORD scl = clst, ecl = clst, rt[2];
;;;981    #endif
;;;982    
;;;983    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000008  2e02              CMP      r6,#2
00000a  d302              BCC      |L55.18|
00000c  6960              LDR      r0,[r4,#0x14]
00000e  42b0              CMP      r0,r6
000010  d801              BHI      |L55.22|
                  |L55.18|
;;;984    		res = FR_INT_ERR;
000012  2702              MOVS     r7,#2
000014  e027              B        |L55.102|
                  |L55.22|
;;;985    
;;;986    	} else {
;;;987    		res = FR_OK;
000016  2700              MOVS     r7,#0
;;;988    		while (clst < fs->n_fatent) {			/* Not a last link? */
000018  e021              B        |L55.94|
                  |L55.26|
;;;989    			nxt = get_fat(fs, clst);			/* Get cluster status */
00001a  4631              MOV      r1,r6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       get_fat
000022  4605              MOV      r5,r0
;;;990    			if (nxt == 0) break;				/* Empty cluster? */
000024  b905              CBNZ     r5,|L55.40|
000026  e01d              B        |L55.100|
                  |L55.40|
;;;991    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L55.48|
00002c  2702              MOVS     r7,#2
00002e  e019              B        |L55.100|
                  |L55.48|
;;;992    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000030  1c68              ADDS     r0,r5,#1
000032  d101              BNE      |L55.56|
000034  2701              MOVS     r7,#1
000036  e015              B        |L55.100|
                  |L55.56|
;;;993    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000038  2200              MOVS     r2,#0
00003a  4631              MOV      r1,r6
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       put_fat
000042  4607              MOV      r7,r0
;;;994    			if (res != FR_OK) break;
000044  b107              CBZ      r7,|L55.72|
000046  e00d              B        |L55.100|
                  |L55.72|
;;;995    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
000048  6920              LDR      r0,[r4,#0x10]
00004a  1c40              ADDS     r0,r0,#1
00004c  d006              BEQ      |L55.92|
;;;996    				fs->free_clust++;
00004e  6920              LDR      r0,[r4,#0x10]
000050  1c40              ADDS     r0,r0,#1
000052  6120              STR      r0,[r4,#0x10]
;;;997    				fs->fsi_flag |= 1;
000054  7960              LDRB     r0,[r4,#5]
000056  f0400001          ORR      r0,r0,#1
00005a  7160              STRB     r0,[r4,#5]
                  |L55.92|
;;;998    			}
;;;999    #if _USE_ERASE
;;;1000   			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;1001   				ecl = nxt;
;;;1002   			} else {				/* End of contiguous clusters */ 
;;;1003   				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;1004   				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;1005   				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
;;;1006   				scl = ecl = nxt;
;;;1007   			}
;;;1008   #endif
;;;1009   			clst = nxt;	/* Next cluster */
00005c  462e              MOV      r6,r5
                  |L55.94|
00005e  6960              LDR      r0,[r4,#0x14]         ;988
000060  42b0              CMP      r0,r6                 ;988
000062  d8da              BHI      |L55.26|
                  |L55.100|
000064  bf00              NOP                            ;990
                  |L55.102|
;;;1010   		}
;;;1011   	}
;;;1012   
;;;1013   	return res;
000066  4638              MOV      r0,r7
;;;1014   }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;1015   #endif
                          ENDP


                          AREA ||i.st_clust||, CODE, READONLY, ALIGN=1

                  st_clust PROC
;;;1284   static
;;;1285   void st_clust (
000000  7681              STRB     r1,[r0,#0x1a]
;;;1286   	BYTE* dir,	/* Pointer to the directory entry */
;;;1287   	DWORD cl	/* Value to be set */
;;;1288   )
;;;1289   {
;;;1290   	ST_WORD(dir+DIR_FstClusLO, cl);
000002  0a0b              LSRS     r3,r1,#8
000004  76c3              STRB     r3,[r0,#0x1b]
;;;1291   	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
000006  0c0a              LSRS     r2,r1,#16
000008  7502              STRB     r2,[r0,#0x14]
00000a  0e0b              LSRS     r3,r1,#24
00000c  7543              STRB     r3,[r0,#0x15]
;;;1292   }
00000e  4770              BX       lr
;;;1293   #endif
                          ENDP


                          AREA ||i.sum_sfn||, CODE, READONLY, ALIGN=1

                  sum_sfn PROC
;;;1467   static
;;;1468   BYTE sum_sfn (
000000  b530              PUSH     {r4,r5,lr}
;;;1469   	const BYTE* dir		/* Pointer to the SFN entry */
;;;1470   )
;;;1471   {
000002  4601              MOV      r1,r0
;;;1472   	BYTE sum = 0;
000004  2000              MOVS     r0,#0
;;;1473   	UINT n = 11;
000006  220b              MOVS     r2,#0xb
;;;1474   
;;;1475   	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
000008  bf00              NOP      
                  |L57.10|
00000a  1043              ASRS     r3,r0,#1
00000c  eb0314c0          ADD      r4,r3,r0,LSL #7
000010  f8115b01          LDRB     r5,[r1],#1
000014  1963              ADDS     r3,r4,r5
000016  b2d8              UXTB     r0,r3
000018  1e53              SUBS     r3,r2,#1
00001a  001a              MOVS     r2,r3
00001c  d1f5              BNE      |L57.10|
;;;1476   	return sum;
;;;1477   }
00001e  bd30              POP      {r4,r5,pc}
;;;1478   #endif
                          ENDP


                          AREA ||i.sync_fs||, CODE, READONLY, ALIGN=1

                  sync_fs PROC
;;;804    static
;;;805    FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  b570              PUSH     {r4-r6,lr}
;;;806    	FATFS* fs		/* File system object */
;;;807    )
;;;808    {
000002  4604              MOV      r4,r0
;;;809    	FRESULT res;
;;;810    
;;;811    
;;;812    	res = sync_window(fs);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       sync_window
00000a  4605              MOV      r5,r0
;;;813    	if (res == FR_OK) {
00000c  2d00              CMP      r5,#0
00000e  d159              BNE      |L58.196|
;;;814    		/* Update FSINFO sector if needed */
;;;815    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
000010  7820              LDRB     r0,[r4,#0]
000012  2803              CMP      r0,#3
000014  d14f              BNE      |L58.182|
000016  7960              LDRB     r0,[r4,#5]
000018  2801              CMP      r0,#1
00001a  d14c              BNE      |L58.182|
;;;816    			/* Create FSINFO structure */
;;;817    			mem_set(fs->win, 0, SS(fs));
00001c  0242              LSLS     r2,r0,#9
00001e  2100              MOVS     r1,#0
000020  f1040030          ADD      r0,r4,#0x30
000024  f7fffffe          BL       mem_set
;;;818    			ST_WORD(fs->win+BS_55AA, 0xAA55);
000028  2155              MOVS     r1,#0x55
00002a  f884122e          STRB     r1,[r4,#0x22e]
00002e  21aa              MOVS     r1,#0xaa
000030  f884122f          STRB     r1,[r4,#0x22f]
;;;819    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000034  2052              MOVS     r0,#0x52
000036  f8840030          STRB     r0,[r4,#0x30]
00003a  2152              MOVS     r1,#0x52
00003c  2031              MOVS     r0,#0x31
00003e  5501              STRB     r1,[r0,r4]
000040  2161              MOVS     r1,#0x61
000042  2032              MOVS     r0,#0x32
000044  5501              STRB     r1,[r0,r4]
000046  2141              MOVS     r1,#0x41
000048  2033              MOVS     r0,#0x33
00004a  5501              STRB     r1,[r0,r4]
;;;820    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
00004c  2172              MOVS     r1,#0x72
00004e  f8841214          STRB     r1,[r4,#0x214]
000052  f8841215          STRB     r1,[r4,#0x215]
000056  2141              MOVS     r1,#0x41
000058  f8841216          STRB     r1,[r4,#0x216]
00005c  2161              MOVS     r1,#0x61
00005e  f8841217          STRB     r1,[r4,#0x217]
;;;821    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000062  7c21              LDRB     r1,[r4,#0x10]
000064  f8841218          STRB     r1,[r4,#0x218]
000068  8a20              LDRH     r0,[r4,#0x10]
00006a  0a01              LSRS     r1,r0,#8
00006c  f8841219          STRB     r1,[r4,#0x219]
000070  6920              LDR      r0,[r4,#0x10]
000072  0c01              LSRS     r1,r0,#16
000074  f884121a          STRB     r1,[r4,#0x21a]
000078  6920              LDR      r0,[r4,#0x10]
00007a  0e01              LSRS     r1,r0,#24
00007c  f884121b          STRB     r1,[r4,#0x21b]
;;;822    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000080  7b21              LDRB     r1,[r4,#0xc]
000082  f884121c          STRB     r1,[r4,#0x21c]
000086  89a0              LDRH     r0,[r4,#0xc]
000088  0a01              LSRS     r1,r0,#8
00008a  f884121d          STRB     r1,[r4,#0x21d]
00008e  68e0              LDR      r0,[r4,#0xc]
000090  0c01              LSRS     r1,r0,#16
000092  f884121e          STRB     r1,[r4,#0x21e]
000096  68e0              LDR      r0,[r4,#0xc]
000098  0e01              LSRS     r1,r0,#24
00009a  f884121f          STRB     r1,[r4,#0x21f]
;;;823    			/* Write it into the FSINFO sector */
;;;824    			fs->winsect = fs->volbase + 1;
00009e  69e0              LDR      r0,[r4,#0x1c]
0000a0  1c40              ADDS     r0,r0,#1
0000a2  62e0              STR      r0,[r4,#0x2c]
;;;825    			disk_write(fs->drv, fs->win, fs->winsect, 1);
0000a4  7860              LDRB     r0,[r4,#1]
0000a6  2301              MOVS     r3,#1
0000a8  f1040130          ADD      r1,r4,#0x30
0000ac  6ae2              LDR      r2,[r4,#0x2c]
0000ae  f7fffffe          BL       disk_write
;;;826    			fs->fsi_flag = 0;
0000b2  2000              MOVS     r0,#0
0000b4  7160              STRB     r0,[r4,#5]
                  |L58.182|
;;;827    		}
;;;828    		/* Make sure that no pending write process in the physical drive */
;;;829    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
0000b6  7860              LDRB     r0,[r4,#1]
0000b8  2200              MOVS     r2,#0
0000ba  4611              MOV      r1,r2
0000bc  f7fffffe          BL       disk_ioctl
0000c0  b100              CBZ      r0,|L58.196|
;;;830    			res = FR_DISK_ERR;
0000c2  2501              MOVS     r5,#1
                  |L58.196|
;;;831    	}
;;;832    
;;;833    	return res;
0000c4  4628              MOV      r0,r5
;;;834    }
0000c6  bd70              POP      {r4-r6,pc}
;;;835    #endif
                          ENDP


                          AREA ||i.sync_window||, CODE, READONLY, ALIGN=1

                  sync_window PROC
;;;752    static
;;;753    FRESULT sync_window (
000000  b570              PUSH     {r4-r6,lr}
;;;754    	FATFS* fs		/* File system object */
;;;755    )
;;;756    {
000002  4604              MOV      r4,r0
;;;757    	DWORD wsect;
;;;758    	UINT nf;
;;;759    
;;;760    
;;;761    	if (fs->wflag) {	/* Write back the sector if it is dirty */
000004  7920              LDRB     r0,[r4,#4]
000006  b1f8              CBZ      r0,|L59.72|
;;;762    		wsect = fs->winsect;	/* Current sector number */
000008  6ae5              LDR      r5,[r4,#0x2c]
;;;763    		if (disk_write(fs->drv, fs->win, wsect, 1))
00000a  7860              LDRB     r0,[r4,#1]
00000c  2301              MOVS     r3,#1
00000e  462a              MOV      r2,r5
000010  f1040130          ADD      r1,r4,#0x30
000014  f7fffffe          BL       disk_write
000018  b108              CBZ      r0,|L59.30|
;;;764    			return FR_DISK_ERR;
00001a  2001              MOVS     r0,#1
                  |L59.28|
;;;765    		fs->wflag = 0;
;;;766    		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
;;;767    			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
;;;768    				wsect += fs->fsize;
;;;769    				disk_write(fs->drv, fs->win, wsect, 1);
;;;770    			}
;;;771    		}
;;;772    	}
;;;773    	return FR_OK;
;;;774    }
00001c  bd70              POP      {r4-r6,pc}
                  |L59.30|
00001e  2000              MOVS     r0,#0                 ;765
000020  7120              STRB     r0,[r4,#4]            ;765
000022  6a20              LDR      r0,[r4,#0x20]         ;766
000024  1a28              SUBS     r0,r5,r0              ;766
000026  69a1              LDR      r1,[r4,#0x18]         ;766
000028  4288              CMP      r0,r1                 ;766
00002a  d20d              BCS      |L59.72|
00002c  78e6              LDRB     r6,[r4,#3]            ;767
00002e  e009              B        |L59.68|
                  |L59.48|
000030  69a0              LDR      r0,[r4,#0x18]         ;768
000032  4405              ADD      r5,r5,r0              ;768
000034  7860              LDRB     r0,[r4,#1]            ;769
000036  2301              MOVS     r3,#1                 ;769
000038  462a              MOV      r2,r5                 ;769
00003a  f1040130          ADD      r1,r4,#0x30           ;769
00003e  f7fffffe          BL       disk_write
000042  1e76              SUBS     r6,r6,#1              ;767
                  |L59.68|
000044  2e02              CMP      r6,#2                 ;767
000046  d2f3              BCS      |L59.48|
                  |L59.72|
000048  2000              MOVS     r0,#0                 ;773
00004a  e7e7              B        |L59.28|
;;;775    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;2332   static
;;;2333   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;2334   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2335   )
;;;2336   {
000002  4605              MOV      r5,r0
;;;2337   	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
000004  462c              MOV      r4,r5
;;;2338   
;;;2339   
;;;2340   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
000006  b14c              CBZ      r4,|L60.28|
000008  6820              LDR      r0,[r4,#0]
00000a  b138              CBZ      r0,|L60.28|
00000c  6820              LDR      r0,[r4,#0]
00000e  7800              LDRB     r0,[r0,#0]
000010  b120              CBZ      r0,|L60.28|
000012  6820              LDR      r0,[r4,#0]
000014  88c0              LDRH     r0,[r0,#6]
000016  88a1              LDRH     r1,[r4,#4]
000018  4288              CMP      r0,r1
00001a  d001              BEQ      |L60.32|
                  |L60.28|
;;;2341   		return FR_INVALID_OBJECT;
00001c  2009              MOVS     r0,#9
                  |L60.30|
;;;2342   
;;;2343   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2344   
;;;2345   	if (disk_status(fil->fs->drv) & STA_NOINIT)
;;;2346   		return FR_NOT_READY;
;;;2347   
;;;2348   	return FR_OK;
;;;2349   }
00001e  bd70              POP      {r4-r6,pc}
                  |L60.32|
000020  6821              LDR      r1,[r4,#0]            ;2345
000022  7848              LDRB     r0,[r1,#1]            ;2345
000024  f7fffffe          BL       disk_status
000028  f0100f01          TST      r0,#1                 ;2345
00002c  d001              BEQ      |L60.50|
00002e  2003              MOVS     r0,#3                 ;2346
000030  e7f5              B        |L60.30|
                  |L60.50|
000032  2000              MOVS     r0,#0                 ;2348
000034  e7f3              B        |L60.30|
;;;2350   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  LfnBuf
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  ExCvt
000000  809a9041          DCB      0x80,0x9a,0x90,0x41
000004  8e418f80          DCB      0x8e,0x41,0x8f,0x80
000008  45454549          DCB      0x45,0x45,0x45,0x49
00000c  49498e8f          DCB      0x49,0x49,0x8e,0x8f
000010  9092924f          DCB      0x90,0x92,0x92,0x4f
000014  994f5555          DCB      0x99,0x4f,0x55,0x55
000018  59999a9b          DCB      0x59,0x99,0x9a,0x9b
00001c  9c9d9e9f          DCB      0x9c,0x9d,0x9e,0x9f
000020  41494f55          DCB      0x41,0x49,0x4f,0x55
000024  a5a5a6a7          DCB      0xa5,0xa5,0xa6,0xa7
000028  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00002c  ac21aeaf          DCB      0xac,0x21,0xae,0xaf
000030  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000034  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000038  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00003c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000040  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000044  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000048  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00004c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000050  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000054  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000058  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00005c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
000060  e0e1e2e3          DCB      0xe0,0xe1,0xe2,0xe3
000064  e4e5e6e7          DCB      0xe4,0xe5,0xe6,0xe7
000068  e8e9eaeb          DCB      0xe8,0xe9,0xea,0xeb
00006c  ecedeeef          DCB      0xec,0xed,0xee,0xef
000070  f0f1f2f3          DCB      0xf0,0xf1,0xf2,0xf3
000074  f4f5f6f7          DCB      0xf4,0xf5,0xf6,0xf7
000078  f8f9fafb          DCB      0xf8,0xf9,0xfa,0xfb
00007c  fcfdfeff          DCB      0xfc,0xfd,0xfe,0xff
                  LfnOfs
000080  01030507          DCB      0x01,0x03,0x05,0x07
000084  090e1012          DCB      0x09,0x0e,0x10,0x12
000088  1416181c          DCB      0x14,0x16,0x18,0x1c
00008c  1e00              DCB      0x1e,0x00
                  vst
00008e  0400              DCW      0x0400
000090  02000100          DCW      0x0200,0x0100
000094  00800040          DCW      0x0080,0x0040
000098  00200010          DCW      0x0020,0x0010
00009c  00080004          DCW      0x0008,0x0004
0000a0  00020000          DCW      0x0002,0x0000
                  ||cst||
0000a4  80004000          DCW      0x8000,0x4000
0000a8  20001000          DCW      0x2000,0x1000
0000ac  08004000          DCW      0x0800,0x4000
0000b0  20001000          DCW      0x2000,0x1000
0000b4  08000400          DCW      0x0800,0x0400
0000b8  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          %        8
                  Fsid
000008  0000              DCB      0x00,0x00
