; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\diskio.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\diskio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\User -I..\User\bsp\inc -I..\User\bsp -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\MALLOC -I..\FatFs\src -I..\FatFs\src\option -I..\Iap -I"E:\Program Files\MDK 4.74\ARM\RV31\INC" -I"E:\Program Files\MDK 4.74\ARM\CMSIS\Include" -I"E:\Program Files\MDK 4.74\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\diskio.crf ..\FATFS\src\diskio.c]
                          THUMB

                          AREA ||i.disk_initialize||, CODE, READONLY, ALIGN=1

                  disk_initialize PROC
;;;25     ********************************************/
;;;26     DSTATUS disk_initialize (
000000  b570              PUSH     {r4-r6,lr}
;;;27     	BYTE pdrv				/* Physical drive nmuber (0..) */
;;;28     )
;;;29     {
000002  4604              MOV      r4,r0
;;;30     	u8 res=0;	    
000004  2500              MOVS     r5,#0
;;;31     	switch(pdrv)
000006  b114              CBZ      r4,|L1.14|
000008  2c01              CMP      r4,#1
00000a  d109              BNE      |L1.32|
00000c  e007              B        |L1.30|
                  |L1.14|
;;;32     	{
;;;33     		case SD_CARD:					//SD卡
;;;34     			res = SD_Init(); 	 
00000e  f7fffffe          BL       SD_Init
000012  4605              MOV      r5,r0
;;;35      			if(res==SD_OK)res=0;
000014  b90d              CBNZ     r5,|L1.26|
000016  2500              MOVS     r5,#0
000018  e000              B        |L1.28|
                  |L1.26|
;;;36     			else res=1;		
00001a  2501              MOVS     r5,#1
                  |L1.28|
;;;37       			break;
00001c  e002              B        |L1.36|
                  |L1.30|
;;;38     		case U_DISK:					//U盘
;;;39      			break;
00001e  e001              B        |L1.36|
                  |L1.32|
;;;40     		default:
;;;41     			res=1; 
000020  2501              MOVS     r5,#1
000022  bf00              NOP                            ;31
                  |L1.36|
000024  bf00              NOP                            ;37
;;;42     	}		 
;;;43     	if(res)return  STA_NOINIT;
000026  b10d              CBZ      r5,|L1.44|
000028  2001              MOVS     r0,#1
                  |L1.42|
;;;44     	else return 0; 						//初始化成功
;;;45     }  
00002a  bd70              POP      {r4-r6,pc}
                  |L1.44|
00002c  2000              MOVS     r0,#0                 ;44
00002e  e7fc              B        |L1.42|
;;;46     
                          ENDP


                          AREA ||i.disk_ioctl||, CODE, READONLY, ALIGN=1

                  disk_ioctl PROC
;;;142    #if _USE_IOCTL
;;;143    DRESULT disk_ioctl (
000000  b510              PUSH     {r4,lr}
;;;144    	BYTE pdrv,			/* Physical drive nmuber (0..) */
;;;145    	BYTE cmd,			/* Control code */
;;;146    	void *buff			/* Buffer to send/receive control data */
;;;147    )
;;;148    {
000002  4603              MOV      r3,r0
;;;149    	DRESULT res=RES_OK;						  			     
000004  2000              MOVS     r0,#0
;;;150    	if(pdrv==SD_CARD)		//SD卡
000006  b9bb              CBNZ     r3,|L2.56|
;;;151    	{
;;;152    	    switch(cmd)
000008  b131              CBZ      r1,|L2.24|
00000a  2901              CMP      r1,#1
00000c  d00f              BEQ      |L2.46|
00000e  2902              CMP      r1,#2
000010  d004              BEQ      |L2.28|
000012  2903              CMP      r1,#3
000014  d10d              BNE      |L2.50|
000016  e006              B        |L2.38|
                  |L2.24|
;;;153    	    {
;;;154    		    case CTRL_SYNC:	    
;;;155     		        res = RES_OK;
000018  2000              MOVS     r0,#0
;;;156    		        break;	 
00001a  e00c              B        |L2.54|
                  |L2.28|
;;;157    		    case GET_SECTOR_SIZE:
;;;158    		        *(WORD*)buff = 512;
00001c  f44f7400          MOV      r4,#0x200
000020  8014              STRH     r4,[r2,#0]
;;;159    		        res = RES_OK;
000022  2000              MOVS     r0,#0
;;;160    		        break;	 
000024  e007              B        |L2.54|
                  |L2.38|
;;;161    		    case GET_BLOCK_SIZE:
;;;162    		        *(WORD*)buff = 8;
000026  2408              MOVS     r4,#8
000028  8014              STRH     r4,[r2,#0]
;;;163    		        res = RES_OK;
00002a  2000              MOVS     r0,#0
;;;164    		        break;	 
00002c  e003              B        |L2.54|
                  |L2.46|
;;;165    		    case GET_SECTOR_COUNT:
;;;166     		        res = RES_OK;
00002e  2000              MOVS     r0,#0
;;;167    		        break;
000030  e001              B        |L2.54|
                  |L2.50|
;;;168    		    default:
;;;169    		        res = RES_PARERR;
000032  2004              MOVS     r0,#4
;;;170    		        break;
000034  bf00              NOP      
                  |L2.54|
000036  e002              B        |L2.62|
                  |L2.56|
;;;171    	    }
;;;172    	}
;;;173    	else if(pdrv==U_DISK)		//U盘  
000038  2b01              CMP      r3,#1
00003a  d000              BEQ      |L2.62|
;;;174    	{
;;;175    
;;;176    	}
;;;177    	else res=RES_ERROR;//其他的不支持
00003c  2001              MOVS     r0,#1
                  |L2.62|
;;;178        return res;
;;;179    }
00003e  bd10              POP      {r4,pc}
;;;180    #endif
                          ENDP


                          AREA ||i.disk_read||, CODE, READONLY, ALIGN=1

                  disk_read PROC
;;;69     ********************************************/
;;;70     DRESULT disk_read (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;71     	BYTE pdrv,		/* Physical drive nmuber (0..) */
;;;72     	BYTE *buff,		/* Data buffer to store read data */
;;;73     	DWORD sector,	/* Sector address (LBA) */
;;;74     	UINT count		/* Number of sectors to read (1..128) */
;;;75     )
;;;76     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;77     	u8 res=0; 
00000c  f04f0800          MOV      r8,#0
;;;78         if (!count)return RES_PARERR;				//count不能等于0，否则返回参数错误		 	 
000010  b914              CBNZ     r4,|L3.24|
000012  2004              MOVS     r0,#4
                  |L3.20|
;;;79     	switch(pdrv)
;;;80     	{
;;;81     		case SD_CARD:					//SD卡
;;;82     			res=SD_ReadDisk(buff,sector,count);	 
;;;83     			break;
;;;84     		case U_DISK:					//U盘
;;;85     			break;
;;;86     		default:
;;;87     			res=1; 
;;;88     	}
;;;89        //处理返回值，将SPI_SD_driver.c的返回值转成ff.c的返回值
;;;90         if(res==0x00)return RES_OK;	 
;;;91         else return RES_ERROR;	   
;;;92     }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  b115              CBZ      r5,|L3.32|
00001a  2d01              CMP      r5,#1                 ;79
00001c  d108              BNE      |L3.48|
00001e  e006              B        |L3.46|
                  |L3.32|
000020  b2e2              UXTB     r2,r4                 ;82
000022  4639              MOV      r1,r7                 ;82
000024  4630              MOV      r0,r6                 ;82
000026  f7fffffe          BL       SD_ReadDisk
00002a  4680              MOV      r8,r0                 ;82
00002c  e003              B        |L3.54|
                  |L3.46|
00002e  e002              B        |L3.54|
                  |L3.48|
000030  f04f0801          MOV      r8,#1                 ;87
000034  bf00              NOP                            ;79
                  |L3.54|
000036  bf00              NOP                            ;83
000038  f1b80f00          CMP      r8,#0                 ;90
00003c  d101              BNE      |L3.66|
00003e  2000              MOVS     r0,#0                 ;90
000040  e7e8              B        |L3.20|
                  |L3.66|
000042  2001              MOVS     r0,#1                 ;91
000044  e7e6              B        |L3.20|
;;;93     
                          ENDP


                          AREA ||i.disk_status||, CODE, READONLY, ALIGN=1

                  disk_status PROC
;;;54     ********************************************/
;;;55     DSTATUS disk_status (
000000  4601              MOV      r1,r0
;;;56     	BYTE pdrv		/* Physical drive nmuber (0..) */
;;;57     )
;;;58     { 
;;;59     	return 0;
000002  2000              MOVS     r0,#0
;;;60     } 
000004  4770              BX       lr
;;;61     
                          ENDP


                          AREA ||i.disk_write||, CODE, READONLY, ALIGN=1

                  disk_write PROC
;;;102    #if _USE_WRITE
;;;103    DRESULT disk_write (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;104    	BYTE pdrv,			/* Physical drive nmuber (0..) */
;;;105    	const BYTE *buff,		/* Data to be written */
;;;106    	DWORD sector,			/* Sector address (LBA) */
;;;107    	UINT count			/* Number of sectors to write (1..128) */
;;;108    )
;;;109    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;110    	u8 res=0;
00000c  f04f0800          MOV      r8,#0
;;;111    	u8 retry=0x1F;			//写入失败的时候，重试次数
000010  f04f091f          MOV      r9,#0x1f
;;;112    	if (!count)return RES_PARERR;	//count不能等于0，否则返回参数错误		 	 
000014  b914              CBNZ     r4,|L5.28|
000016  2004              MOVS     r0,#4
                  |L5.24|
;;;113    	switch(pdrv)
;;;114    	{
;;;115    		case SD_CARD:		//SD卡
;;;116    			while(retry)
;;;117    			{
;;;118    				res=SD_WriteDisk((u8*)buff,sector,count);
;;;119     				if(res==0)break;
;;;120    				retry--;
;;;121    			}
;;;122    			break;
;;;123    		case U_DISK:		//U盘
;;;124    			break;
;;;125    		default:
;;;126    			res=1; 
;;;127    	}
;;;128        //处理返回值，将SPI_SD_driver.c的返回值转成ff.c的返回值
;;;129        if(res == 0x00)return RES_OK;	 
;;;130        else return RES_ERROR;	
;;;131    }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L5.28|
00001c  b115              CBZ      r5,|L5.36|
00001e  2d01              CMP      r5,#1                 ;113
000020  d115              BNE      |L5.78|
000022  e013              B        |L5.76|
                  |L5.36|
000024  e00d              B        |L5.66|
                  |L5.38|
000026  b2e2              UXTB     r2,r4                 ;118
000028  4639              MOV      r1,r7                 ;118
00002a  4630              MOV      r0,r6                 ;118
00002c  f7fffffe          BL       SD_WriteDisk
000030  4680              MOV      r8,r0                 ;118
000032  f1b80f00          CMP      r8,#0                 ;119
000036  d100              BNE      |L5.58|
000038  e006              B        |L5.72|
                  |L5.58|
00003a  f1a90001          SUB      r0,r9,#1              ;120
00003e  f00009ff          AND      r9,r0,#0xff           ;120
                  |L5.66|
000042  f1b90f00          CMP      r9,#0                 ;116
000046  d1ee              BNE      |L5.38|
                  |L5.72|
000048  bf00              NOP                            ;119
00004a  e003              B        |L5.84|
                  |L5.76|
00004c  e002              B        |L5.84|
                  |L5.78|
00004e  f04f0801          MOV      r8,#1                 ;126
000052  bf00              NOP                            ;113
                  |L5.84|
000054  bf00              NOP                            ;122
000056  f1b80f00          CMP      r8,#0                 ;129
00005a  d101              BNE      |L5.96|
00005c  2000              MOVS     r0,#0                 ;129
00005e  e7db              B        |L5.24|
                  |L5.96|
000060  2001              MOVS     r0,#1                 ;130
000062  e7d9              B        |L5.24|
;;;132    #endif
                          ENDP


                          AREA ||i.get_fattime||, CODE, READONLY, ALIGN=1

                  get_fattime PROC
;;;185    //15-11: Hour(0-23), 10-5: Minute(0-59), 4-0: Second(0-29 *2) */                                                                                                                                                                                                                                                
;;;186    DWORD get_fattime (void)
000000  2000              MOVS     r0,#0
;;;187    {				 
;;;188    	return 0;
;;;189    }			 
000002  4770              BX       lr
;;;190    ////动态分配内存，这里没使用，应为没有使用内存分配，减小RAM的使用
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FATFS\\src\\diskio.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_diskio_c_b3252454____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_diskio_c_b3252454____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_diskio_c_b3252454____REVSH|
#line 128
|__asm___8_diskio_c_b3252454____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
